2010-07-21  Sebastien Pouliot  <sebastien@ximian.com> 

	* BrowserHttpWebRequest.cs: Revert previous change as it regressed
	DRT #664 (and was not quite right)
	* PolicyBasedHttpWebRequest.cs: Correct fix for DRT #3002 Also 
	fix DRT #3011 and, hopefully, progress a few others 30xx

2010-07-15  Sebastien Pouliot  <sebastien@ximian.com> 

	* PolicyBasedHttpWebRequest.cs: Throw a SecurityException (instead
	of a WebException) if a resource is not found using HTTPS. Fix 
	DRT #3002

2010-07-15  Sebastien Pouliot  <sebastien@ximian.com>

	* BrowserHttpWebRequest.cs: Custom headers cannot be used with 
	browser	stack so we move to whitelisting.

2010-07-08  Sebastien Pouliot  <sebastien@ximian.com> 

	* PolicyBasedHttpWebRequest.cs: Special case for Proxy-Authorization.
	Fix DRT664

2010-06-21  Sebastien Pouliot  <sebastien@ximian.com> 

	* PolicyBasedHttpWebRequest.cs: Implement ContentLength for both
	stacks

2010-06-21  Sebastien Pouliot  <sebastien@ximian.com>

	* BrowserHttpWebRequest.cs: AllowWriteStreamBuffering is always 
	true (getter) and cannot be set (NotSupportedException)
	* ClientHttpWebRequest.cs: Add get/set AllowWriteStreamBuffering
	property override
	* PolicyBasedHttpWebRequest.cs: Remove AllowWriteStreamBuffering
	property override since it differs between the two stacks

2010-05-19  Andreia Gaita  <avidigal@novell.com>

	* BrowserHttpWebRequestInternal.cs: Keep the dispatcher around, it
	  needs to be alive for the callback

2010-05-24  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* BrowserHttpWebRequestInternal.cs: Update to HttpRequest API.

	* BrowserHttpWebResponse.cs: Update to HttpRequest API. This means it is not
	necessary to store a GCHandle to self in an instance field, since the only
	place we use it (to visit the response headers), we can free it immediately
	when done. This also makes the Dispose method empty, so it has been removed,
	which also caused the Abort method to become empty, so that too has been
	removed.

	* BrowserHttpWebRequest.cs: Remove the abort method, it's empty now since
	BrowserHttpWebResponse's Abort method is empty too.

2010-05-20  Sebastien Pouliot  <sebastien@ximian.com>

	* BrowserHttpWebResponse.cs: Fix ContentLength when the response 
	does not provide a Content-Length header. Fix for DRT#664

2010-05-17  Sebastien Pouliot  <sebastien@ximian.com>

	* PolicyBasedHttpWebRequest.cs: Same fix as previous (typo) when 
	a flash policy is used (previous case covers a SL policy)

2010-05-18  Andreia Gaita  <avidigal@novell.com>

	* PolicyBasedHttpWebRequest.cs: headers should be sent with the main
	request

2010-05-14  Sebastien Pouliot  <sebastien@ximian.com>

	* BrowserHttpWebRequest.cs:
	* ClientHttpWebRequest.cs:
	* PolicyBasedHttpWebRequest.cs:
		Don't directly use headers internal fields

2010-05-12  Sebastien Pouliot  <sebastien@ximian.com>

	* PolicyBasedHttpWebRequest.cs: Revert r151713 since there were
	reasons to redirect using GET instead of POST - based on previous
	change it will still allow HEAD redirects

2010-04-30  Sebastien Pouliot  <sebastien@ximian.com>

	* ClientHttpWebRequest.cs: Don't check for Content-Type when
	receiving a response (it's done earlier).

2010-04-29  Sebastien Pouliot  <sebastien@ximian.com>

	* PolicyBasedHttpWebRequest.cs: Handle exceptions that occurs 
	inside the internal EndGetResponse

2010-04-29  Sebastien Pouliot  <sebastien@ximian.com> 

	* ClientHttpWebRequestInternal.cs: Set ContentType separately (i.e.
	with its own property) since cannot use the Headers property for it

2010-04-29  Sebastien Pouliot  <sebastien@ximian.com>

	* ClientHttpWebRequestInternal.cs: Set the method earlier to cover the
	case where BeginGetRequestStream is called (e.g. POST)

2010-04-28  Sebastien Pouliot  <sebastien@ximian.com>

	* ClientHttpWebRequest.cs: Ensure 'request' is creating before 
	using it

2010-04-28  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* BrowserHttpWebRequestInternal.cs: Update according to DownloaderRequest
	api changes.

2010-04-21  Sebastien Pouliot  <sebastien@ximian.com>

	* HttpWebResponseCore.cs: Override Headers property since it is
	now befined in HttpWebResponse in SL4

2010-04-05  Sebastien Pouliot  <sebastien@ximian.com> 

	* InternalWebResponseStreamWrapper.cs: Fix regression in DRT#244
	while keeping #534 happy

2010-04-05  Sebastien Pouliot  <sebastien@ximian.com>

	* BrowserHttpWebResponse.cs: Adjust for API change
	* ClientHttpWebRequestInternal.cs: Adjust for API change
	* ClientHttpWebResponse.cs: Initialize stream depending on
	AllowReadStreamBuffering value.
	* HttpWebRequestCore.cs: Correctly set AllowReadStreamBuffering
	* InternalWebResponseStreamWrapper.cs: Moved from System.Net.dll
	so it can be aware of AllowReadStreamBuffering value.

2010-03-23  Sebastien Pouliot  <sebastien@ximian.com>

	* ClientHttpWebRequestInternal.cs: Remove unused code

2010-03-22  Sebastien Pouliot  <sebastien@ximian.com>

	* BrowserHttpWebRequest.cs: Simplified by moving common code to
	a base class.
	* BrowserHttpWebRequestInternal.cs: Simplified by moving common 
	code to	a base class.
	* BrowserHttpWebResponse.cs: Simplified by moving common code to
	a base class.

	* ClientReflectionHelper.cs: New. Helper class to deal with
	reflection code.
	* ClientHttpWebRequest.cs: New. Client stack that reflect back to
	use the managed HttpWebRequest from System.dll
	* ClientHttpWebResponse.cs: New. Client stack that reflect back to
	use the managed HttpWebResponse from System.dll
	* ClientWebRequestCreate.cs: Start using the real client http 
	stack when asked to.

	* HttpWebAsyncResult.cs: Renamed from BrowserHttpWebAsyncResult.cs
	since it's being used by both stacks.
	* HttpWebRequestCore.cs: New. Base class for both stacks "real" 
	requests.
	* HttpWebResponseCore.cs: New. Base class for both stacks 
	responses.
	* PolicyBasedHttpWebRequest.cs: Base class for both http stacks
	that deals with policy and redirection.

	* README

2010-03-19  Sebastien Pouliot  <sebastien@ximian.com>

	* BrowserHttpWebRequest.cs: Throw a SecurityException if the 
	request URI does not use HTTP[S]

2010-03-18  Sebastien Pouliot  <sebastien@ximian.com>

	* BrowserHttpWebRequest.cs: Override both AllowWriteStreamBuffering,
	SupportsCookieContainer and UseDefaultCredentials (SL4 RC) new 
	properties. Fix restricted Cache-Control header (unit test).

2010-03-12  Sebastien Pouliot  <sebastien@ximian.com>

	* BrowserHttpWebRequest[Internal].cs: Remove 'progress' field. It
	is now defined as an internal in WebRequest (System.Net).

2010-03-11  Sebastien Pouliot  <sebastien@ximian.com>

	* BrowserHttpWebAsyncResult.cs, BrowserHttpWebRequest[Internal].cs,
	BrowserHttpWebResponse.cs: Sources moved from System.Windows.Browser.dll

2010-02-15  Sebastien Pouliot  <sebastien@ximian.com>

	* BrowserWebRequestCreate.cs: Not for desktop assemblies.
	* ClientWebRequestCreate.cs: Not for desktop assemblies.
	* WebRequestCreator.cs: Not for desktop assemblies.

2010-01-12  Sebastien Pouliot  <sebastien@ximian.com>

	* BrowserWebRequestCreate.cs: Add MIT.X11 header. Rename type to
	match MS (since they document to call GetType to know which stack
	is being used) and make it internal to match SL3 API. Use 
	reflection to create System.Windows.Browser.Net.BrowserHttpWebRequest
	from System.Windows.Browser.dll
	* ClientWebRequestCreate.cs: Add MIT.X11 header. Rename type to 
	match MS (since they document to call GetType to know which stack 
	is being used) and make it internal to match SL3 API. 
	* WebRequestCreator.cs: Adjust with new names.

