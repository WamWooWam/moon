using System;
using System.Windows;
using System.Windows.Automation.Peers;
using System.Windows.Browser;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Interop;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Effects;
using System.Windows.Media.Media3D;
using System.Windows.Media.Animation;
using System.Windows.Media.Imaging;
using System.Windows.Printing;
using System.Windows.Resources;
using System.Windows.Shapes;
using System.Windows.Threading;

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Mono.Moonlight.UnitTesting;
using System.Collections.Generic;
using System.Collections.ObjectModel;

#pragma warning disable 219 // The variable `X' is assigned but its value is never used

namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class EventTriggerTest
    {
        [TestMethod]
        public void Test_PropertyGetter_EventTrigger ()
        {
            EventTrigger widget = new EventTrigger ();

            Assert.IsNotNull(widget.Actions, "Actions should not have returned null");
            Assert.IsInstanceOfType<TriggerActionCollection>(widget.Actions, "Actions is not of the correct type");
            Assert.IsNull(widget.RoutedEvent, "RoutedEvent should have returned null");
        }

    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class TriggerActionCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_TriggerActionCollection ()
        {
            TriggerActionCollection widget = new TriggerActionCollection ();

            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<TriggerActionCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class AssemblyPartTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_AssemblyPart ()
        {
            AssemblyPart widget = new AssemblyPart ();
            object retval;

            retval = widget.ReadLocalValue(AssemblyPart.SourceProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(AssemblyPart.SourceProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_AssemblyPart ()
        {
            AssemblyPart widget = new AssemblyPart ();
            object retval;

            Assert.IsNotNull(AssemblyPart.SourceProperty.GetMetadata (typeof (AssemblyPart)), "#metadata should not be null for: AssemblyPart.SourceProperty.AssemblyPart");
            retval = AssemblyPart.SourceProperty.GetMetadata (typeof (AssemblyPart)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for AssemblyPart.SourceProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "AssemblyPart.SourceProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "AssemblyPart.SourceProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(AssemblyPart.SourceProperty);
            Assert.IsNotNull(retval, "GetValue(AssemblyPart.SourceProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(AssemblyPart.SourceProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(AssemblyPart.SourceProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_AssemblyPart ()
        {
            AssemblyPart widget = new AssemblyPart ();

            Assert.IsNotNull(widget.Source, "Source should not have returned null");
            Assert.AreEqual("", widget.Source, "Source does not match the default value");
        }

        [TestMethod]
        public void Test_SetStringValue_AssemblyPart ()
        {
            AssemblyPart widget = new AssemblyPart ();
            object retval;

            widget.SetValue(AssemblyPart.SourceProperty, "some text");
            retval = widget.GetValue(AssemblyPart.SourceProperty);
            Assert.AreEqual("some text", retval, "GetValue(AssemblyPart.SourceProperty) should have returned 'some text'");
            widget.SetValue(AssemblyPart.SourceProperty, null);
            retval = widget.GetValue(AssemblyPart.SourceProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(AssemblyPart.SourceProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(AssemblyPart.SourceProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(AssemblyPart.SourceProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class AssemblyPartCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_AssemblyPartCollection ()
        {
            AssemblyPartCollection widget = new AssemblyPartCollection ();

            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<AssemblyPartCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class DataTemplateTest
    {
    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class StyleTest
    {
        [TestMethod]
        public void Test_PropertyGetter_Style ()
        {
            Style widget = new Style ();

            Assert.AreEqual(false, widget.IsSealed, "IsSealed does not match the default value");
            Assert.IsNotNull(widget.Setters, "Setters should not have returned null");
            Assert.IsInstanceOfType<SetterBaseCollection>(widget.Setters, "Setters is not of the correct type");
            Assert.IsNull(widget.BasedOn, "BasedOn should have returned null");
            Assert.IsNull(widget.TargetType, "TargetType should have returned null");
        }

    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class SetterTest
    {
        [TestMethod]
        public void Test_PropertyGetter_Setter ()
        {
            Setter widget = new Setter ();

            Assert.IsNull(widget.Value, "Value should have returned null");
            Assert.IsNull(widget.Property, "Property should have returned null");
            Assert.AreEqual(false, widget.IsSealed, "IsSealed does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class SetterBaseCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_SetterBaseCollection ()
        {
            SetterBaseCollection widget = new SetterBaseCollection ();

            Assert.AreEqual(false, widget.IsSealed, "IsSealed does not match the default value");
            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<SetterBaseCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class VisualStateTest
    {
        [TestMethod]
        public void Test_PropertyGetter_VisualState ()
        {
            VisualState widget = new VisualState ();

            Assert.IsNull(widget.Storyboard, "Storyboard should have returned null");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class OutOfBrowserSettingsTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_OutOfBrowserSettings ()
        {
            OutOfBrowserSettings widget = new OutOfBrowserSettings ();
            object retval;

            retval = widget.ReadLocalValue(OutOfBrowserSettings.ShortNameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(OutOfBrowserSettings.ShortNameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(OutOfBrowserSettings.BlurbProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(OutOfBrowserSettings.BlurbProperty) should not have a value by default");
            retval = widget.ReadLocalValue(OutOfBrowserSettings.IconsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(OutOfBrowserSettings.IconsProperty) should not have a value by default");
            retval = widget.ReadLocalValue(OutOfBrowserSettings.EnableGPUAccelerationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(OutOfBrowserSettings.EnableGPUAccelerationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(OutOfBrowserSettings.ShowInstallMenuItemProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(OutOfBrowserSettings.ShowInstallMenuItemProperty) should not have a value by default");
            retval = widget.ReadLocalValue(OutOfBrowserSettings.WindowSettingsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(OutOfBrowserSettings.WindowSettingsProperty) should not have a value by default");
            retval = widget.ReadLocalValue(OutOfBrowserSettings.SecuritySettingsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(OutOfBrowserSettings.SecuritySettingsProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_OutOfBrowserSettings ()
        {
            OutOfBrowserSettings widget = new OutOfBrowserSettings ();
            object retval;

            Assert.IsNotNull(OutOfBrowserSettings.ShortNameProperty.GetMetadata (typeof (OutOfBrowserSettings)), "#metadata should not be null for: OutOfBrowserSettings.ShortNameProperty.OutOfBrowserSettings");
            retval = OutOfBrowserSettings.ShortNameProperty.GetMetadata (typeof (OutOfBrowserSettings)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for OutOfBrowserSettings.ShortNameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "OutOfBrowserSettings.ShortNameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "OutOfBrowserSettings.ShortNameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(OutOfBrowserSettings.ShortNameProperty);
            Assert.IsNotNull(retval, "GetValue(OutOfBrowserSettings.ShortNameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(OutOfBrowserSettings.ShortNameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(OutOfBrowserSettings.ShortNameProperty) does not match the default value");
            Assert.IsNotNull(OutOfBrowserSettings.BlurbProperty.GetMetadata (typeof (OutOfBrowserSettings)), "#metadata should not be null for: OutOfBrowserSettings.BlurbProperty.OutOfBrowserSettings");
            retval = OutOfBrowserSettings.BlurbProperty.GetMetadata (typeof (OutOfBrowserSettings)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for OutOfBrowserSettings.BlurbProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "OutOfBrowserSettings.BlurbProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "OutOfBrowserSettings.BlurbProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(OutOfBrowserSettings.BlurbProperty);
            Assert.IsNotNull(retval, "GetValue(OutOfBrowserSettings.BlurbProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(OutOfBrowserSettings.BlurbProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(OutOfBrowserSettings.BlurbProperty) does not match the default value");
            Assert.IsNotNull(OutOfBrowserSettings.IconsProperty.GetMetadata (typeof (OutOfBrowserSettings)), "#metadata should not be null for: OutOfBrowserSettings.IconsProperty.OutOfBrowserSettings");
            retval = OutOfBrowserSettings.IconsProperty.GetMetadata (typeof (OutOfBrowserSettings)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for OutOfBrowserSettings.IconsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(OutOfBrowserSettings.IconsProperty);
            Assert.IsNotNull(retval, "GetValue(OutOfBrowserSettings.IconsProperty) should not have returned null");
            Assert.IsInstanceOfType<IconCollection>(retval, "GetValue(OutOfBrowserSettings.IconsProperty) is not of the correct type");
            Assert.IsNotNull(OutOfBrowserSettings.EnableGPUAccelerationProperty.GetMetadata (typeof (OutOfBrowserSettings)), "#metadata should not be null for: OutOfBrowserSettings.EnableGPUAccelerationProperty.OutOfBrowserSettings");
            retval = OutOfBrowserSettings.EnableGPUAccelerationProperty.GetMetadata (typeof (OutOfBrowserSettings)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for OutOfBrowserSettings.EnableGPUAccelerationProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "OutOfBrowserSettings.EnableGPUAccelerationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "OutOfBrowserSettings.EnableGPUAccelerationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(OutOfBrowserSettings.EnableGPUAccelerationProperty);
            Assert.IsNotNull(retval, "GetValue(OutOfBrowserSettings.EnableGPUAccelerationProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(OutOfBrowserSettings.EnableGPUAccelerationProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(OutOfBrowserSettings.EnableGPUAccelerationProperty) does not match the default value");
            Assert.IsNotNull(OutOfBrowserSettings.ShowInstallMenuItemProperty.GetMetadata (typeof (OutOfBrowserSettings)), "#metadata should not be null for: OutOfBrowserSettings.ShowInstallMenuItemProperty.OutOfBrowserSettings");
            retval = OutOfBrowserSettings.ShowInstallMenuItemProperty.GetMetadata (typeof (OutOfBrowserSettings)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for OutOfBrowserSettings.ShowInstallMenuItemProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "OutOfBrowserSettings.ShowInstallMenuItemProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "OutOfBrowserSettings.ShowInstallMenuItemProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(OutOfBrowserSettings.ShowInstallMenuItemProperty);
            Assert.IsNotNull(retval, "GetValue(OutOfBrowserSettings.ShowInstallMenuItemProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(OutOfBrowserSettings.ShowInstallMenuItemProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(OutOfBrowserSettings.ShowInstallMenuItemProperty) does not match the default value");
            Assert.IsNotNull(OutOfBrowserSettings.WindowSettingsProperty.GetMetadata (typeof (OutOfBrowserSettings)), "#metadata should not be null for: OutOfBrowserSettings.WindowSettingsProperty.OutOfBrowserSettings");
            retval = OutOfBrowserSettings.WindowSettingsProperty.GetMetadata (typeof (OutOfBrowserSettings)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for OutOfBrowserSettings.WindowSettingsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(OutOfBrowserSettings.WindowSettingsProperty);
            Assert.IsNull(retval, "GetValue(OutOfBrowserSettings.WindowSettingsProperty) should have returned null");
            Assert.IsNotNull(OutOfBrowserSettings.SecuritySettingsProperty.GetMetadata (typeof (OutOfBrowserSettings)), "#metadata should not be null for: OutOfBrowserSettings.SecuritySettingsProperty.OutOfBrowserSettings");
            retval = OutOfBrowserSettings.SecuritySettingsProperty.GetMetadata (typeof (OutOfBrowserSettings)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for OutOfBrowserSettings.SecuritySettingsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(OutOfBrowserSettings.SecuritySettingsProperty);
            Assert.IsNull(retval, "GetValue(OutOfBrowserSettings.SecuritySettingsProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_OutOfBrowserSettings ()
        {
            OutOfBrowserSettings widget = new OutOfBrowserSettings ();

            Assert.IsNotNull(widget.ShortName, "ShortName should not have returned null");
            Assert.AreEqual("", widget.ShortName, "ShortName does not match the default value");
            Assert.IsNotNull(widget.Blurb, "Blurb should not have returned null");
            Assert.AreEqual("", widget.Blurb, "Blurb does not match the default value");
            Assert.IsNotNull(widget.Icons, "Icons should not have returned null");
            Assert.IsInstanceOfType<IconCollection>(widget.Icons, "Icons is not of the correct type");
            Assert.AreEqual(false, widget.EnableGPUAcceleration, "EnableGPUAcceleration does not match the default value");
            Assert.AreEqual(true, widget.ShowInstallMenuItem, "ShowInstallMenuItem does not match the default value");
            Assert.IsNull(widget.WindowSettings, "WindowSettings should have returned null");
            Assert.IsNull(widget.SecuritySettings, "SecuritySettings should have returned null");
        }

        [TestMethod]
        public void Test_SetStringValue_OutOfBrowserSettings ()
        {
            OutOfBrowserSettings widget = new OutOfBrowserSettings ();
            object retval;

            Assert.Throws<ArgumentException>(delegate {
                widget.SetValue(OutOfBrowserSettings.ShortNameProperty, "some text");
            }, "SetValue(OutOfBrowserSettings.ShortNameProperty, \"some text\") should thow an exception");
            retval = widget.GetValue(OutOfBrowserSettings.ShortNameProperty);
            Assert.AreEqual("", retval, "GetValue(OutOfBrowserSettings.ShortNameProperty) should have returned ''");
            Assert.Throws<ArgumentException>(delegate {
                widget.SetValue(OutOfBrowserSettings.ShortNameProperty, null);
            }, "SetValue(OutOfBrowserSettings.ShortNameProperty, null) should thow an exception");
            retval = widget.GetValue(OutOfBrowserSettings.ShortNameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(OutOfBrowserSettings.ShortNameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(OutOfBrowserSettings.ShortNameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(OutOfBrowserSettings.ShortNameProperty) should not have a value by default");
            Assert.Throws<ArgumentException>(delegate {
                widget.SetValue(OutOfBrowserSettings.BlurbProperty, "some text");
            }, "SetValue(OutOfBrowserSettings.BlurbProperty, \"some text\") should thow an exception");
            retval = widget.GetValue(OutOfBrowserSettings.BlurbProperty);
            Assert.AreEqual("", retval, "GetValue(OutOfBrowserSettings.BlurbProperty) should have returned ''");
            Assert.Throws<ArgumentException>(delegate {
                widget.SetValue(OutOfBrowserSettings.BlurbProperty, null);
            }, "SetValue(OutOfBrowserSettings.BlurbProperty, null) should thow an exception");
            retval = widget.GetValue(OutOfBrowserSettings.BlurbProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(OutOfBrowserSettings.BlurbProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(OutOfBrowserSettings.BlurbProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(OutOfBrowserSettings.BlurbProperty) should not have a value by default");
        }

    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class IconCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_IconCollection ()
        {
            IconCollection widget = new IconCollection ();

            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<IconCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class IconTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Icon ()
        {
            Icon widget = new Icon ();
            object retval;

            retval = widget.ReadLocalValue(Icon.SizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Icon.SizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Icon.SourceProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Icon.SourceProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Icon ()
        {
            Icon widget = new Icon ();
            object retval;

            Assert.IsNotNull(Icon.SizeProperty.GetMetadata (typeof (Icon)), "#metadata should not be null for: Icon.SizeProperty.Icon");
            retval = Icon.SizeProperty.GetMetadata (typeof (Icon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Icon.SizeProperty should be non-null value");
            Assert.IsInstanceOfType<Size>(retval, "Icon.SizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "Icon.SizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Icon.SizeProperty);
            Assert.IsNotNull(retval, "GetValue(Icon.SizeProperty) should not have returned null");
            Assert.IsInstanceOfType<Size>(retval, "GetValue(Icon.SizeProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(Icon.SizeProperty) does not match the default value");
            Assert.IsNotNull(Icon.SourceProperty.GetMetadata (typeof (Icon)), "#metadata should not be null for: Icon.SourceProperty.Icon");
            retval = Icon.SourceProperty.GetMetadata (typeof (Icon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Icon.SourceProperty should be non-null value");
            Assert.IsInstanceOfType<Uri>(retval, "Icon.SourceProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval.ToString (), "Icon.SourceProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Icon.SourceProperty);
            Assert.IsNotNull(retval, "GetValue(Icon.SourceProperty) should not have returned null");
            Assert.IsInstanceOfType<Uri>(retval, "GetValue(Icon.SourceProperty) is not of the correct type");
            Assert.AreEqual("", retval.ToString (), "GetValue(Icon.SourceProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_Icon ()
        {
            Icon widget = new Icon ();

            Assert.AreEqual("0,0", widget.Size.ToString (), "Size does not match the default value");
            Assert.IsNotNull(widget.Source, "Source should not have returned null");
            Assert.AreEqual("", widget.Source.ToString (), "Source does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class WindowSettingsTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_WindowSettings ()
        {
            WindowSettings widget = new WindowSettings ();
            object retval;

            retval = widget.ReadLocalValue(WindowSettings.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(WindowSettings.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(WindowSettings.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(WindowSettings.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(WindowSettings.TitleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(WindowSettings.TitleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(WindowSettings.WindowStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(WindowSettings.WindowStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(WindowSettings.LeftProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(WindowSettings.LeftProperty) should not have a value by default");
            retval = widget.ReadLocalValue(WindowSettings.TopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(WindowSettings.TopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(WindowSettings.WindowStartupLocationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(WindowSettings.WindowStartupLocationProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_WindowSettings ()
        {
            WindowSettings widget = new WindowSettings ();
            object retval;

            Assert.IsNotNull(WindowSettings.HeightProperty.GetMetadata (typeof (WindowSettings)), "#metadata should not be null for: WindowSettings.HeightProperty.WindowSettings");
            retval = WindowSettings.HeightProperty.GetMetadata (typeof (WindowSettings)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for WindowSettings.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "WindowSettings.HeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 600, retval, "WindowSettings.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(WindowSettings.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(WindowSettings.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(WindowSettings.HeightProperty) is not of the correct type");
            Assert.AreEqual((double) 600, retval, "GetValue(WindowSettings.HeightProperty) does not match the default value");
            Assert.IsNotNull(WindowSettings.WidthProperty.GetMetadata (typeof (WindowSettings)), "#metadata should not be null for: WindowSettings.WidthProperty.WindowSettings");
            retval = WindowSettings.WidthProperty.GetMetadata (typeof (WindowSettings)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for WindowSettings.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "WindowSettings.WidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 800, retval, "WindowSettings.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(WindowSettings.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(WindowSettings.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(WindowSettings.WidthProperty) is not of the correct type");
            Assert.AreEqual((double) 800, retval, "GetValue(WindowSettings.WidthProperty) does not match the default value");
            Assert.IsNotNull(WindowSettings.TitleProperty.GetMetadata (typeof (WindowSettings)), "#metadata should not be null for: WindowSettings.TitleProperty.WindowSettings");
            retval = WindowSettings.TitleProperty.GetMetadata (typeof (WindowSettings)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for WindowSettings.TitleProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "WindowSettings.TitleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "WindowSettings.TitleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(WindowSettings.TitleProperty);
            Assert.IsNotNull(retval, "GetValue(WindowSettings.TitleProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(WindowSettings.TitleProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(WindowSettings.TitleProperty) does not match the default value");
            Assert.IsNotNull(WindowSettings.WindowStyleProperty.GetMetadata (typeof (WindowSettings)), "#metadata should not be null for: WindowSettings.WindowStyleProperty.WindowSettings");
            retval = WindowSettings.WindowStyleProperty.GetMetadata (typeof (WindowSettings)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for WindowSettings.WindowStyleProperty should be non-null value");
            Assert.IsInstanceOfType<WindowStyle>(retval, "WindowSettings.WindowStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(WindowStyle.SingleBorderWindow, retval, "WindowSettings.WindowStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(WindowSettings.WindowStyleProperty);
            Assert.IsNotNull(retval, "GetValue(WindowSettings.WindowStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<WindowStyle>(retval, "GetValue(WindowSettings.WindowStyleProperty) is not of the correct type");
            Assert.AreEqual(WindowStyle.SingleBorderWindow, retval, "GetValue(WindowSettings.WindowStyleProperty) does not match the default value");
            Assert.IsNotNull(WindowSettings.LeftProperty.GetMetadata (typeof (WindowSettings)), "#metadata should not be null for: WindowSettings.LeftProperty.WindowSettings");
            retval = WindowSettings.LeftProperty.GetMetadata (typeof (WindowSettings)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for WindowSettings.LeftProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "WindowSettings.LeftProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "WindowSettings.LeftProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(WindowSettings.LeftProperty);
            Assert.IsNotNull(retval, "GetValue(WindowSettings.LeftProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(WindowSettings.LeftProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(WindowSettings.LeftProperty) does not match the default value");
            Assert.IsNotNull(WindowSettings.TopProperty.GetMetadata (typeof (WindowSettings)), "#metadata should not be null for: WindowSettings.TopProperty.WindowSettings");
            retval = WindowSettings.TopProperty.GetMetadata (typeof (WindowSettings)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for WindowSettings.TopProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "WindowSettings.TopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "WindowSettings.TopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(WindowSettings.TopProperty);
            Assert.IsNotNull(retval, "GetValue(WindowSettings.TopProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(WindowSettings.TopProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(WindowSettings.TopProperty) does not match the default value");
            Assert.IsNotNull(WindowSettings.WindowStartupLocationProperty.GetMetadata (typeof (WindowSettings)), "#metadata should not be null for: WindowSettings.WindowStartupLocationProperty.WindowSettings");
            retval = WindowSettings.WindowStartupLocationProperty.GetMetadata (typeof (WindowSettings)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for WindowSettings.WindowStartupLocationProperty should be non-null value");
            Assert.IsInstanceOfType<WindowStartupLocation>(retval, "WindowSettings.WindowStartupLocationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(WindowStartupLocation.CenterScreen, retval, "WindowSettings.WindowStartupLocationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(WindowSettings.WindowStartupLocationProperty);
            Assert.IsNotNull(retval, "GetValue(WindowSettings.WindowStartupLocationProperty) should not have returned null");
            Assert.IsInstanceOfType<WindowStartupLocation>(retval, "GetValue(WindowSettings.WindowStartupLocationProperty) is not of the correct type");
            Assert.AreEqual(WindowStartupLocation.CenterScreen, retval, "GetValue(WindowSettings.WindowStartupLocationProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_WindowSettings ()
        {
            WindowSettings widget = new WindowSettings ();

            Assert.AreEqual((double) 600, widget.Height, "Height does not match the default value");
            Assert.AreEqual((double) 800, widget.Width, "Width does not match the default value");
            Assert.IsNotNull(widget.Title, "Title should not have returned null");
            Assert.AreEqual("", widget.Title, "Title does not match the default value");
            Assert.AreEqual(WindowStyle.SingleBorderWindow, widget.WindowStyle, "WindowStyle does not match the default value");
            Assert.AreEqual((double) 0, widget.Left, "Left does not match the default value");
            Assert.AreEqual((double) 0, widget.Top, "Top does not match the default value");
            Assert.AreEqual(WindowStartupLocation.CenterScreen, widget.WindowStartupLocation, "WindowStartupLocation does not match the default value");
        }

        [TestMethod]
        public void Test_SetStringValue_WindowSettings ()
        {
            WindowSettings widget = new WindowSettings ();
            object retval;

            Assert.Throws<ArgumentException>(delegate {
                widget.SetValue(WindowSettings.TitleProperty, "some text");
            }, "SetValue(WindowSettings.TitleProperty, \"some text\") should thow an exception");
            retval = widget.GetValue(WindowSettings.TitleProperty);
            Assert.AreEqual("", retval, "GetValue(WindowSettings.TitleProperty) should have returned ''");
            Assert.Throws<ArgumentException>(delegate {
                widget.SetValue(WindowSettings.TitleProperty, null);
            }, "SetValue(WindowSettings.TitleProperty, null) should thow an exception");
            retval = widget.GetValue(WindowSettings.TitleProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(WindowSettings.TitleProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(WindowSettings.TitleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(WindowSettings.TitleProperty) should not have a value by default");
        }

    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class SecuritySettingsTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_SecuritySettings ()
        {
            SecuritySettings widget = new SecuritySettings ();
            object retval;

            retval = widget.ReadLocalValue(SecuritySettings.ElevatedPermissionsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(SecuritySettings.ElevatedPermissionsProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_SecuritySettings ()
        {
            SecuritySettings widget = new SecuritySettings ();
            object retval;

            Assert.IsNotNull(SecuritySettings.ElevatedPermissionsProperty.GetMetadata (typeof (SecuritySettings)), "#metadata should not be null for: SecuritySettings.ElevatedPermissionsProperty.SecuritySettings");
            retval = SecuritySettings.ElevatedPermissionsProperty.GetMetadata (typeof (SecuritySettings)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for SecuritySettings.ElevatedPermissionsProperty should be non-null value");
            Assert.IsInstanceOfType<ElevatedPermissions>(retval, "SecuritySettings.ElevatedPermissionsProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(ElevatedPermissions.NotRequired, retval, "SecuritySettings.ElevatedPermissionsProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(SecuritySettings.ElevatedPermissionsProperty);
            Assert.IsNotNull(retval, "GetValue(SecuritySettings.ElevatedPermissionsProperty) should not have returned null");
            Assert.IsInstanceOfType<ElevatedPermissions>(retval, "GetValue(SecuritySettings.ElevatedPermissionsProperty) is not of the correct type");
            Assert.AreEqual(ElevatedPermissions.NotRequired, retval, "GetValue(SecuritySettings.ElevatedPermissionsProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_SecuritySettings ()
        {
            SecuritySettings widget = new SecuritySettings ();

            Assert.AreEqual(ElevatedPermissions.NotRequired, widget.ElevatedPermissions, "ElevatedPermissions does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class VisualStateGroupTest
    {
        [TestMethod]
        public void Test_PropertyGetter_VisualStateGroup ()
        {
            VisualStateGroup widget = new VisualStateGroup ();

            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.CurrentState, "CurrentState should have returned null");
            Assert.IsNotNull(widget.States, "States should not have returned null");
            Assert.IsNotNull(widget.Transitions, "Transitions should not have returned null");
        }

    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class VisualTransitionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_VisualTransition ()
        {
            VisualTransition widget = new VisualTransition ();

            Assert.AreEqual("00:00:00", widget.GeneratedDuration.ToString (), "GeneratedDuration does not match the default value");
            Assert.IsNull(widget.To, "To should have returned null");
            Assert.IsNull(widget.From, "From should have returned null");
            Assert.IsNull(widget.Storyboard, "Storyboard should have returned null");
            Assert.IsNull(widget.GeneratedEasingFunction, "GeneratedEasingFunction should have returned null");
        }

    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class VisualStateManagerTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_VisualStateManager ()
        {
            VisualStateManager widget = new VisualStateManager ();
            object retval;

            retval = widget.ReadLocalValue(VisualStateManager.CustomVisualStateManagerProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(VisualStateManager.CustomVisualStateManagerProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_VisualStateManager ()
        {
            VisualStateManager widget = new VisualStateManager ();
            object retval;

            Assert.IsNotNull(VisualStateManager.CustomVisualStateManagerProperty.GetMetadata (typeof (VisualStateManager)), "#metadata should not be null for: VisualStateManager.CustomVisualStateManagerProperty.VisualStateManager");
            retval = VisualStateManager.CustomVisualStateManagerProperty.GetMetadata (typeof (VisualStateManager)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for VisualStateManager.CustomVisualStateManagerProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(VisualStateManager.CustomVisualStateManagerProperty);
            Assert.IsNull(retval, "GetValue(VisualStateManager.CustomVisualStateManagerProperty) should have returned null");
        }

    }
}
namespace MoonTest.System.Windows.Ink
{
    [TestClass]
    public partial class StrokeCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_StrokeCollection ()
        {
            StrokeCollection widget = new StrokeCollection ();

            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<StrokeCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Ink
{
    [TestClass]
    public partial class DrawingAttributesTest
    {
        [TestMethod]
        public void Test_PropertyGetter_DrawingAttributes ()
        {
            DrawingAttributes widget = new DrawingAttributes ();

            Assert.AreEqual("#FF000000", widget.Color.ToString (), "Color does not match the default value");
            Assert.AreEqual("#00000000", widget.OutlineColor.ToString (), "OutlineColor does not match the default value");
            Assert.AreEqual((double) 3, widget.Width, "Width does not match the default value");
            Assert.AreEqual((double) 3, widget.Height, "Height does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class DoubleCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_DoubleCollection ()
        {
            DoubleCollection widget = new DoubleCollection ();

            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<DoubleCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class PointCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_PointCollection ()
        {
            PointCollection widget = new PointCollection ();

            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<PointCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class RotateTransformTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_RotateTransform ()
        {
            RotateTransform widget = new RotateTransform ();
            object retval;

            retval = widget.ReadLocalValue(RotateTransform.CenterXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RotateTransform.CenterXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RotateTransform.CenterYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RotateTransform.CenterYProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RotateTransform.AngleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RotateTransform.AngleProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_RotateTransform ()
        {
            RotateTransform widget = new RotateTransform ();
            object retval;

            Assert.IsNotNull(RotateTransform.CenterXProperty.GetMetadata (typeof (RotateTransform)), "#metadata should not be null for: RotateTransform.CenterXProperty.RotateTransform");
            retval = RotateTransform.CenterXProperty.GetMetadata (typeof (RotateTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RotateTransform.CenterXProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RotateTransform.CenterXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "RotateTransform.CenterXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RotateTransform.CenterXProperty);
            Assert.IsNotNull(retval, "GetValue(RotateTransform.CenterXProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RotateTransform.CenterXProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(RotateTransform.CenterXProperty) does not match the default value");
            Assert.IsNotNull(RotateTransform.CenterYProperty.GetMetadata (typeof (RotateTransform)), "#metadata should not be null for: RotateTransform.CenterYProperty.RotateTransform");
            retval = RotateTransform.CenterYProperty.GetMetadata (typeof (RotateTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RotateTransform.CenterYProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RotateTransform.CenterYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "RotateTransform.CenterYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RotateTransform.CenterYProperty);
            Assert.IsNotNull(retval, "GetValue(RotateTransform.CenterYProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RotateTransform.CenterYProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(RotateTransform.CenterYProperty) does not match the default value");
            Assert.IsNotNull(RotateTransform.AngleProperty.GetMetadata (typeof (RotateTransform)), "#metadata should not be null for: RotateTransform.AngleProperty.RotateTransform");
            retval = RotateTransform.AngleProperty.GetMetadata (typeof (RotateTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RotateTransform.AngleProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RotateTransform.AngleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "RotateTransform.AngleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RotateTransform.AngleProperty);
            Assert.IsNotNull(retval, "GetValue(RotateTransform.AngleProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RotateTransform.AngleProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(RotateTransform.AngleProperty) does not match the default value");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_PropertyGetter_RotateTransform ()
        {
            RotateTransform widget = new RotateTransform ();

            Assert.AreEqual((double) 0, widget.CenterX, "CenterX does not match the default value");
            Assert.AreEqual((double) 0, widget.CenterY, "CenterY does not match the default value");
            Assert.AreEqual((double) 0, widget.Angle, "Angle does not match the default value");
            Assert.IsNull(widget.Inverse, "Inverse should have returned null");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class ScaleTransformTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ScaleTransform ()
        {
            ScaleTransform widget = new ScaleTransform ();
            object retval;

            retval = widget.ReadLocalValue(ScaleTransform.CenterXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScaleTransform.CenterXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ScaleTransform.CenterYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScaleTransform.CenterYProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ScaleTransform.ScaleXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScaleTransform.ScaleXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ScaleTransform.ScaleYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScaleTransform.ScaleYProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ScaleTransform ()
        {
            ScaleTransform widget = new ScaleTransform ();
            object retval;

            Assert.IsNotNull(ScaleTransform.CenterXProperty.GetMetadata (typeof (ScaleTransform)), "#metadata should not be null for: ScaleTransform.CenterXProperty.ScaleTransform");
            retval = ScaleTransform.CenterXProperty.GetMetadata (typeof (ScaleTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ScaleTransform.CenterXProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ScaleTransform.CenterXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "ScaleTransform.CenterXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ScaleTransform.CenterXProperty);
            Assert.IsNotNull(retval, "GetValue(ScaleTransform.CenterXProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ScaleTransform.CenterXProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(ScaleTransform.CenterXProperty) does not match the default value");
            Assert.IsNotNull(ScaleTransform.CenterYProperty.GetMetadata (typeof (ScaleTransform)), "#metadata should not be null for: ScaleTransform.CenterYProperty.ScaleTransform");
            retval = ScaleTransform.CenterYProperty.GetMetadata (typeof (ScaleTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ScaleTransform.CenterYProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ScaleTransform.CenterYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "ScaleTransform.CenterYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ScaleTransform.CenterYProperty);
            Assert.IsNotNull(retval, "GetValue(ScaleTransform.CenterYProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ScaleTransform.CenterYProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(ScaleTransform.CenterYProperty) does not match the default value");
            Assert.IsNotNull(ScaleTransform.ScaleXProperty.GetMetadata (typeof (ScaleTransform)), "#metadata should not be null for: ScaleTransform.ScaleXProperty.ScaleTransform");
            retval = ScaleTransform.ScaleXProperty.GetMetadata (typeof (ScaleTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ScaleTransform.ScaleXProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ScaleTransform.ScaleXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "ScaleTransform.ScaleXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ScaleTransform.ScaleXProperty);
            Assert.IsNotNull(retval, "GetValue(ScaleTransform.ScaleXProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ScaleTransform.ScaleXProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(ScaleTransform.ScaleXProperty) does not match the default value");
            Assert.IsNotNull(ScaleTransform.ScaleYProperty.GetMetadata (typeof (ScaleTransform)), "#metadata should not be null for: ScaleTransform.ScaleYProperty.ScaleTransform");
            retval = ScaleTransform.ScaleYProperty.GetMetadata (typeof (ScaleTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ScaleTransform.ScaleYProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ScaleTransform.ScaleYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "ScaleTransform.ScaleYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ScaleTransform.ScaleYProperty);
            Assert.IsNotNull(retval, "GetValue(ScaleTransform.ScaleYProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ScaleTransform.ScaleYProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(ScaleTransform.ScaleYProperty) does not match the default value");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_PropertyGetter_ScaleTransform ()
        {
            ScaleTransform widget = new ScaleTransform ();

            Assert.AreEqual((double) 0, widget.CenterX, "CenterX does not match the default value");
            Assert.AreEqual((double) 0, widget.CenterY, "CenterY does not match the default value");
            Assert.AreEqual((double) 1, widget.ScaleX, "ScaleX does not match the default value");
            Assert.AreEqual((double) 1, widget.ScaleY, "ScaleY does not match the default value");
            Assert.IsNull(widget.Inverse, "Inverse should have returned null");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class SkewTransformTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_SkewTransform ()
        {
            SkewTransform widget = new SkewTransform ();
            object retval;

            retval = widget.ReadLocalValue(SkewTransform.CenterXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(SkewTransform.CenterXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(SkewTransform.CenterYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(SkewTransform.CenterYProperty) should not have a value by default");
            retval = widget.ReadLocalValue(SkewTransform.AngleXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(SkewTransform.AngleXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(SkewTransform.AngleYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(SkewTransform.AngleYProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_SkewTransform ()
        {
            SkewTransform widget = new SkewTransform ();
            object retval;

            Assert.IsNotNull(SkewTransform.CenterXProperty.GetMetadata (typeof (SkewTransform)), "#metadata should not be null for: SkewTransform.CenterXProperty.SkewTransform");
            retval = SkewTransform.CenterXProperty.GetMetadata (typeof (SkewTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for SkewTransform.CenterXProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "SkewTransform.CenterXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "SkewTransform.CenterXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(SkewTransform.CenterXProperty);
            Assert.IsNotNull(retval, "GetValue(SkewTransform.CenterXProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(SkewTransform.CenterXProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(SkewTransform.CenterXProperty) does not match the default value");
            Assert.IsNotNull(SkewTransform.CenterYProperty.GetMetadata (typeof (SkewTransform)), "#metadata should not be null for: SkewTransform.CenterYProperty.SkewTransform");
            retval = SkewTransform.CenterYProperty.GetMetadata (typeof (SkewTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for SkewTransform.CenterYProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "SkewTransform.CenterYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "SkewTransform.CenterYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(SkewTransform.CenterYProperty);
            Assert.IsNotNull(retval, "GetValue(SkewTransform.CenterYProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(SkewTransform.CenterYProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(SkewTransform.CenterYProperty) does not match the default value");
            Assert.IsNotNull(SkewTransform.AngleXProperty.GetMetadata (typeof (SkewTransform)), "#metadata should not be null for: SkewTransform.AngleXProperty.SkewTransform");
            retval = SkewTransform.AngleXProperty.GetMetadata (typeof (SkewTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for SkewTransform.AngleXProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "SkewTransform.AngleXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "SkewTransform.AngleXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(SkewTransform.AngleXProperty);
            Assert.IsNotNull(retval, "GetValue(SkewTransform.AngleXProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(SkewTransform.AngleXProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(SkewTransform.AngleXProperty) does not match the default value");
            Assert.IsNotNull(SkewTransform.AngleYProperty.GetMetadata (typeof (SkewTransform)), "#metadata should not be null for: SkewTransform.AngleYProperty.SkewTransform");
            retval = SkewTransform.AngleYProperty.GetMetadata (typeof (SkewTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for SkewTransform.AngleYProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "SkewTransform.AngleYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "SkewTransform.AngleYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(SkewTransform.AngleYProperty);
            Assert.IsNotNull(retval, "GetValue(SkewTransform.AngleYProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(SkewTransform.AngleYProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(SkewTransform.AngleYProperty) does not match the default value");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_PropertyGetter_SkewTransform ()
        {
            SkewTransform widget = new SkewTransform ();

            Assert.AreEqual((double) 0, widget.CenterX, "CenterX does not match the default value");
            Assert.AreEqual((double) 0, widget.CenterY, "CenterY does not match the default value");
            Assert.AreEqual((double) 0, widget.AngleX, "AngleX does not match the default value");
            Assert.AreEqual((double) 0, widget.AngleY, "AngleY does not match the default value");
            Assert.IsNull(widget.Inverse, "Inverse should have returned null");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class TranslateTransformTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_TranslateTransform ()
        {
            TranslateTransform widget = new TranslateTransform ();
            object retval;

            retval = widget.ReadLocalValue(TranslateTransform.XProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TranslateTransform.XProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TranslateTransform.YProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TranslateTransform.YProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_TranslateTransform ()
        {
            TranslateTransform widget = new TranslateTransform ();
            object retval;

            Assert.IsNotNull(TranslateTransform.XProperty.GetMetadata (typeof (TranslateTransform)), "#metadata should not be null for: TranslateTransform.XProperty.TranslateTransform");
            retval = TranslateTransform.XProperty.GetMetadata (typeof (TranslateTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TranslateTransform.XProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "TranslateTransform.XProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "TranslateTransform.XProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TranslateTransform.XProperty);
            Assert.IsNotNull(retval, "GetValue(TranslateTransform.XProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(TranslateTransform.XProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(TranslateTransform.XProperty) does not match the default value");
            Assert.IsNotNull(TranslateTransform.YProperty.GetMetadata (typeof (TranslateTransform)), "#metadata should not be null for: TranslateTransform.YProperty.TranslateTransform");
            retval = TranslateTransform.YProperty.GetMetadata (typeof (TranslateTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TranslateTransform.YProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "TranslateTransform.YProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "TranslateTransform.YProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TranslateTransform.YProperty);
            Assert.IsNotNull(retval, "GetValue(TranslateTransform.YProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(TranslateTransform.YProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(TranslateTransform.YProperty) does not match the default value");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_PropertyGetter_TranslateTransform ()
        {
            TranslateTransform widget = new TranslateTransform ();

            Assert.AreEqual((double) 0, widget.X, "X does not match the default value");
            Assert.AreEqual((double) 0, widget.Y, "Y does not match the default value");
            Assert.IsNull(widget.Inverse, "Inverse should have returned null");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class TransformCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_TransformCollection ()
        {
            TransformCollection widget = new TransformCollection ();

            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<TransformCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class TransformGroupTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_TransformGroup ()
        {
            TransformGroup widget = new TransformGroup ();
            object retval;

            retval = widget.ReadLocalValue(TransformGroup.ChildrenProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TransformGroup.ChildrenProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_TransformGroup ()
        {
            TransformGroup widget = new TransformGroup ();
            object retval;

            Assert.IsNotNull(TransformGroup.ChildrenProperty.GetMetadata (typeof (TransformGroup)), "#metadata should not be null for: TransformGroup.ChildrenProperty.TransformGroup");
            retval = TransformGroup.ChildrenProperty.GetMetadata (typeof (TransformGroup)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for TransformGroup.ChildrenProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(TransformGroup.ChildrenProperty);
            Assert.IsNotNull(retval, "GetValue(TransformGroup.ChildrenProperty) should not have returned null");
            Assert.IsInstanceOfType<TransformCollection>(retval, "GetValue(TransformGroup.ChildrenProperty) is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_PropertyGetter_TransformGroup ()
        {
            TransformGroup widget = new TransformGroup ();

            Assert.IsNotNull(widget.Children, "Children should not have returned null");
            Assert.IsInstanceOfType<TransformCollection>(widget.Children, "Children is not of the correct type");
            Assert.AreEqual("Identity", widget.Value.ToString (), "Value does not match the default value");
            Assert.IsNull(widget.Inverse, "Inverse should have returned null");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class MatrixTransformTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_MatrixTransform ()
        {
            MatrixTransform widget = new MatrixTransform ();
            object retval;

            retval = widget.ReadLocalValue(MatrixTransform.MatrixProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MatrixTransform.MatrixProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_MatrixTransform ()
        {
            MatrixTransform widget = new MatrixTransform ();
            object retval;

            Assert.IsNotNull(MatrixTransform.MatrixProperty.GetMetadata (typeof (MatrixTransform)), "#metadata should not be null for: MatrixTransform.MatrixProperty.MatrixTransform");
            retval = MatrixTransform.MatrixProperty.GetMetadata (typeof (MatrixTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MatrixTransform.MatrixProperty should be non-null value");
            Assert.IsInstanceOfType<Matrix>(retval, "MatrixTransform.MatrixProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Identity", retval.ToString (), "MatrixTransform.MatrixProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MatrixTransform.MatrixProperty);
            Assert.IsNotNull(retval, "GetValue(MatrixTransform.MatrixProperty) should not have returned null");
            Assert.IsInstanceOfType<Matrix>(retval, "GetValue(MatrixTransform.MatrixProperty) is not of the correct type");
            Assert.AreEqual("Identity", retval.ToString (), "GetValue(MatrixTransform.MatrixProperty) does not match the default value");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_PropertyGetter_MatrixTransform ()
        {
            MatrixTransform widget = new MatrixTransform ();

            Assert.AreEqual("Identity", widget.Matrix.ToString (), "Matrix does not match the default value");
            Assert.IsNull(widget.Inverse, "Inverse should have returned null");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class CompositeTransformTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_CompositeTransform ()
        {
            CompositeTransform widget = new CompositeTransform ();
            object retval;

            retval = widget.ReadLocalValue(CompositeTransform.CenterXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(CompositeTransform.CenterXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(CompositeTransform.CenterYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(CompositeTransform.CenterYProperty) should not have a value by default");
            retval = widget.ReadLocalValue(CompositeTransform.ScaleXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(CompositeTransform.ScaleXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(CompositeTransform.ScaleYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(CompositeTransform.ScaleYProperty) should not have a value by default");
            retval = widget.ReadLocalValue(CompositeTransform.SkewXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(CompositeTransform.SkewXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(CompositeTransform.SkewYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(CompositeTransform.SkewYProperty) should not have a value by default");
            retval = widget.ReadLocalValue(CompositeTransform.RotationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(CompositeTransform.RotationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(CompositeTransform.TranslateXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(CompositeTransform.TranslateXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(CompositeTransform.TranslateYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(CompositeTransform.TranslateYProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_CompositeTransform ()
        {
            CompositeTransform widget = new CompositeTransform ();
            object retval;

            Assert.IsNotNull(CompositeTransform.CenterXProperty.GetMetadata (typeof (CompositeTransform)), "#metadata should not be null for: CompositeTransform.CenterXProperty.CompositeTransform");
            retval = CompositeTransform.CenterXProperty.GetMetadata (typeof (CompositeTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for CompositeTransform.CenterXProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "CompositeTransform.CenterXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "CompositeTransform.CenterXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(CompositeTransform.CenterXProperty);
            Assert.IsNotNull(retval, "GetValue(CompositeTransform.CenterXProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(CompositeTransform.CenterXProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(CompositeTransform.CenterXProperty) does not match the default value");
            Assert.IsNotNull(CompositeTransform.CenterYProperty.GetMetadata (typeof (CompositeTransform)), "#metadata should not be null for: CompositeTransform.CenterYProperty.CompositeTransform");
            retval = CompositeTransform.CenterYProperty.GetMetadata (typeof (CompositeTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for CompositeTransform.CenterYProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "CompositeTransform.CenterYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "CompositeTransform.CenterYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(CompositeTransform.CenterYProperty);
            Assert.IsNotNull(retval, "GetValue(CompositeTransform.CenterYProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(CompositeTransform.CenterYProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(CompositeTransform.CenterYProperty) does not match the default value");
            Assert.IsNotNull(CompositeTransform.ScaleXProperty.GetMetadata (typeof (CompositeTransform)), "#metadata should not be null for: CompositeTransform.ScaleXProperty.CompositeTransform");
            retval = CompositeTransform.ScaleXProperty.GetMetadata (typeof (CompositeTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for CompositeTransform.ScaleXProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "CompositeTransform.ScaleXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "CompositeTransform.ScaleXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(CompositeTransform.ScaleXProperty);
            Assert.IsNotNull(retval, "GetValue(CompositeTransform.ScaleXProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(CompositeTransform.ScaleXProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(CompositeTransform.ScaleXProperty) does not match the default value");
            Assert.IsNotNull(CompositeTransform.ScaleYProperty.GetMetadata (typeof (CompositeTransform)), "#metadata should not be null for: CompositeTransform.ScaleYProperty.CompositeTransform");
            retval = CompositeTransform.ScaleYProperty.GetMetadata (typeof (CompositeTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for CompositeTransform.ScaleYProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "CompositeTransform.ScaleYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "CompositeTransform.ScaleYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(CompositeTransform.ScaleYProperty);
            Assert.IsNotNull(retval, "GetValue(CompositeTransform.ScaleYProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(CompositeTransform.ScaleYProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(CompositeTransform.ScaleYProperty) does not match the default value");
            Assert.IsNotNull(CompositeTransform.SkewXProperty.GetMetadata (typeof (CompositeTransform)), "#metadata should not be null for: CompositeTransform.SkewXProperty.CompositeTransform");
            retval = CompositeTransform.SkewXProperty.GetMetadata (typeof (CompositeTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for CompositeTransform.SkewXProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "CompositeTransform.SkewXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "CompositeTransform.SkewXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(CompositeTransform.SkewXProperty);
            Assert.IsNotNull(retval, "GetValue(CompositeTransform.SkewXProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(CompositeTransform.SkewXProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(CompositeTransform.SkewXProperty) does not match the default value");
            Assert.IsNotNull(CompositeTransform.SkewYProperty.GetMetadata (typeof (CompositeTransform)), "#metadata should not be null for: CompositeTransform.SkewYProperty.CompositeTransform");
            retval = CompositeTransform.SkewYProperty.GetMetadata (typeof (CompositeTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for CompositeTransform.SkewYProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "CompositeTransform.SkewYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "CompositeTransform.SkewYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(CompositeTransform.SkewYProperty);
            Assert.IsNotNull(retval, "GetValue(CompositeTransform.SkewYProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(CompositeTransform.SkewYProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(CompositeTransform.SkewYProperty) does not match the default value");
            Assert.IsNotNull(CompositeTransform.RotationProperty.GetMetadata (typeof (CompositeTransform)), "#metadata should not be null for: CompositeTransform.RotationProperty.CompositeTransform");
            retval = CompositeTransform.RotationProperty.GetMetadata (typeof (CompositeTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for CompositeTransform.RotationProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "CompositeTransform.RotationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "CompositeTransform.RotationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(CompositeTransform.RotationProperty);
            Assert.IsNotNull(retval, "GetValue(CompositeTransform.RotationProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(CompositeTransform.RotationProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(CompositeTransform.RotationProperty) does not match the default value");
            Assert.IsNotNull(CompositeTransform.TranslateXProperty.GetMetadata (typeof (CompositeTransform)), "#metadata should not be null for: CompositeTransform.TranslateXProperty.CompositeTransform");
            retval = CompositeTransform.TranslateXProperty.GetMetadata (typeof (CompositeTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for CompositeTransform.TranslateXProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "CompositeTransform.TranslateXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "CompositeTransform.TranslateXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(CompositeTransform.TranslateXProperty);
            Assert.IsNotNull(retval, "GetValue(CompositeTransform.TranslateXProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(CompositeTransform.TranslateXProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(CompositeTransform.TranslateXProperty) does not match the default value");
            Assert.IsNotNull(CompositeTransform.TranslateYProperty.GetMetadata (typeof (CompositeTransform)), "#metadata should not be null for: CompositeTransform.TranslateYProperty.CompositeTransform");
            retval = CompositeTransform.TranslateYProperty.GetMetadata (typeof (CompositeTransform)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for CompositeTransform.TranslateYProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "CompositeTransform.TranslateYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "CompositeTransform.TranslateYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(CompositeTransform.TranslateYProperty);
            Assert.IsNotNull(retval, "GetValue(CompositeTransform.TranslateYProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(CompositeTransform.TranslateYProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(CompositeTransform.TranslateYProperty) does not match the default value");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_PropertyGetter_CompositeTransform ()
        {
            CompositeTransform widget = new CompositeTransform ();

            Assert.AreEqual((double) 0, widget.CenterX, "CenterX does not match the default value");
            Assert.AreEqual((double) 0, widget.CenterY, "CenterY does not match the default value");
            Assert.AreEqual((double) 1, widget.ScaleX, "ScaleX does not match the default value");
            Assert.AreEqual((double) 1, widget.ScaleY, "ScaleY does not match the default value");
            Assert.AreEqual((double) 0, widget.SkewX, "SkewX does not match the default value");
            Assert.AreEqual((double) 0, widget.SkewY, "SkewY does not match the default value");
            Assert.AreEqual((double) 0, widget.Rotation, "Rotation does not match the default value");
            Assert.AreEqual((double) 0, widget.TranslateX, "TranslateX does not match the default value");
            Assert.AreEqual((double) 0, widget.TranslateY, "TranslateY does not match the default value");
            Assert.IsNull(widget.Inverse, "Inverse should have returned null");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class LineSegmentTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_LineSegment ()
        {
            LineSegment widget = new LineSegment ();
            object retval;

            retval = widget.ReadLocalValue(LineSegment.PointProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(LineSegment.PointProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_LineSegment ()
        {
            LineSegment widget = new LineSegment ();
            object retval;

            Assert.IsNotNull(LineSegment.PointProperty.GetMetadata (typeof (LineSegment)), "#metadata should not be null for: LineSegment.PointProperty.LineSegment");
            retval = LineSegment.PointProperty.GetMetadata (typeof (LineSegment)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for LineSegment.PointProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "LineSegment.PointProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "LineSegment.PointProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(LineSegment.PointProperty);
            Assert.IsNotNull(retval, "GetValue(LineSegment.PointProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(LineSegment.PointProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(LineSegment.PointProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_LineSegment ()
        {
            LineSegment widget = new LineSegment ();

            Assert.AreEqual("0,0", widget.Point.ToString (), "Point does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class BezierSegmentTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_BezierSegment ()
        {
            BezierSegment widget = new BezierSegment ();
            object retval;

            retval = widget.ReadLocalValue(BezierSegment.Point1Property);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(BezierSegment.Point1Property) should not have a value by default");
            retval = widget.ReadLocalValue(BezierSegment.Point2Property);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(BezierSegment.Point2Property) should not have a value by default");
            retval = widget.ReadLocalValue(BezierSegment.Point3Property);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(BezierSegment.Point3Property) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_BezierSegment ()
        {
            BezierSegment widget = new BezierSegment ();
            object retval;

            Assert.IsNotNull(BezierSegment.Point1Property.GetMetadata (typeof (BezierSegment)), "#metadata should not be null for: BezierSegment.Point1Property.BezierSegment");
            retval = BezierSegment.Point1Property.GetMetadata (typeof (BezierSegment)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for BezierSegment.Point1Property should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "BezierSegment.Point1Property.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "BezierSegment.Point1Property.GetMetadata() does not match the default value");
            retval = widget.GetValue(BezierSegment.Point1Property);
            Assert.IsNotNull(retval, "GetValue(BezierSegment.Point1Property) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(BezierSegment.Point1Property) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(BezierSegment.Point1Property) does not match the default value");
            Assert.IsNotNull(BezierSegment.Point2Property.GetMetadata (typeof (BezierSegment)), "#metadata should not be null for: BezierSegment.Point2Property.BezierSegment");
            retval = BezierSegment.Point2Property.GetMetadata (typeof (BezierSegment)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for BezierSegment.Point2Property should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "BezierSegment.Point2Property.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "BezierSegment.Point2Property.GetMetadata() does not match the default value");
            retval = widget.GetValue(BezierSegment.Point2Property);
            Assert.IsNotNull(retval, "GetValue(BezierSegment.Point2Property) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(BezierSegment.Point2Property) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(BezierSegment.Point2Property) does not match the default value");
            Assert.IsNotNull(BezierSegment.Point3Property.GetMetadata (typeof (BezierSegment)), "#metadata should not be null for: BezierSegment.Point3Property.BezierSegment");
            retval = BezierSegment.Point3Property.GetMetadata (typeof (BezierSegment)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for BezierSegment.Point3Property should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "BezierSegment.Point3Property.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "BezierSegment.Point3Property.GetMetadata() does not match the default value");
            retval = widget.GetValue(BezierSegment.Point3Property);
            Assert.IsNotNull(retval, "GetValue(BezierSegment.Point3Property) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(BezierSegment.Point3Property) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(BezierSegment.Point3Property) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_BezierSegment ()
        {
            BezierSegment widget = new BezierSegment ();

            Assert.AreEqual("0,0", widget.Point1.ToString (), "Point1 does not match the default value");
            Assert.AreEqual("0,0", widget.Point2.ToString (), "Point2 does not match the default value");
            Assert.AreEqual("0,0", widget.Point3.ToString (), "Point3 does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class QuadraticBezierSegmentTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_QuadraticBezierSegment ()
        {
            QuadraticBezierSegment widget = new QuadraticBezierSegment ();
            object retval;

            retval = widget.ReadLocalValue(QuadraticBezierSegment.Point1Property);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(QuadraticBezierSegment.Point1Property) should not have a value by default");
            retval = widget.ReadLocalValue(QuadraticBezierSegment.Point2Property);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(QuadraticBezierSegment.Point2Property) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_QuadraticBezierSegment ()
        {
            QuadraticBezierSegment widget = new QuadraticBezierSegment ();
            object retval;

            Assert.IsNotNull(QuadraticBezierSegment.Point1Property.GetMetadata (typeof (QuadraticBezierSegment)), "#metadata should not be null for: QuadraticBezierSegment.Point1Property.QuadraticBezierSegment");
            retval = QuadraticBezierSegment.Point1Property.GetMetadata (typeof (QuadraticBezierSegment)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for QuadraticBezierSegment.Point1Property should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "QuadraticBezierSegment.Point1Property.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "QuadraticBezierSegment.Point1Property.GetMetadata() does not match the default value");
            retval = widget.GetValue(QuadraticBezierSegment.Point1Property);
            Assert.IsNotNull(retval, "GetValue(QuadraticBezierSegment.Point1Property) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(QuadraticBezierSegment.Point1Property) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(QuadraticBezierSegment.Point1Property) does not match the default value");
            Assert.IsNotNull(QuadraticBezierSegment.Point2Property.GetMetadata (typeof (QuadraticBezierSegment)), "#metadata should not be null for: QuadraticBezierSegment.Point2Property.QuadraticBezierSegment");
            retval = QuadraticBezierSegment.Point2Property.GetMetadata (typeof (QuadraticBezierSegment)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for QuadraticBezierSegment.Point2Property should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "QuadraticBezierSegment.Point2Property.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "QuadraticBezierSegment.Point2Property.GetMetadata() does not match the default value");
            retval = widget.GetValue(QuadraticBezierSegment.Point2Property);
            Assert.IsNotNull(retval, "GetValue(QuadraticBezierSegment.Point2Property) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(QuadraticBezierSegment.Point2Property) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(QuadraticBezierSegment.Point2Property) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_QuadraticBezierSegment ()
        {
            QuadraticBezierSegment widget = new QuadraticBezierSegment ();

            Assert.AreEqual("0,0", widget.Point1.ToString (), "Point1 does not match the default value");
            Assert.AreEqual("0,0", widget.Point2.ToString (), "Point2 does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class ArcSegmentTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ArcSegment ()
        {
            ArcSegment widget = new ArcSegment ();
            object retval;

            retval = widget.ReadLocalValue(ArcSegment.PointProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ArcSegment.PointProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ArcSegment.SizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ArcSegment.SizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ArcSegment.RotationAngleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ArcSegment.RotationAngleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ArcSegment.IsLargeArcProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ArcSegment.IsLargeArcProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ArcSegment.SweepDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ArcSegment.SweepDirectionProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ArcSegment ()
        {
            ArcSegment widget = new ArcSegment ();
            object retval;

            Assert.IsNotNull(ArcSegment.PointProperty.GetMetadata (typeof (ArcSegment)), "#metadata should not be null for: ArcSegment.PointProperty.ArcSegment");
            retval = ArcSegment.PointProperty.GetMetadata (typeof (ArcSegment)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ArcSegment.PointProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "ArcSegment.PointProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "ArcSegment.PointProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ArcSegment.PointProperty);
            Assert.IsNotNull(retval, "GetValue(ArcSegment.PointProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(ArcSegment.PointProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(ArcSegment.PointProperty) does not match the default value");
            Assert.IsNotNull(ArcSegment.SizeProperty.GetMetadata (typeof (ArcSegment)), "#metadata should not be null for: ArcSegment.SizeProperty.ArcSegment");
            retval = ArcSegment.SizeProperty.GetMetadata (typeof (ArcSegment)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ArcSegment.SizeProperty should be non-null value");
            Assert.IsInstanceOfType<Size>(retval, "ArcSegment.SizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "ArcSegment.SizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ArcSegment.SizeProperty);
            Assert.IsNotNull(retval, "GetValue(ArcSegment.SizeProperty) should not have returned null");
            Assert.IsInstanceOfType<Size>(retval, "GetValue(ArcSegment.SizeProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(ArcSegment.SizeProperty) does not match the default value");
            Assert.IsNotNull(ArcSegment.RotationAngleProperty.GetMetadata (typeof (ArcSegment)), "#metadata should not be null for: ArcSegment.RotationAngleProperty.ArcSegment");
            retval = ArcSegment.RotationAngleProperty.GetMetadata (typeof (ArcSegment)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ArcSegment.RotationAngleProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ArcSegment.RotationAngleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "ArcSegment.RotationAngleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ArcSegment.RotationAngleProperty);
            Assert.IsNotNull(retval, "GetValue(ArcSegment.RotationAngleProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ArcSegment.RotationAngleProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(ArcSegment.RotationAngleProperty) does not match the default value");
            Assert.IsNotNull(ArcSegment.IsLargeArcProperty.GetMetadata (typeof (ArcSegment)), "#metadata should not be null for: ArcSegment.IsLargeArcProperty.ArcSegment");
            retval = ArcSegment.IsLargeArcProperty.GetMetadata (typeof (ArcSegment)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ArcSegment.IsLargeArcProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ArcSegment.IsLargeArcProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ArcSegment.IsLargeArcProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ArcSegment.IsLargeArcProperty);
            Assert.IsNotNull(retval, "GetValue(ArcSegment.IsLargeArcProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ArcSegment.IsLargeArcProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ArcSegment.IsLargeArcProperty) does not match the default value");
            Assert.IsNotNull(ArcSegment.SweepDirectionProperty.GetMetadata (typeof (ArcSegment)), "#metadata should not be null for: ArcSegment.SweepDirectionProperty.ArcSegment");
            retval = ArcSegment.SweepDirectionProperty.GetMetadata (typeof (ArcSegment)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ArcSegment.SweepDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<SweepDirection>(retval, "ArcSegment.SweepDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(SweepDirection.Counterclockwise, retval, "ArcSegment.SweepDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ArcSegment.SweepDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(ArcSegment.SweepDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<SweepDirection>(retval, "GetValue(ArcSegment.SweepDirectionProperty) is not of the correct type");
            Assert.AreEqual(SweepDirection.Counterclockwise, retval, "GetValue(ArcSegment.SweepDirectionProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_ArcSegment ()
        {
            ArcSegment widget = new ArcSegment ();

            Assert.AreEqual("0,0", widget.Point.ToString (), "Point does not match the default value");
            Assert.AreEqual((double) 0, widget.RotationAngle, "RotationAngle does not match the default value");
            Assert.AreEqual(false, widget.IsLargeArc, "IsLargeArc does not match the default value");
            Assert.AreEqual(SweepDirection.Counterclockwise, widget.SweepDirection, "SweepDirection does not match the default value");
            Assert.AreEqual("0,0", widget.Size.ToString (), "Size does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class PolyLineSegmentTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_PolyLineSegment ()
        {
            PolyLineSegment widget = new PolyLineSegment ();
            object retval;

            retval = widget.ReadLocalValue(PolyLineSegment.PointsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PolyLineSegment.PointsProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_PolyLineSegment ()
        {
            PolyLineSegment widget = new PolyLineSegment ();
            object retval;

            Assert.IsNotNull(PolyLineSegment.PointsProperty.GetMetadata (typeof (PolyLineSegment)), "#metadata should not be null for: PolyLineSegment.PointsProperty.PolyLineSegment");
            retval = PolyLineSegment.PointsProperty.GetMetadata (typeof (PolyLineSegment)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for PolyLineSegment.PointsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(PolyLineSegment.PointsProperty);
            Assert.IsNotNull(retval, "GetValue(PolyLineSegment.PointsProperty) should not have returned null");
            Assert.IsInstanceOfType<PointCollection>(retval, "GetValue(PolyLineSegment.PointsProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_PropertyGetter_PolyLineSegment ()
        {
            PolyLineSegment widget = new PolyLineSegment ();

            Assert.IsNotNull(widget.Points, "Points should not have returned null");
            Assert.IsInstanceOfType<PointCollection>(widget.Points, "Points is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class PolyBezierSegmentTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_PolyBezierSegment ()
        {
            PolyBezierSegment widget = new PolyBezierSegment ();
            object retval;

            retval = widget.ReadLocalValue(PolyBezierSegment.PointsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PolyBezierSegment.PointsProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_PolyBezierSegment ()
        {
            PolyBezierSegment widget = new PolyBezierSegment ();
            object retval;

            Assert.IsNotNull(PolyBezierSegment.PointsProperty.GetMetadata (typeof (PolyBezierSegment)), "#metadata should not be null for: PolyBezierSegment.PointsProperty.PolyBezierSegment");
            retval = PolyBezierSegment.PointsProperty.GetMetadata (typeof (PolyBezierSegment)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for PolyBezierSegment.PointsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(PolyBezierSegment.PointsProperty);
            Assert.IsNotNull(retval, "GetValue(PolyBezierSegment.PointsProperty) should not have returned null");
            Assert.IsInstanceOfType<PointCollection>(retval, "GetValue(PolyBezierSegment.PointsProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_PropertyGetter_PolyBezierSegment ()
        {
            PolyBezierSegment widget = new PolyBezierSegment ();

            Assert.IsNotNull(widget.Points, "Points should not have returned null");
            Assert.IsInstanceOfType<PointCollection>(widget.Points, "Points is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class PolyQuadraticBezierSegmentTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_PolyQuadraticBezierSegment ()
        {
            PolyQuadraticBezierSegment widget = new PolyQuadraticBezierSegment ();
            object retval;

            retval = widget.ReadLocalValue(PolyQuadraticBezierSegment.PointsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PolyQuadraticBezierSegment.PointsProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_PolyQuadraticBezierSegment ()
        {
            PolyQuadraticBezierSegment widget = new PolyQuadraticBezierSegment ();
            object retval;

            Assert.IsNotNull(PolyQuadraticBezierSegment.PointsProperty.GetMetadata (typeof (PolyQuadraticBezierSegment)), "#metadata should not be null for: PolyQuadraticBezierSegment.PointsProperty.PolyQuadraticBezierSegment");
            retval = PolyQuadraticBezierSegment.PointsProperty.GetMetadata (typeof (PolyQuadraticBezierSegment)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for PolyQuadraticBezierSegment.PointsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(PolyQuadraticBezierSegment.PointsProperty);
            Assert.IsNotNull(retval, "GetValue(PolyQuadraticBezierSegment.PointsProperty) should not have returned null");
            Assert.IsInstanceOfType<PointCollection>(retval, "GetValue(PolyQuadraticBezierSegment.PointsProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_PropertyGetter_PolyQuadraticBezierSegment ()
        {
            PolyQuadraticBezierSegment widget = new PolyQuadraticBezierSegment ();

            Assert.IsNotNull(widget.Points, "Points should not have returned null");
            Assert.IsInstanceOfType<PointCollection>(widget.Points, "Points is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class PathSegmentCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_PathSegmentCollection ()
        {
            PathSegmentCollection widget = new PathSegmentCollection ();

            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<PathSegmentCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class PathFigureTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_PathFigure ()
        {
            PathFigure widget = new PathFigure ();
            object retval;

            retval = widget.ReadLocalValue(PathFigure.SegmentsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PathFigure.SegmentsProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PathFigure.StartPointProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PathFigure.StartPointProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PathFigure.IsClosedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PathFigure.IsClosedProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PathFigure.IsFilledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PathFigure.IsFilledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_PathFigure ()
        {
            PathFigure widget = new PathFigure ();
            object retval;

            Assert.IsNotNull(PathFigure.SegmentsProperty.GetMetadata (typeof (PathFigure)), "#metadata should not be null for: PathFigure.SegmentsProperty.PathFigure");
            retval = PathFigure.SegmentsProperty.GetMetadata (typeof (PathFigure)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for PathFigure.SegmentsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(PathFigure.SegmentsProperty);
            Assert.IsNotNull(retval, "GetValue(PathFigure.SegmentsProperty) should not have returned null");
            Assert.IsInstanceOfType<PathSegmentCollection>(retval, "GetValue(PathFigure.SegmentsProperty) is not of the correct type");
            Assert.IsNotNull(PathFigure.StartPointProperty.GetMetadata (typeof (PathFigure)), "#metadata should not be null for: PathFigure.StartPointProperty.PathFigure");
            retval = PathFigure.StartPointProperty.GetMetadata (typeof (PathFigure)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PathFigure.StartPointProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "PathFigure.StartPointProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "PathFigure.StartPointProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PathFigure.StartPointProperty);
            Assert.IsNotNull(retval, "GetValue(PathFigure.StartPointProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(PathFigure.StartPointProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(PathFigure.StartPointProperty) does not match the default value");
            Assert.IsNotNull(PathFigure.IsClosedProperty.GetMetadata (typeof (PathFigure)), "#metadata should not be null for: PathFigure.IsClosedProperty.PathFigure");
            retval = PathFigure.IsClosedProperty.GetMetadata (typeof (PathFigure)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PathFigure.IsClosedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "PathFigure.IsClosedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "PathFigure.IsClosedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PathFigure.IsClosedProperty);
            Assert.IsNotNull(retval, "GetValue(PathFigure.IsClosedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(PathFigure.IsClosedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(PathFigure.IsClosedProperty) does not match the default value");
            Assert.IsNotNull(PathFigure.IsFilledProperty.GetMetadata (typeof (PathFigure)), "#metadata should not be null for: PathFigure.IsFilledProperty.PathFigure");
            retval = PathFigure.IsFilledProperty.GetMetadata (typeof (PathFigure)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PathFigure.IsFilledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "PathFigure.IsFilledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "PathFigure.IsFilledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PathFigure.IsFilledProperty);
            Assert.IsNotNull(retval, "GetValue(PathFigure.IsFilledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(PathFigure.IsFilledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(PathFigure.IsFilledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_PathFigure ()
        {
            PathFigure widget = new PathFigure ();

            Assert.IsNotNull(widget.Segments, "Segments should not have returned null");
            Assert.IsInstanceOfType<PathSegmentCollection>(widget.Segments, "Segments is not of the correct type");
            Assert.AreEqual("0,0", widget.StartPoint.ToString (), "StartPoint does not match the default value");
            Assert.AreEqual(false, widget.IsClosed, "IsClosed does not match the default value");
            Assert.AreEqual(true, widget.IsFilled, "IsFilled does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class PathFigureCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_PathFigureCollection ()
        {
            PathFigureCollection widget = new PathFigureCollection ();

            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<PathFigureCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class PathGeometryTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_PathGeometry ()
        {
            PathGeometry widget = new PathGeometry ();
            object retval;

            retval = widget.ReadLocalValue(PathGeometry.FillRuleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PathGeometry.FillRuleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PathGeometry.FiguresProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PathGeometry.FiguresProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Geometry ()
        {
            PathGeometry widget = new PathGeometry ();
            object retval;

            retval = widget.ReadLocalValue(Geometry.TransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Geometry.TransformProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_PathGeometry ()
        {
            PathGeometry widget = new PathGeometry ();
            object retval;

            Assert.IsNotNull(PathGeometry.FillRuleProperty.GetMetadata (typeof (PathGeometry)), "#metadata should not be null for: PathGeometry.FillRuleProperty.PathGeometry");
            retval = PathGeometry.FillRuleProperty.GetMetadata (typeof (PathGeometry)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PathGeometry.FillRuleProperty should be non-null value");
            Assert.IsInstanceOfType<FillRule>(retval, "PathGeometry.FillRuleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FillRule.EvenOdd, retval, "PathGeometry.FillRuleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PathGeometry.FillRuleProperty);
            Assert.IsNotNull(retval, "GetValue(PathGeometry.FillRuleProperty) should not have returned null");
            Assert.IsInstanceOfType<FillRule>(retval, "GetValue(PathGeometry.FillRuleProperty) is not of the correct type");
            Assert.AreEqual(FillRule.EvenOdd, retval, "GetValue(PathGeometry.FillRuleProperty) does not match the default value");
            Assert.IsNotNull(PathGeometry.FiguresProperty.GetMetadata (typeof (PathGeometry)), "#metadata should not be null for: PathGeometry.FiguresProperty.PathGeometry");
            retval = PathGeometry.FiguresProperty.GetMetadata (typeof (PathGeometry)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for PathGeometry.FiguresProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(PathGeometry.FiguresProperty);
            Assert.IsNotNull(retval, "GetValue(PathGeometry.FiguresProperty) should not have returned null");
            Assert.IsInstanceOfType<PathFigureCollection>(retval, "GetValue(PathGeometry.FiguresProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_GetValue_Geometry ()
        {
            PathGeometry widget = new PathGeometry ();
            object retval;

            Assert.IsNotNull(Geometry.TransformProperty.GetMetadata (typeof (PathGeometry)), "#metadata should not be null for: Geometry.TransformProperty.PathGeometry");
            retval = Geometry.TransformProperty.GetMetadata (typeof (PathGeometry)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Geometry.TransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Geometry.TransformProperty);
            Assert.IsNull(retval, "GetValue(Geometry.TransformProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_PathGeometry ()
        {
            PathGeometry widget = new PathGeometry ();

            Assert.AreEqual(FillRule.EvenOdd, widget.FillRule, "FillRule does not match the default value");
            Assert.IsNotNull(widget.Figures, "Figures should not have returned null");
            Assert.IsInstanceOfType<PathFigureCollection>(widget.Figures, "Figures is not of the correct type");
            Assert.IsNull(widget.Transform, "Transform should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Bounds.ToString (), "Bounds does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class EllipseGeometryTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_EllipseGeometry ()
        {
            EllipseGeometry widget = new EllipseGeometry ();
            object retval;

            retval = widget.ReadLocalValue(EllipseGeometry.CenterProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EllipseGeometry.CenterProperty) should not have a value by default");
            retval = widget.ReadLocalValue(EllipseGeometry.RadiusXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EllipseGeometry.RadiusXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(EllipseGeometry.RadiusYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EllipseGeometry.RadiusYProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Geometry ()
        {
            EllipseGeometry widget = new EllipseGeometry ();
            object retval;

            retval = widget.ReadLocalValue(Geometry.TransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Geometry.TransformProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_EllipseGeometry ()
        {
            EllipseGeometry widget = new EllipseGeometry ();
            object retval;

            Assert.IsNotNull(EllipseGeometry.CenterProperty.GetMetadata (typeof (EllipseGeometry)), "#metadata should not be null for: EllipseGeometry.CenterProperty.EllipseGeometry");
            retval = EllipseGeometry.CenterProperty.GetMetadata (typeof (EllipseGeometry)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for EllipseGeometry.CenterProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "EllipseGeometry.CenterProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "EllipseGeometry.CenterProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(EllipseGeometry.CenterProperty);
            Assert.IsNotNull(retval, "GetValue(EllipseGeometry.CenterProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(EllipseGeometry.CenterProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(EllipseGeometry.CenterProperty) does not match the default value");
            Assert.IsNotNull(EllipseGeometry.RadiusXProperty.GetMetadata (typeof (EllipseGeometry)), "#metadata should not be null for: EllipseGeometry.RadiusXProperty.EllipseGeometry");
            retval = EllipseGeometry.RadiusXProperty.GetMetadata (typeof (EllipseGeometry)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for EllipseGeometry.RadiusXProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "EllipseGeometry.RadiusXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "EllipseGeometry.RadiusXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(EllipseGeometry.RadiusXProperty);
            Assert.IsNotNull(retval, "GetValue(EllipseGeometry.RadiusXProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(EllipseGeometry.RadiusXProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(EllipseGeometry.RadiusXProperty) does not match the default value");
            Assert.IsNotNull(EllipseGeometry.RadiusYProperty.GetMetadata (typeof (EllipseGeometry)), "#metadata should not be null for: EllipseGeometry.RadiusYProperty.EllipseGeometry");
            retval = EllipseGeometry.RadiusYProperty.GetMetadata (typeof (EllipseGeometry)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for EllipseGeometry.RadiusYProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "EllipseGeometry.RadiusYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "EllipseGeometry.RadiusYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(EllipseGeometry.RadiusYProperty);
            Assert.IsNotNull(retval, "GetValue(EllipseGeometry.RadiusYProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(EllipseGeometry.RadiusYProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(EllipseGeometry.RadiusYProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Geometry ()
        {
            EllipseGeometry widget = new EllipseGeometry ();
            object retval;

            Assert.IsNotNull(Geometry.TransformProperty.GetMetadata (typeof (EllipseGeometry)), "#metadata should not be null for: Geometry.TransformProperty.EllipseGeometry");
            retval = Geometry.TransformProperty.GetMetadata (typeof (EllipseGeometry)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Geometry.TransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Geometry.TransformProperty);
            Assert.IsNull(retval, "GetValue(Geometry.TransformProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_EllipseGeometry ()
        {
            EllipseGeometry widget = new EllipseGeometry ();

            Assert.AreEqual("0,0", widget.Center.ToString (), "Center does not match the default value");
            Assert.AreEqual((double) 0, widget.RadiusX, "RadiusX does not match the default value");
            Assert.AreEqual((double) 0, widget.RadiusY, "RadiusY does not match the default value");
            Assert.IsNull(widget.Transform, "Transform should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Bounds.ToString (), "Bounds does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class RectangleGeometryTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_RectangleGeometry ()
        {
            RectangleGeometry widget = new RectangleGeometry ();
            object retval;

            retval = widget.ReadLocalValue(RectangleGeometry.RectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RectangleGeometry.RectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RectangleGeometry.RadiusXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RectangleGeometry.RadiusXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RectangleGeometry.RadiusYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RectangleGeometry.RadiusYProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Geometry ()
        {
            RectangleGeometry widget = new RectangleGeometry ();
            object retval;

            retval = widget.ReadLocalValue(Geometry.TransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Geometry.TransformProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_RectangleGeometry ()
        {
            RectangleGeometry widget = new RectangleGeometry ();
            object retval;

            Assert.IsNotNull(RectangleGeometry.RectProperty.GetMetadata (typeof (RectangleGeometry)), "#metadata should not be null for: RectangleGeometry.RectProperty.RectangleGeometry");
            retval = RectangleGeometry.RectProperty.GetMetadata (typeof (RectangleGeometry)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RectangleGeometry.RectProperty should be non-null value");
            Assert.IsInstanceOfType<Rect>(retval, "RectangleGeometry.RectProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "RectangleGeometry.RectProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RectangleGeometry.RectProperty);
            Assert.IsNotNull(retval, "GetValue(RectangleGeometry.RectProperty) should not have returned null");
            Assert.IsInstanceOfType<Rect>(retval, "GetValue(RectangleGeometry.RectProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(RectangleGeometry.RectProperty) does not match the default value");
            Assert.IsNotNull(RectangleGeometry.RadiusXProperty.GetMetadata (typeof (RectangleGeometry)), "#metadata should not be null for: RectangleGeometry.RadiusXProperty.RectangleGeometry");
            retval = RectangleGeometry.RadiusXProperty.GetMetadata (typeof (RectangleGeometry)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RectangleGeometry.RadiusXProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RectangleGeometry.RadiusXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "RectangleGeometry.RadiusXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RectangleGeometry.RadiusXProperty);
            Assert.IsNotNull(retval, "GetValue(RectangleGeometry.RadiusXProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RectangleGeometry.RadiusXProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(RectangleGeometry.RadiusXProperty) does not match the default value");
            Assert.IsNotNull(RectangleGeometry.RadiusYProperty.GetMetadata (typeof (RectangleGeometry)), "#metadata should not be null for: RectangleGeometry.RadiusYProperty.RectangleGeometry");
            retval = RectangleGeometry.RadiusYProperty.GetMetadata (typeof (RectangleGeometry)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RectangleGeometry.RadiusYProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RectangleGeometry.RadiusYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "RectangleGeometry.RadiusYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RectangleGeometry.RadiusYProperty);
            Assert.IsNotNull(retval, "GetValue(RectangleGeometry.RadiusYProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RectangleGeometry.RadiusYProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(RectangleGeometry.RadiusYProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Geometry ()
        {
            RectangleGeometry widget = new RectangleGeometry ();
            object retval;

            Assert.IsNotNull(Geometry.TransformProperty.GetMetadata (typeof (RectangleGeometry)), "#metadata should not be null for: Geometry.TransformProperty.RectangleGeometry");
            retval = Geometry.TransformProperty.GetMetadata (typeof (RectangleGeometry)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Geometry.TransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Geometry.TransformProperty);
            Assert.IsNull(retval, "GetValue(Geometry.TransformProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_RectangleGeometry ()
        {
            RectangleGeometry widget = new RectangleGeometry ();

            Assert.AreEqual("0,0,0,0", widget.Rect.ToString (), "Rect does not match the default value");
            Assert.AreEqual((double) 0, widget.RadiusX, "RadiusX does not match the default value");
            Assert.AreEqual((double) 0, widget.RadiusY, "RadiusY does not match the default value");
            Assert.IsNull(widget.Transform, "Transform should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Bounds.ToString (), "Bounds does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class LineGeometryTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_LineGeometry ()
        {
            LineGeometry widget = new LineGeometry ();
            object retval;

            retval = widget.ReadLocalValue(LineGeometry.StartPointProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(LineGeometry.StartPointProperty) should not have a value by default");
            retval = widget.ReadLocalValue(LineGeometry.EndPointProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(LineGeometry.EndPointProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Geometry ()
        {
            LineGeometry widget = new LineGeometry ();
            object retval;

            retval = widget.ReadLocalValue(Geometry.TransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Geometry.TransformProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_LineGeometry ()
        {
            LineGeometry widget = new LineGeometry ();
            object retval;

            Assert.IsNotNull(LineGeometry.StartPointProperty.GetMetadata (typeof (LineGeometry)), "#metadata should not be null for: LineGeometry.StartPointProperty.LineGeometry");
            retval = LineGeometry.StartPointProperty.GetMetadata (typeof (LineGeometry)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for LineGeometry.StartPointProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "LineGeometry.StartPointProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "LineGeometry.StartPointProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(LineGeometry.StartPointProperty);
            Assert.IsNotNull(retval, "GetValue(LineGeometry.StartPointProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(LineGeometry.StartPointProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(LineGeometry.StartPointProperty) does not match the default value");
            Assert.IsNotNull(LineGeometry.EndPointProperty.GetMetadata (typeof (LineGeometry)), "#metadata should not be null for: LineGeometry.EndPointProperty.LineGeometry");
            retval = LineGeometry.EndPointProperty.GetMetadata (typeof (LineGeometry)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for LineGeometry.EndPointProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "LineGeometry.EndPointProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "LineGeometry.EndPointProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(LineGeometry.EndPointProperty);
            Assert.IsNotNull(retval, "GetValue(LineGeometry.EndPointProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(LineGeometry.EndPointProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(LineGeometry.EndPointProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Geometry ()
        {
            LineGeometry widget = new LineGeometry ();
            object retval;

            Assert.IsNotNull(Geometry.TransformProperty.GetMetadata (typeof (LineGeometry)), "#metadata should not be null for: Geometry.TransformProperty.LineGeometry");
            retval = Geometry.TransformProperty.GetMetadata (typeof (LineGeometry)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Geometry.TransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Geometry.TransformProperty);
            Assert.IsNull(retval, "GetValue(Geometry.TransformProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_LineGeometry ()
        {
            LineGeometry widget = new LineGeometry ();

            Assert.AreEqual("0,0", widget.StartPoint.ToString (), "StartPoint does not match the default value");
            Assert.AreEqual("0,0", widget.EndPoint.ToString (), "EndPoint does not match the default value");
            Assert.IsNull(widget.Transform, "Transform should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Bounds.ToString (), "Bounds does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class GeometryCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_GeometryCollection ()
        {
            GeometryCollection widget = new GeometryCollection ();

            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<GeometryCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class GeometryGroupTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_GeometryGroup ()
        {
            GeometryGroup widget = new GeometryGroup ();
            object retval;

            retval = widget.ReadLocalValue(GeometryGroup.FillRuleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GeometryGroup.FillRuleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(GeometryGroup.ChildrenProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GeometryGroup.ChildrenProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Geometry ()
        {
            GeometryGroup widget = new GeometryGroup ();
            object retval;

            retval = widget.ReadLocalValue(Geometry.TransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Geometry.TransformProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_GeometryGroup ()
        {
            GeometryGroup widget = new GeometryGroup ();
            object retval;

            Assert.IsNotNull(GeometryGroup.FillRuleProperty.GetMetadata (typeof (GeometryGroup)), "#metadata should not be null for: GeometryGroup.FillRuleProperty.GeometryGroup");
            retval = GeometryGroup.FillRuleProperty.GetMetadata (typeof (GeometryGroup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for GeometryGroup.FillRuleProperty should be non-null value");
            Assert.IsInstanceOfType<FillRule>(retval, "GeometryGroup.FillRuleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FillRule.EvenOdd, retval, "GeometryGroup.FillRuleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(GeometryGroup.FillRuleProperty);
            Assert.IsNotNull(retval, "GetValue(GeometryGroup.FillRuleProperty) should not have returned null");
            Assert.IsInstanceOfType<FillRule>(retval, "GetValue(GeometryGroup.FillRuleProperty) is not of the correct type");
            Assert.AreEqual(FillRule.EvenOdd, retval, "GetValue(GeometryGroup.FillRuleProperty) does not match the default value");
            Assert.IsNotNull(GeometryGroup.ChildrenProperty.GetMetadata (typeof (GeometryGroup)), "#metadata should not be null for: GeometryGroup.ChildrenProperty.GeometryGroup");
            retval = GeometryGroup.ChildrenProperty.GetMetadata (typeof (GeometryGroup)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for GeometryGroup.ChildrenProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(GeometryGroup.ChildrenProperty);
            Assert.IsNotNull(retval, "GetValue(GeometryGroup.ChildrenProperty) should not have returned null");
            Assert.IsInstanceOfType<GeometryCollection>(retval, "GetValue(GeometryGroup.ChildrenProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_GetValue_Geometry ()
        {
            GeometryGroup widget = new GeometryGroup ();
            object retval;

            Assert.IsNotNull(Geometry.TransformProperty.GetMetadata (typeof (GeometryGroup)), "#metadata should not be null for: Geometry.TransformProperty.GeometryGroup");
            retval = Geometry.TransformProperty.GetMetadata (typeof (GeometryGroup)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Geometry.TransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Geometry.TransformProperty);
            Assert.IsNull(retval, "GetValue(Geometry.TransformProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_GeometryGroup ()
        {
            GeometryGroup widget = new GeometryGroup ();

            Assert.AreEqual(FillRule.EvenOdd, widget.FillRule, "FillRule does not match the default value");
            Assert.IsNotNull(widget.Children, "Children should not have returned null");
            Assert.IsInstanceOfType<GeometryCollection>(widget.Children, "Children is not of the correct type");
            Assert.IsNull(widget.Transform, "Transform should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Bounds.ToString (), "Bounds does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class SolidColorBrushTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_SolidColorBrush ()
        {
            SolidColorBrush widget = new SolidColorBrush ();
            object retval;

            retval = widget.ReadLocalValue(SolidColorBrush.ColorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(SolidColorBrush.ColorProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Brush ()
        {
            SolidColorBrush widget = new SolidColorBrush ();
            object retval;

            retval = widget.ReadLocalValue(Brush.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Brush.TransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.TransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Brush.RelativeTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.RelativeTransformProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_SolidColorBrush ()
        {
            SolidColorBrush widget = new SolidColorBrush ();
            object retval;

            Assert.IsNotNull(SolidColorBrush.ColorProperty.GetMetadata (typeof (SolidColorBrush)), "#metadata should not be null for: SolidColorBrush.ColorProperty.SolidColorBrush");
            retval = SolidColorBrush.ColorProperty.GetMetadata (typeof (SolidColorBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for SolidColorBrush.ColorProperty should be non-null value");
            Assert.IsInstanceOfType<Color>(retval, "SolidColorBrush.ColorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("#00000000", retval.ToString (), "SolidColorBrush.ColorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(SolidColorBrush.ColorProperty);
            Assert.IsNotNull(retval, "GetValue(SolidColorBrush.ColorProperty) should not have returned null");
            Assert.IsInstanceOfType<Color>(retval, "GetValue(SolidColorBrush.ColorProperty) is not of the correct type");
            Assert.AreEqual("#00000000", retval.ToString (), "GetValue(SolidColorBrush.ColorProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Brush ()
        {
            SolidColorBrush widget = new SolidColorBrush ();
            object retval;

            Assert.IsNotNull(Brush.OpacityProperty.GetMetadata (typeof (SolidColorBrush)), "#metadata should not be null for: Brush.OpacityProperty.SolidColorBrush");
            retval = Brush.OpacityProperty.GetMetadata (typeof (SolidColorBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Brush.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Brush.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Brush.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Brush.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Brush.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Brush.OpacityProperty) does not match the default value");
            Assert.IsNotNull(Brush.TransformProperty.GetMetadata (typeof (SolidColorBrush)), "#metadata should not be null for: Brush.TransformProperty.SolidColorBrush");
            retval = Brush.TransformProperty.GetMetadata (typeof (SolidColorBrush)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Brush.TransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Brush.TransformProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.TransformProperty) should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(retval, "GetValue(Brush.TransformProperty) is not of the correct type");
            Assert.IsNotNull(Brush.RelativeTransformProperty.GetMetadata (typeof (SolidColorBrush)), "#metadata should not be null for: Brush.RelativeTransformProperty.SolidColorBrush");
            retval = Brush.RelativeTransformProperty.GetMetadata (typeof (SolidColorBrush)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Brush.RelativeTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Brush.RelativeTransformProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.RelativeTransformProperty) should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(retval, "GetValue(Brush.RelativeTransformProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_PropertyGetter_SolidColorBrush ()
        {
            SolidColorBrush widget = new SolidColorBrush ();

            Assert.AreEqual("#00000000", widget.Color.ToString (), "Color does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNotNull(widget.Transform, "Transform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.Transform, "Transform is not of the correct type");
            Assert.IsNotNull(widget.RelativeTransform, "RelativeTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RelativeTransform, "RelativeTransform is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class GradientStopTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_GradientStop ()
        {
            GradientStop widget = new GradientStop ();
            object retval;

            retval = widget.ReadLocalValue(GradientStop.ColorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientStop.ColorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(GradientStop.OffsetProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientStop.OffsetProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_GradientStop ()
        {
            GradientStop widget = new GradientStop ();
            object retval;

            Assert.IsNotNull(GradientStop.ColorProperty.GetMetadata (typeof (GradientStop)), "#metadata should not be null for: GradientStop.ColorProperty.GradientStop");
            retval = GradientStop.ColorProperty.GetMetadata (typeof (GradientStop)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for GradientStop.ColorProperty should be non-null value");
            Assert.IsInstanceOfType<Color>(retval, "GradientStop.ColorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("#00000000", retval.ToString (), "GradientStop.ColorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(GradientStop.ColorProperty);
            Assert.IsNotNull(retval, "GetValue(GradientStop.ColorProperty) should not have returned null");
            Assert.IsInstanceOfType<Color>(retval, "GetValue(GradientStop.ColorProperty) is not of the correct type");
            Assert.AreEqual("#00000000", retval.ToString (), "GetValue(GradientStop.ColorProperty) does not match the default value");
            Assert.IsNotNull(GradientStop.OffsetProperty.GetMetadata (typeof (GradientStop)), "#metadata should not be null for: GradientStop.OffsetProperty.GradientStop");
            retval = GradientStop.OffsetProperty.GetMetadata (typeof (GradientStop)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for GradientStop.OffsetProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "GradientStop.OffsetProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GradientStop.OffsetProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(GradientStop.OffsetProperty);
            Assert.IsNotNull(retval, "GetValue(GradientStop.OffsetProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(GradientStop.OffsetProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(GradientStop.OffsetProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_GradientStop ()
        {
            GradientStop widget = new GradientStop ();

            Assert.AreEqual("#00000000", widget.Color.ToString (), "Color does not match the default value");
            Assert.AreEqual((double) 0, widget.Offset, "Offset does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class GradientStopCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_GradientStopCollection ()
        {
            GradientStopCollection widget = new GradientStopCollection ();

            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<GradientStopCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class LinearGradientBrushTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_LinearGradientBrush ()
        {
            LinearGradientBrush widget = new LinearGradientBrush ();
            object retval;

            retval = widget.ReadLocalValue(LinearGradientBrush.StartPointProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(LinearGradientBrush.StartPointProperty) should not have a value by default");
            retval = widget.ReadLocalValue(LinearGradientBrush.EndPointProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(LinearGradientBrush.EndPointProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_GradientBrush ()
        {
            LinearGradientBrush widget = new LinearGradientBrush ();
            object retval;

            retval = widget.ReadLocalValue(GradientBrush.SpreadMethodProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientBrush.SpreadMethodProperty) should not have a value by default");
            retval = widget.ReadLocalValue(GradientBrush.MappingModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientBrush.MappingModeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(GradientBrush.ColorInterpolationModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientBrush.ColorInterpolationModeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(GradientBrush.GradientStopsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientBrush.GradientStopsProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Brush ()
        {
            LinearGradientBrush widget = new LinearGradientBrush ();
            object retval;

            retval = widget.ReadLocalValue(Brush.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Brush.TransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.TransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Brush.RelativeTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.RelativeTransformProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_LinearGradientBrush ()
        {
            LinearGradientBrush widget = new LinearGradientBrush ();
            object retval;

            Assert.IsNotNull(LinearGradientBrush.StartPointProperty.GetMetadata (typeof (LinearGradientBrush)), "#metadata should not be null for: LinearGradientBrush.StartPointProperty.LinearGradientBrush");
            retval = LinearGradientBrush.StartPointProperty.GetMetadata (typeof (LinearGradientBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for LinearGradientBrush.StartPointProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "LinearGradientBrush.StartPointProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "LinearGradientBrush.StartPointProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(LinearGradientBrush.StartPointProperty);
            Assert.IsNotNull(retval, "GetValue(LinearGradientBrush.StartPointProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(LinearGradientBrush.StartPointProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(LinearGradientBrush.StartPointProperty) does not match the default value");
            Assert.IsNotNull(LinearGradientBrush.EndPointProperty.GetMetadata (typeof (LinearGradientBrush)), "#metadata should not be null for: LinearGradientBrush.EndPointProperty.LinearGradientBrush");
            retval = LinearGradientBrush.EndPointProperty.GetMetadata (typeof (LinearGradientBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for LinearGradientBrush.EndPointProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "LinearGradientBrush.EndPointProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("1,1", retval.ToString (), "LinearGradientBrush.EndPointProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(LinearGradientBrush.EndPointProperty);
            Assert.IsNotNull(retval, "GetValue(LinearGradientBrush.EndPointProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(LinearGradientBrush.EndPointProperty) is not of the correct type");
            Assert.AreEqual("1,1", retval.ToString (), "GetValue(LinearGradientBrush.EndPointProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_GradientBrush ()
        {
            LinearGradientBrush widget = new LinearGradientBrush ();
            object retval;

            Assert.IsNotNull(GradientBrush.SpreadMethodProperty.GetMetadata (typeof (LinearGradientBrush)), "#metadata should not be null for: GradientBrush.SpreadMethodProperty.LinearGradientBrush");
            retval = GradientBrush.SpreadMethodProperty.GetMetadata (typeof (LinearGradientBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for GradientBrush.SpreadMethodProperty should be non-null value");
            Assert.IsInstanceOfType<GradientSpreadMethod>(retval, "GradientBrush.SpreadMethodProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(GradientSpreadMethod.Pad, retval, "GradientBrush.SpreadMethodProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(GradientBrush.SpreadMethodProperty);
            Assert.IsNotNull(retval, "GetValue(GradientBrush.SpreadMethodProperty) should not have returned null");
            Assert.IsInstanceOfType<GradientSpreadMethod>(retval, "GetValue(GradientBrush.SpreadMethodProperty) is not of the correct type");
            Assert.AreEqual(GradientSpreadMethod.Pad, retval, "GetValue(GradientBrush.SpreadMethodProperty) does not match the default value");
            Assert.IsNotNull(GradientBrush.MappingModeProperty.GetMetadata (typeof (LinearGradientBrush)), "#metadata should not be null for: GradientBrush.MappingModeProperty.LinearGradientBrush");
            retval = GradientBrush.MappingModeProperty.GetMetadata (typeof (LinearGradientBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for GradientBrush.MappingModeProperty should be non-null value");
            Assert.IsInstanceOfType<BrushMappingMode>(retval, "GradientBrush.MappingModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(BrushMappingMode.RelativeToBoundingBox, retval, "GradientBrush.MappingModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(GradientBrush.MappingModeProperty);
            Assert.IsNotNull(retval, "GetValue(GradientBrush.MappingModeProperty) should not have returned null");
            Assert.IsInstanceOfType<BrushMappingMode>(retval, "GetValue(GradientBrush.MappingModeProperty) is not of the correct type");
            Assert.AreEqual(BrushMappingMode.RelativeToBoundingBox, retval, "GetValue(GradientBrush.MappingModeProperty) does not match the default value");
            Assert.IsNotNull(GradientBrush.ColorInterpolationModeProperty.GetMetadata (typeof (LinearGradientBrush)), "#metadata should not be null for: GradientBrush.ColorInterpolationModeProperty.LinearGradientBrush");
            retval = GradientBrush.ColorInterpolationModeProperty.GetMetadata (typeof (LinearGradientBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for GradientBrush.ColorInterpolationModeProperty should be non-null value");
            Assert.IsInstanceOfType<ColorInterpolationMode>(retval, "GradientBrush.ColorInterpolationModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(ColorInterpolationMode.SRgbLinearInterpolation, retval, "GradientBrush.ColorInterpolationModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(GradientBrush.ColorInterpolationModeProperty);
            Assert.IsNotNull(retval, "GetValue(GradientBrush.ColorInterpolationModeProperty) should not have returned null");
            Assert.IsInstanceOfType<ColorInterpolationMode>(retval, "GetValue(GradientBrush.ColorInterpolationModeProperty) is not of the correct type");
            Assert.AreEqual(ColorInterpolationMode.SRgbLinearInterpolation, retval, "GetValue(GradientBrush.ColorInterpolationModeProperty) does not match the default value");
            Assert.IsNotNull(GradientBrush.GradientStopsProperty.GetMetadata (typeof (LinearGradientBrush)), "#metadata should not be null for: GradientBrush.GradientStopsProperty.LinearGradientBrush");
            retval = GradientBrush.GradientStopsProperty.GetMetadata (typeof (LinearGradientBrush)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for GradientBrush.GradientStopsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(GradientBrush.GradientStopsProperty);
            Assert.IsNotNull(retval, "GetValue(GradientBrush.GradientStopsProperty) should not have returned null");
            Assert.IsInstanceOfType<GradientStopCollection>(retval, "GetValue(GradientBrush.GradientStopsProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_GetValue_Brush ()
        {
            LinearGradientBrush widget = new LinearGradientBrush ();
            object retval;

            Assert.IsNotNull(Brush.OpacityProperty.GetMetadata (typeof (LinearGradientBrush)), "#metadata should not be null for: Brush.OpacityProperty.LinearGradientBrush");
            retval = Brush.OpacityProperty.GetMetadata (typeof (LinearGradientBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Brush.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Brush.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Brush.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Brush.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Brush.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Brush.OpacityProperty) does not match the default value");
            Assert.IsNotNull(Brush.TransformProperty.GetMetadata (typeof (LinearGradientBrush)), "#metadata should not be null for: Brush.TransformProperty.LinearGradientBrush");
            retval = Brush.TransformProperty.GetMetadata (typeof (LinearGradientBrush)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Brush.TransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Brush.TransformProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.TransformProperty) should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(retval, "GetValue(Brush.TransformProperty) is not of the correct type");
            Assert.IsNotNull(Brush.RelativeTransformProperty.GetMetadata (typeof (LinearGradientBrush)), "#metadata should not be null for: Brush.RelativeTransformProperty.LinearGradientBrush");
            retval = Brush.RelativeTransformProperty.GetMetadata (typeof (LinearGradientBrush)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Brush.RelativeTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Brush.RelativeTransformProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.RelativeTransformProperty) should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(retval, "GetValue(Brush.RelativeTransformProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_PropertyGetter_LinearGradientBrush ()
        {
            LinearGradientBrush widget = new LinearGradientBrush ();

            Assert.AreEqual("0,0", widget.StartPoint.ToString (), "StartPoint does not match the default value");
            Assert.AreEqual("1,1", widget.EndPoint.ToString (), "EndPoint does not match the default value");
            Assert.AreEqual(GradientSpreadMethod.Pad, widget.SpreadMethod, "SpreadMethod does not match the default value");
            Assert.AreEqual(BrushMappingMode.RelativeToBoundingBox, widget.MappingMode, "MappingMode does not match the default value");
            Assert.AreEqual(ColorInterpolationMode.SRgbLinearInterpolation, widget.ColorInterpolationMode, "ColorInterpolationMode does not match the default value");
            Assert.IsNotNull(widget.GradientStops, "GradientStops should not have returned null");
            Assert.IsInstanceOfType<GradientStopCollection>(widget.GradientStops, "GradientStops is not of the correct type");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNotNull(widget.Transform, "Transform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.Transform, "Transform is not of the correct type");
            Assert.IsNotNull(widget.RelativeTransform, "RelativeTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RelativeTransform, "RelativeTransform is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class RadialGradientBrushTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_RadialGradientBrush ()
        {
            RadialGradientBrush widget = new RadialGradientBrush ();
            object retval;

            retval = widget.ReadLocalValue(RadialGradientBrush.CenterProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RadialGradientBrush.CenterProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RadialGradientBrush.GradientOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RadialGradientBrush.GradientOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RadialGradientBrush.RadiusXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RadialGradientBrush.RadiusXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RadialGradientBrush.RadiusYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RadialGradientBrush.RadiusYProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_GradientBrush ()
        {
            RadialGradientBrush widget = new RadialGradientBrush ();
            object retval;

            retval = widget.ReadLocalValue(GradientBrush.SpreadMethodProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientBrush.SpreadMethodProperty) should not have a value by default");
            retval = widget.ReadLocalValue(GradientBrush.MappingModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientBrush.MappingModeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(GradientBrush.ColorInterpolationModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientBrush.ColorInterpolationModeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(GradientBrush.GradientStopsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(GradientBrush.GradientStopsProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Brush ()
        {
            RadialGradientBrush widget = new RadialGradientBrush ();
            object retval;

            retval = widget.ReadLocalValue(Brush.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Brush.TransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.TransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Brush.RelativeTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.RelativeTransformProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_RadialGradientBrush ()
        {
            RadialGradientBrush widget = new RadialGradientBrush ();
            object retval;

            Assert.IsNotNull(RadialGradientBrush.CenterProperty.GetMetadata (typeof (RadialGradientBrush)), "#metadata should not be null for: RadialGradientBrush.CenterProperty.RadialGradientBrush");
            retval = RadialGradientBrush.CenterProperty.GetMetadata (typeof (RadialGradientBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RadialGradientBrush.CenterProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "RadialGradientBrush.CenterProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0.5,0.5", retval.ToString (), "RadialGradientBrush.CenterProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RadialGradientBrush.CenterProperty);
            Assert.IsNotNull(retval, "GetValue(RadialGradientBrush.CenterProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(RadialGradientBrush.CenterProperty) is not of the correct type");
            Assert.AreEqual("0.5,0.5", retval.ToString (), "GetValue(RadialGradientBrush.CenterProperty) does not match the default value");
            Assert.IsNotNull(RadialGradientBrush.GradientOriginProperty.GetMetadata (typeof (RadialGradientBrush)), "#metadata should not be null for: RadialGradientBrush.GradientOriginProperty.RadialGradientBrush");
            retval = RadialGradientBrush.GradientOriginProperty.GetMetadata (typeof (RadialGradientBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RadialGradientBrush.GradientOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "RadialGradientBrush.GradientOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0.5,0.5", retval.ToString (), "RadialGradientBrush.GradientOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RadialGradientBrush.GradientOriginProperty);
            Assert.IsNotNull(retval, "GetValue(RadialGradientBrush.GradientOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(RadialGradientBrush.GradientOriginProperty) is not of the correct type");
            Assert.AreEqual("0.5,0.5", retval.ToString (), "GetValue(RadialGradientBrush.GradientOriginProperty) does not match the default value");
            Assert.IsNotNull(RadialGradientBrush.RadiusXProperty.GetMetadata (typeof (RadialGradientBrush)), "#metadata should not be null for: RadialGradientBrush.RadiusXProperty.RadialGradientBrush");
            retval = RadialGradientBrush.RadiusXProperty.GetMetadata (typeof (RadialGradientBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RadialGradientBrush.RadiusXProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RadialGradientBrush.RadiusXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0.5, retval, "RadialGradientBrush.RadiusXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RadialGradientBrush.RadiusXProperty);
            Assert.IsNotNull(retval, "GetValue(RadialGradientBrush.RadiusXProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RadialGradientBrush.RadiusXProperty) is not of the correct type");
            Assert.AreEqual((double) 0.5, retval, "GetValue(RadialGradientBrush.RadiusXProperty) does not match the default value");
            Assert.IsNotNull(RadialGradientBrush.RadiusYProperty.GetMetadata (typeof (RadialGradientBrush)), "#metadata should not be null for: RadialGradientBrush.RadiusYProperty.RadialGradientBrush");
            retval = RadialGradientBrush.RadiusYProperty.GetMetadata (typeof (RadialGradientBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RadialGradientBrush.RadiusYProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RadialGradientBrush.RadiusYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0.5, retval, "RadialGradientBrush.RadiusYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RadialGradientBrush.RadiusYProperty);
            Assert.IsNotNull(retval, "GetValue(RadialGradientBrush.RadiusYProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RadialGradientBrush.RadiusYProperty) is not of the correct type");
            Assert.AreEqual((double) 0.5, retval, "GetValue(RadialGradientBrush.RadiusYProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_GradientBrush ()
        {
            RadialGradientBrush widget = new RadialGradientBrush ();
            object retval;

            Assert.IsNotNull(GradientBrush.SpreadMethodProperty.GetMetadata (typeof (RadialGradientBrush)), "#metadata should not be null for: GradientBrush.SpreadMethodProperty.RadialGradientBrush");
            retval = GradientBrush.SpreadMethodProperty.GetMetadata (typeof (RadialGradientBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for GradientBrush.SpreadMethodProperty should be non-null value");
            Assert.IsInstanceOfType<GradientSpreadMethod>(retval, "GradientBrush.SpreadMethodProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(GradientSpreadMethod.Pad, retval, "GradientBrush.SpreadMethodProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(GradientBrush.SpreadMethodProperty);
            Assert.IsNotNull(retval, "GetValue(GradientBrush.SpreadMethodProperty) should not have returned null");
            Assert.IsInstanceOfType<GradientSpreadMethod>(retval, "GetValue(GradientBrush.SpreadMethodProperty) is not of the correct type");
            Assert.AreEqual(GradientSpreadMethod.Pad, retval, "GetValue(GradientBrush.SpreadMethodProperty) does not match the default value");
            Assert.IsNotNull(GradientBrush.MappingModeProperty.GetMetadata (typeof (RadialGradientBrush)), "#metadata should not be null for: GradientBrush.MappingModeProperty.RadialGradientBrush");
            retval = GradientBrush.MappingModeProperty.GetMetadata (typeof (RadialGradientBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for GradientBrush.MappingModeProperty should be non-null value");
            Assert.IsInstanceOfType<BrushMappingMode>(retval, "GradientBrush.MappingModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(BrushMappingMode.RelativeToBoundingBox, retval, "GradientBrush.MappingModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(GradientBrush.MappingModeProperty);
            Assert.IsNotNull(retval, "GetValue(GradientBrush.MappingModeProperty) should not have returned null");
            Assert.IsInstanceOfType<BrushMappingMode>(retval, "GetValue(GradientBrush.MappingModeProperty) is not of the correct type");
            Assert.AreEqual(BrushMappingMode.RelativeToBoundingBox, retval, "GetValue(GradientBrush.MappingModeProperty) does not match the default value");
            Assert.IsNotNull(GradientBrush.ColorInterpolationModeProperty.GetMetadata (typeof (RadialGradientBrush)), "#metadata should not be null for: GradientBrush.ColorInterpolationModeProperty.RadialGradientBrush");
            retval = GradientBrush.ColorInterpolationModeProperty.GetMetadata (typeof (RadialGradientBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for GradientBrush.ColorInterpolationModeProperty should be non-null value");
            Assert.IsInstanceOfType<ColorInterpolationMode>(retval, "GradientBrush.ColorInterpolationModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(ColorInterpolationMode.SRgbLinearInterpolation, retval, "GradientBrush.ColorInterpolationModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(GradientBrush.ColorInterpolationModeProperty);
            Assert.IsNotNull(retval, "GetValue(GradientBrush.ColorInterpolationModeProperty) should not have returned null");
            Assert.IsInstanceOfType<ColorInterpolationMode>(retval, "GetValue(GradientBrush.ColorInterpolationModeProperty) is not of the correct type");
            Assert.AreEqual(ColorInterpolationMode.SRgbLinearInterpolation, retval, "GetValue(GradientBrush.ColorInterpolationModeProperty) does not match the default value");
            Assert.IsNotNull(GradientBrush.GradientStopsProperty.GetMetadata (typeof (RadialGradientBrush)), "#metadata should not be null for: GradientBrush.GradientStopsProperty.RadialGradientBrush");
            retval = GradientBrush.GradientStopsProperty.GetMetadata (typeof (RadialGradientBrush)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for GradientBrush.GradientStopsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(GradientBrush.GradientStopsProperty);
            Assert.IsNotNull(retval, "GetValue(GradientBrush.GradientStopsProperty) should not have returned null");
            Assert.IsInstanceOfType<GradientStopCollection>(retval, "GetValue(GradientBrush.GradientStopsProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_GetValue_Brush ()
        {
            RadialGradientBrush widget = new RadialGradientBrush ();
            object retval;

            Assert.IsNotNull(Brush.OpacityProperty.GetMetadata (typeof (RadialGradientBrush)), "#metadata should not be null for: Brush.OpacityProperty.RadialGradientBrush");
            retval = Brush.OpacityProperty.GetMetadata (typeof (RadialGradientBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Brush.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Brush.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Brush.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Brush.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Brush.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Brush.OpacityProperty) does not match the default value");
            Assert.IsNotNull(Brush.TransformProperty.GetMetadata (typeof (RadialGradientBrush)), "#metadata should not be null for: Brush.TransformProperty.RadialGradientBrush");
            retval = Brush.TransformProperty.GetMetadata (typeof (RadialGradientBrush)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Brush.TransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Brush.TransformProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.TransformProperty) should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(retval, "GetValue(Brush.TransformProperty) is not of the correct type");
            Assert.IsNotNull(Brush.RelativeTransformProperty.GetMetadata (typeof (RadialGradientBrush)), "#metadata should not be null for: Brush.RelativeTransformProperty.RadialGradientBrush");
            retval = Brush.RelativeTransformProperty.GetMetadata (typeof (RadialGradientBrush)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Brush.RelativeTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Brush.RelativeTransformProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.RelativeTransformProperty) should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(retval, "GetValue(Brush.RelativeTransformProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_PropertyGetter_RadialGradientBrush ()
        {
            RadialGradientBrush widget = new RadialGradientBrush ();

            Assert.AreEqual("0.5,0.5", widget.Center.ToString (), "Center does not match the default value");
            Assert.AreEqual("0.5,0.5", widget.GradientOrigin.ToString (), "GradientOrigin does not match the default value");
            Assert.AreEqual((double) 0.5, widget.RadiusX, "RadiusX does not match the default value");
            Assert.AreEqual((double) 0.5, widget.RadiusY, "RadiusY does not match the default value");
            Assert.AreEqual(GradientSpreadMethod.Pad, widget.SpreadMethod, "SpreadMethod does not match the default value");
            Assert.AreEqual(BrushMappingMode.RelativeToBoundingBox, widget.MappingMode, "MappingMode does not match the default value");
            Assert.AreEqual(ColorInterpolationMode.SRgbLinearInterpolation, widget.ColorInterpolationMode, "ColorInterpolationMode does not match the default value");
            Assert.IsNotNull(widget.GradientStops, "GradientStops should not have returned null");
            Assert.IsInstanceOfType<GradientStopCollection>(widget.GradientStops, "GradientStops is not of the correct type");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNotNull(widget.Transform, "Transform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.Transform, "Transform is not of the correct type");
            Assert.IsNotNull(widget.RelativeTransform, "RelativeTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RelativeTransform, "RelativeTransform is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class ImageBrushTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ImageBrush ()
        {
            ImageBrush widget = new ImageBrush ();
            object retval;

            retval = widget.ReadLocalValue(ImageBrush.ImageSourceProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ImageBrush.ImageSourceProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_TileBrush ()
        {
            ImageBrush widget = new ImageBrush ();
            object retval;

            retval = widget.ReadLocalValue(TileBrush.AlignmentXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TileBrush.AlignmentXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TileBrush.AlignmentYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TileBrush.AlignmentYProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TileBrush.StretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TileBrush.StretchProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Brush ()
        {
            ImageBrush widget = new ImageBrush ();
            object retval;

            retval = widget.ReadLocalValue(Brush.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Brush.TransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.TransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Brush.RelativeTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.RelativeTransformProperty) should not have a value by default");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_GetValue_ImageBrush ()
        {
            ImageBrush widget = new ImageBrush ();
            object retval;

            Assert.IsNotNull(ImageBrush.ImageSourceProperty.GetMetadata (typeof (ImageBrush)), "#metadata should not be null for: ImageBrush.ImageSourceProperty.ImageBrush");
            retval = ImageBrush.ImageSourceProperty.GetMetadata (typeof (ImageBrush)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ImageBrush.ImageSourceProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ImageBrush.ImageSourceProperty);
            Assert.IsNull(retval, "GetValue(ImageBrush.ImageSourceProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_TileBrush ()
        {
            ImageBrush widget = new ImageBrush ();
            object retval;

            Assert.IsNotNull(TileBrush.AlignmentXProperty.GetMetadata (typeof (ImageBrush)), "#metadata should not be null for: TileBrush.AlignmentXProperty.ImageBrush");
            retval = TileBrush.AlignmentXProperty.GetMetadata (typeof (ImageBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TileBrush.AlignmentXProperty should be non-null value");
            Assert.IsInstanceOfType<AlignmentX>(retval, "TileBrush.AlignmentXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(AlignmentX.Center, retval, "TileBrush.AlignmentXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TileBrush.AlignmentXProperty);
            Assert.IsNotNull(retval, "GetValue(TileBrush.AlignmentXProperty) should not have returned null");
            Assert.IsInstanceOfType<AlignmentX>(retval, "GetValue(TileBrush.AlignmentXProperty) is not of the correct type");
            Assert.AreEqual(AlignmentX.Center, retval, "GetValue(TileBrush.AlignmentXProperty) does not match the default value");
            Assert.IsNotNull(TileBrush.AlignmentYProperty.GetMetadata (typeof (ImageBrush)), "#metadata should not be null for: TileBrush.AlignmentYProperty.ImageBrush");
            retval = TileBrush.AlignmentYProperty.GetMetadata (typeof (ImageBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TileBrush.AlignmentYProperty should be non-null value");
            Assert.IsInstanceOfType<AlignmentY>(retval, "TileBrush.AlignmentYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(AlignmentY.Center, retval, "TileBrush.AlignmentYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TileBrush.AlignmentYProperty);
            Assert.IsNotNull(retval, "GetValue(TileBrush.AlignmentYProperty) should not have returned null");
            Assert.IsInstanceOfType<AlignmentY>(retval, "GetValue(TileBrush.AlignmentYProperty) is not of the correct type");
            Assert.AreEqual(AlignmentY.Center, retval, "GetValue(TileBrush.AlignmentYProperty) does not match the default value");
            Assert.IsNotNull(TileBrush.StretchProperty.GetMetadata (typeof (ImageBrush)), "#metadata should not be null for: TileBrush.StretchProperty.ImageBrush");
            retval = TileBrush.StretchProperty.GetMetadata (typeof (ImageBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TileBrush.StretchProperty should be non-null value");
            Assert.IsInstanceOfType<Stretch>(retval, "TileBrush.StretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Stretch.Fill, retval, "TileBrush.StretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TileBrush.StretchProperty);
            Assert.IsNotNull(retval, "GetValue(TileBrush.StretchProperty) should not have returned null");
            Assert.IsInstanceOfType<Stretch>(retval, "GetValue(TileBrush.StretchProperty) is not of the correct type");
            Assert.AreEqual(Stretch.Fill, retval, "GetValue(TileBrush.StretchProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Brush ()
        {
            ImageBrush widget = new ImageBrush ();
            object retval;

            Assert.IsNotNull(Brush.OpacityProperty.GetMetadata (typeof (ImageBrush)), "#metadata should not be null for: Brush.OpacityProperty.ImageBrush");
            retval = Brush.OpacityProperty.GetMetadata (typeof (ImageBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Brush.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Brush.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Brush.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Brush.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Brush.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Brush.OpacityProperty) does not match the default value");
            Assert.IsNotNull(Brush.TransformProperty.GetMetadata (typeof (ImageBrush)), "#metadata should not be null for: Brush.TransformProperty.ImageBrush");
            retval = Brush.TransformProperty.GetMetadata (typeof (ImageBrush)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Brush.TransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Brush.TransformProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.TransformProperty) should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(retval, "GetValue(Brush.TransformProperty) is not of the correct type");
            Assert.IsNotNull(Brush.RelativeTransformProperty.GetMetadata (typeof (ImageBrush)), "#metadata should not be null for: Brush.RelativeTransformProperty.ImageBrush");
            retval = Brush.RelativeTransformProperty.GetMetadata (typeof (ImageBrush)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Brush.RelativeTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Brush.RelativeTransformProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.RelativeTransformProperty) should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(retval, "GetValue(Brush.RelativeTransformProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_PropertyGetter_ImageBrush ()
        {
            ImageBrush widget = new ImageBrush ();

            Assert.IsNotNull(widget.ImageSource, "ImageSource should not have returned null");
            Assert.IsInstanceOfType<BitmapImage>(widget.ImageSource, "ImageSource is not of the correct type");
            Assert.AreEqual(AlignmentX.Center, widget.AlignmentX, "AlignmentX does not match the default value");
            Assert.AreEqual(AlignmentY.Center, widget.AlignmentY, "AlignmentY does not match the default value");
            Assert.AreEqual(Stretch.Fill, widget.Stretch, "Stretch does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNotNull(widget.Transform, "Transform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.Transform, "Transform is not of the correct type");
            Assert.IsNotNull(widget.RelativeTransform, "RelativeTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RelativeTransform, "RelativeTransform is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class VideoBrushTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_VideoBrush ()
        {
            VideoBrush widget = new VideoBrush ();
            object retval;

            retval = widget.ReadLocalValue(VideoBrush.SourceNameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(VideoBrush.SourceNameProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_TileBrush ()
        {
            VideoBrush widget = new VideoBrush ();
            object retval;

            retval = widget.ReadLocalValue(TileBrush.AlignmentXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TileBrush.AlignmentXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TileBrush.AlignmentYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TileBrush.AlignmentYProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TileBrush.StretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TileBrush.StretchProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Brush ()
        {
            VideoBrush widget = new VideoBrush ();
            object retval;

            retval = widget.ReadLocalValue(Brush.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Brush.TransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.TransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Brush.RelativeTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.RelativeTransformProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_VideoBrush ()
        {
            VideoBrush widget = new VideoBrush ();
            object retval;

            Assert.IsNotNull(VideoBrush.SourceNameProperty.GetMetadata (typeof (VideoBrush)), "#metadata should not be null for: VideoBrush.SourceNameProperty.VideoBrush");
            retval = VideoBrush.SourceNameProperty.GetMetadata (typeof (VideoBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for VideoBrush.SourceNameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "VideoBrush.SourceNameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "VideoBrush.SourceNameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(VideoBrush.SourceNameProperty);
            Assert.IsNotNull(retval, "GetValue(VideoBrush.SourceNameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(VideoBrush.SourceNameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(VideoBrush.SourceNameProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_TileBrush ()
        {
            VideoBrush widget = new VideoBrush ();
            object retval;

            Assert.IsNotNull(TileBrush.AlignmentXProperty.GetMetadata (typeof (VideoBrush)), "#metadata should not be null for: TileBrush.AlignmentXProperty.VideoBrush");
            retval = TileBrush.AlignmentXProperty.GetMetadata (typeof (VideoBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TileBrush.AlignmentXProperty should be non-null value");
            Assert.IsInstanceOfType<AlignmentX>(retval, "TileBrush.AlignmentXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(AlignmentX.Center, retval, "TileBrush.AlignmentXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TileBrush.AlignmentXProperty);
            Assert.IsNotNull(retval, "GetValue(TileBrush.AlignmentXProperty) should not have returned null");
            Assert.IsInstanceOfType<AlignmentX>(retval, "GetValue(TileBrush.AlignmentXProperty) is not of the correct type");
            Assert.AreEqual(AlignmentX.Center, retval, "GetValue(TileBrush.AlignmentXProperty) does not match the default value");
            Assert.IsNotNull(TileBrush.AlignmentYProperty.GetMetadata (typeof (VideoBrush)), "#metadata should not be null for: TileBrush.AlignmentYProperty.VideoBrush");
            retval = TileBrush.AlignmentYProperty.GetMetadata (typeof (VideoBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TileBrush.AlignmentYProperty should be non-null value");
            Assert.IsInstanceOfType<AlignmentY>(retval, "TileBrush.AlignmentYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(AlignmentY.Center, retval, "TileBrush.AlignmentYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TileBrush.AlignmentYProperty);
            Assert.IsNotNull(retval, "GetValue(TileBrush.AlignmentYProperty) should not have returned null");
            Assert.IsInstanceOfType<AlignmentY>(retval, "GetValue(TileBrush.AlignmentYProperty) is not of the correct type");
            Assert.AreEqual(AlignmentY.Center, retval, "GetValue(TileBrush.AlignmentYProperty) does not match the default value");
            Assert.IsNotNull(TileBrush.StretchProperty.GetMetadata (typeof (VideoBrush)), "#metadata should not be null for: TileBrush.StretchProperty.VideoBrush");
            retval = TileBrush.StretchProperty.GetMetadata (typeof (VideoBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TileBrush.StretchProperty should be non-null value");
            Assert.IsInstanceOfType<Stretch>(retval, "TileBrush.StretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Stretch.Fill, retval, "TileBrush.StretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TileBrush.StretchProperty);
            Assert.IsNotNull(retval, "GetValue(TileBrush.StretchProperty) should not have returned null");
            Assert.IsInstanceOfType<Stretch>(retval, "GetValue(TileBrush.StretchProperty) is not of the correct type");
            Assert.AreEqual(Stretch.Fill, retval, "GetValue(TileBrush.StretchProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Brush ()
        {
            VideoBrush widget = new VideoBrush ();
            object retval;

            Assert.IsNotNull(Brush.OpacityProperty.GetMetadata (typeof (VideoBrush)), "#metadata should not be null for: Brush.OpacityProperty.VideoBrush");
            retval = Brush.OpacityProperty.GetMetadata (typeof (VideoBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Brush.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Brush.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Brush.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Brush.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Brush.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Brush.OpacityProperty) does not match the default value");
            Assert.IsNotNull(Brush.TransformProperty.GetMetadata (typeof (VideoBrush)), "#metadata should not be null for: Brush.TransformProperty.VideoBrush");
            retval = Brush.TransformProperty.GetMetadata (typeof (VideoBrush)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Brush.TransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Brush.TransformProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.TransformProperty) should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(retval, "GetValue(Brush.TransformProperty) is not of the correct type");
            Assert.IsNotNull(Brush.RelativeTransformProperty.GetMetadata (typeof (VideoBrush)), "#metadata should not be null for: Brush.RelativeTransformProperty.VideoBrush");
            retval = Brush.RelativeTransformProperty.GetMetadata (typeof (VideoBrush)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Brush.RelativeTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Brush.RelativeTransformProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.RelativeTransformProperty) should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(retval, "GetValue(Brush.RelativeTransformProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_PropertyGetter_VideoBrush ()
        {
            VideoBrush widget = new VideoBrush ();

            Assert.IsNotNull(widget.SourceName, "SourceName should not have returned null");
            Assert.AreEqual("", widget.SourceName, "SourceName does not match the default value");
            Assert.AreEqual(AlignmentX.Center, widget.AlignmentX, "AlignmentX does not match the default value");
            Assert.AreEqual(AlignmentY.Center, widget.AlignmentY, "AlignmentY does not match the default value");
            Assert.AreEqual(Stretch.Fill, widget.Stretch, "Stretch does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNotNull(widget.Transform, "Transform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.Transform, "Transform is not of the correct type");
            Assert.IsNotNull(widget.RelativeTransform, "RelativeTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RelativeTransform, "RelativeTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_VideoBrush ()
        {
            VideoBrush widget = new VideoBrush ();
            object retval;

            widget.SetValue(VideoBrush.SourceNameProperty, "some text");
            retval = widget.GetValue(VideoBrush.SourceNameProperty);
            Assert.AreEqual("some text", retval, "GetValue(VideoBrush.SourceNameProperty) should have returned 'some text'");
            widget.SetValue(VideoBrush.SourceNameProperty, null);
            retval = widget.GetValue(VideoBrush.SourceNameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(VideoBrush.SourceNameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(VideoBrush.SourceNameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(VideoBrush.SourceNameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class ImplicitInputBrushTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Brush ()
        {
            ImplicitInputBrush widget = new ImplicitInputBrush ();
            object retval;

            retval = widget.ReadLocalValue(Brush.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Brush.TransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.TransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Brush.RelativeTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.RelativeTransformProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Brush ()
        {
            ImplicitInputBrush widget = new ImplicitInputBrush ();
            object retval;

            Assert.IsNotNull(Brush.OpacityProperty.GetMetadata (typeof (ImplicitInputBrush)), "#metadata should not be null for: Brush.OpacityProperty.ImplicitInputBrush");
            retval = Brush.OpacityProperty.GetMetadata (typeof (ImplicitInputBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Brush.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Brush.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Brush.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Brush.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Brush.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Brush.OpacityProperty) does not match the default value");
            Assert.IsNotNull(Brush.TransformProperty.GetMetadata (typeof (ImplicitInputBrush)), "#metadata should not be null for: Brush.TransformProperty.ImplicitInputBrush");
            retval = Brush.TransformProperty.GetMetadata (typeof (ImplicitInputBrush)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Brush.TransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Brush.TransformProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.TransformProperty) should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(retval, "GetValue(Brush.TransformProperty) is not of the correct type");
            Assert.IsNotNull(Brush.RelativeTransformProperty.GetMetadata (typeof (ImplicitInputBrush)), "#metadata should not be null for: Brush.RelativeTransformProperty.ImplicitInputBrush");
            retval = Brush.RelativeTransformProperty.GetMetadata (typeof (ImplicitInputBrush)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Brush.RelativeTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Brush.RelativeTransformProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.RelativeTransformProperty) should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(retval, "GetValue(Brush.RelativeTransformProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_PropertyGetter_ImplicitInputBrush ()
        {
            ImplicitInputBrush widget = new ImplicitInputBrush ();

            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNotNull(widget.Transform, "Transform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.Transform, "Transform is not of the correct type");
            Assert.IsNotNull(widget.RelativeTransform, "RelativeTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RelativeTransform, "RelativeTransform is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class TimelineMarkerTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_TimelineMarker ()
        {
            TimelineMarker widget = new TimelineMarker ();
            object retval;

            retval = widget.ReadLocalValue(TimelineMarker.TimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TimelineMarker.TimeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TimelineMarker.TypeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TimelineMarker.TypeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TimelineMarker.TextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TimelineMarker.TextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_TimelineMarker ()
        {
            TimelineMarker widget = new TimelineMarker ();
            object retval;

            Assert.IsNotNull(TimelineMarker.TimeProperty.GetMetadata (typeof (TimelineMarker)), "#metadata should not be null for: TimelineMarker.TimeProperty.TimelineMarker");
            retval = TimelineMarker.TimeProperty.GetMetadata (typeof (TimelineMarker)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TimelineMarker.TimeProperty should be non-null value");
            Assert.IsInstanceOfType<TimeSpan>(retval, "TimelineMarker.TimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "TimelineMarker.TimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TimelineMarker.TimeProperty);
            Assert.IsNotNull(retval, "GetValue(TimelineMarker.TimeProperty) should not have returned null");
            Assert.IsInstanceOfType<TimeSpan>(retval, "GetValue(TimelineMarker.TimeProperty) is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(TimelineMarker.TimeProperty) does not match the default value");
            Assert.IsNotNull(TimelineMarker.TypeProperty.GetMetadata (typeof (TimelineMarker)), "#metadata should not be null for: TimelineMarker.TypeProperty.TimelineMarker");
            retval = TimelineMarker.TypeProperty.GetMetadata (typeof (TimelineMarker)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for TimelineMarker.TypeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(TimelineMarker.TypeProperty);
            Assert.IsNull(retval, "GetValue(TimelineMarker.TypeProperty) should have returned null");
            Assert.IsNotNull(TimelineMarker.TextProperty.GetMetadata (typeof (TimelineMarker)), "#metadata should not be null for: TimelineMarker.TextProperty.TimelineMarker");
            retval = TimelineMarker.TextProperty.GetMetadata (typeof (TimelineMarker)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for TimelineMarker.TextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(TimelineMarker.TextProperty);
            Assert.IsNull(retval, "GetValue(TimelineMarker.TextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_TimelineMarker ()
        {
            TimelineMarker widget = new TimelineMarker ();

            Assert.AreEqual("00:00:00", widget.Time.ToString (), "Time does not match the default value");
            Assert.IsNull(widget.Type, "Type should have returned null");
            Assert.IsNull(widget.Text, "Text should have returned null");
        }

        [TestMethod]
        public void Test_SetStringValue_TimelineMarker ()
        {
            TimelineMarker widget = new TimelineMarker ();
            object retval;

            widget.SetValue(TimelineMarker.TypeProperty, "some text");
            retval = widget.GetValue(TimelineMarker.TypeProperty);
            Assert.AreEqual("some text", retval, "GetValue(TimelineMarker.TypeProperty) should have returned 'some text'");
            widget.SetValue(TimelineMarker.TypeProperty, null);
            retval = widget.GetValue(TimelineMarker.TypeProperty);
            Assert.IsNull(retval, "GetValue(TimelineMarker.TypeProperty) should have returned null");
            widget.SetValue(TimelineMarker.TextProperty, "some text");
            retval = widget.GetValue(TimelineMarker.TextProperty);
            Assert.AreEqual("some text", retval, "GetValue(TimelineMarker.TextProperty) should have returned 'some text'");
            widget.SetValue(TimelineMarker.TextProperty, null);
            retval = widget.GetValue(TimelineMarker.TextProperty);
            Assert.IsNull(retval, "GetValue(TimelineMarker.TextProperty) should have returned null");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class TimelineMarkerCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_TimelineMarkerCollection ()
        {
            TimelineMarkerCollection widget = new TimelineMarkerCollection ();

            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<TimelineMarkerCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class PlaneProjectionTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_PlaneProjection ()
        {
            PlaneProjection widget = new PlaneProjection ();
            object retval;

            retval = widget.ReadLocalValue(PlaneProjection.LocalOffsetXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PlaneProjection.LocalOffsetXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PlaneProjection.LocalOffsetYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PlaneProjection.LocalOffsetYProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PlaneProjection.LocalOffsetZProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PlaneProjection.LocalOffsetZProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PlaneProjection.RotationXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PlaneProjection.RotationXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PlaneProjection.RotationYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PlaneProjection.RotationYProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PlaneProjection.RotationZProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PlaneProjection.RotationZProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PlaneProjection.CenterOfRotationXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PlaneProjection.CenterOfRotationXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PlaneProjection.CenterOfRotationYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PlaneProjection.CenterOfRotationYProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PlaneProjection.CenterOfRotationZProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PlaneProjection.CenterOfRotationZProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PlaneProjection.GlobalOffsetXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PlaneProjection.GlobalOffsetXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PlaneProjection.GlobalOffsetYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PlaneProjection.GlobalOffsetYProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PlaneProjection.GlobalOffsetZProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PlaneProjection.GlobalOffsetZProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PlaneProjection.ProjectionMatrixProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PlaneProjection.ProjectionMatrixProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_PlaneProjection ()
        {
            PlaneProjection widget = new PlaneProjection ();
            object retval;

            Assert.IsNotNull(PlaneProjection.LocalOffsetXProperty.GetMetadata (typeof (PlaneProjection)), "#metadata should not be null for: PlaneProjection.LocalOffsetXProperty.PlaneProjection");
            retval = PlaneProjection.LocalOffsetXProperty.GetMetadata (typeof (PlaneProjection)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PlaneProjection.LocalOffsetXProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "PlaneProjection.LocalOffsetXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "PlaneProjection.LocalOffsetXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PlaneProjection.LocalOffsetXProperty);
            Assert.IsNotNull(retval, "GetValue(PlaneProjection.LocalOffsetXProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(PlaneProjection.LocalOffsetXProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(PlaneProjection.LocalOffsetXProperty) does not match the default value");
            Assert.IsNotNull(PlaneProjection.LocalOffsetYProperty.GetMetadata (typeof (PlaneProjection)), "#metadata should not be null for: PlaneProjection.LocalOffsetYProperty.PlaneProjection");
            retval = PlaneProjection.LocalOffsetYProperty.GetMetadata (typeof (PlaneProjection)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PlaneProjection.LocalOffsetYProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "PlaneProjection.LocalOffsetYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "PlaneProjection.LocalOffsetYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PlaneProjection.LocalOffsetYProperty);
            Assert.IsNotNull(retval, "GetValue(PlaneProjection.LocalOffsetYProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(PlaneProjection.LocalOffsetYProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(PlaneProjection.LocalOffsetYProperty) does not match the default value");
            Assert.IsNotNull(PlaneProjection.LocalOffsetZProperty.GetMetadata (typeof (PlaneProjection)), "#metadata should not be null for: PlaneProjection.LocalOffsetZProperty.PlaneProjection");
            retval = PlaneProjection.LocalOffsetZProperty.GetMetadata (typeof (PlaneProjection)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PlaneProjection.LocalOffsetZProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "PlaneProjection.LocalOffsetZProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "PlaneProjection.LocalOffsetZProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PlaneProjection.LocalOffsetZProperty);
            Assert.IsNotNull(retval, "GetValue(PlaneProjection.LocalOffsetZProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(PlaneProjection.LocalOffsetZProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(PlaneProjection.LocalOffsetZProperty) does not match the default value");
            Assert.IsNotNull(PlaneProjection.RotationXProperty.GetMetadata (typeof (PlaneProjection)), "#metadata should not be null for: PlaneProjection.RotationXProperty.PlaneProjection");
            retval = PlaneProjection.RotationXProperty.GetMetadata (typeof (PlaneProjection)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PlaneProjection.RotationXProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "PlaneProjection.RotationXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "PlaneProjection.RotationXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PlaneProjection.RotationXProperty);
            Assert.IsNotNull(retval, "GetValue(PlaneProjection.RotationXProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(PlaneProjection.RotationXProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(PlaneProjection.RotationXProperty) does not match the default value");
            Assert.IsNotNull(PlaneProjection.RotationYProperty.GetMetadata (typeof (PlaneProjection)), "#metadata should not be null for: PlaneProjection.RotationYProperty.PlaneProjection");
            retval = PlaneProjection.RotationYProperty.GetMetadata (typeof (PlaneProjection)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PlaneProjection.RotationYProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "PlaneProjection.RotationYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "PlaneProjection.RotationYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PlaneProjection.RotationYProperty);
            Assert.IsNotNull(retval, "GetValue(PlaneProjection.RotationYProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(PlaneProjection.RotationYProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(PlaneProjection.RotationYProperty) does not match the default value");
            Assert.IsNotNull(PlaneProjection.RotationZProperty.GetMetadata (typeof (PlaneProjection)), "#metadata should not be null for: PlaneProjection.RotationZProperty.PlaneProjection");
            retval = PlaneProjection.RotationZProperty.GetMetadata (typeof (PlaneProjection)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PlaneProjection.RotationZProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "PlaneProjection.RotationZProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "PlaneProjection.RotationZProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PlaneProjection.RotationZProperty);
            Assert.IsNotNull(retval, "GetValue(PlaneProjection.RotationZProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(PlaneProjection.RotationZProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(PlaneProjection.RotationZProperty) does not match the default value");
            Assert.IsNotNull(PlaneProjection.CenterOfRotationXProperty.GetMetadata (typeof (PlaneProjection)), "#metadata should not be null for: PlaneProjection.CenterOfRotationXProperty.PlaneProjection");
            retval = PlaneProjection.CenterOfRotationXProperty.GetMetadata (typeof (PlaneProjection)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PlaneProjection.CenterOfRotationXProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "PlaneProjection.CenterOfRotationXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0.5, retval, "PlaneProjection.CenterOfRotationXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PlaneProjection.CenterOfRotationXProperty);
            Assert.IsNotNull(retval, "GetValue(PlaneProjection.CenterOfRotationXProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(PlaneProjection.CenterOfRotationXProperty) is not of the correct type");
            Assert.AreEqual((double) 0.5, retval, "GetValue(PlaneProjection.CenterOfRotationXProperty) does not match the default value");
            Assert.IsNotNull(PlaneProjection.CenterOfRotationYProperty.GetMetadata (typeof (PlaneProjection)), "#metadata should not be null for: PlaneProjection.CenterOfRotationYProperty.PlaneProjection");
            retval = PlaneProjection.CenterOfRotationYProperty.GetMetadata (typeof (PlaneProjection)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PlaneProjection.CenterOfRotationYProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "PlaneProjection.CenterOfRotationYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0.5, retval, "PlaneProjection.CenterOfRotationYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PlaneProjection.CenterOfRotationYProperty);
            Assert.IsNotNull(retval, "GetValue(PlaneProjection.CenterOfRotationYProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(PlaneProjection.CenterOfRotationYProperty) is not of the correct type");
            Assert.AreEqual((double) 0.5, retval, "GetValue(PlaneProjection.CenterOfRotationYProperty) does not match the default value");
            Assert.IsNotNull(PlaneProjection.CenterOfRotationZProperty.GetMetadata (typeof (PlaneProjection)), "#metadata should not be null for: PlaneProjection.CenterOfRotationZProperty.PlaneProjection");
            retval = PlaneProjection.CenterOfRotationZProperty.GetMetadata (typeof (PlaneProjection)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PlaneProjection.CenterOfRotationZProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "PlaneProjection.CenterOfRotationZProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "PlaneProjection.CenterOfRotationZProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PlaneProjection.CenterOfRotationZProperty);
            Assert.IsNotNull(retval, "GetValue(PlaneProjection.CenterOfRotationZProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(PlaneProjection.CenterOfRotationZProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(PlaneProjection.CenterOfRotationZProperty) does not match the default value");
            Assert.IsNotNull(PlaneProjection.GlobalOffsetXProperty.GetMetadata (typeof (PlaneProjection)), "#metadata should not be null for: PlaneProjection.GlobalOffsetXProperty.PlaneProjection");
            retval = PlaneProjection.GlobalOffsetXProperty.GetMetadata (typeof (PlaneProjection)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PlaneProjection.GlobalOffsetXProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "PlaneProjection.GlobalOffsetXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "PlaneProjection.GlobalOffsetXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PlaneProjection.GlobalOffsetXProperty);
            Assert.IsNotNull(retval, "GetValue(PlaneProjection.GlobalOffsetXProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(PlaneProjection.GlobalOffsetXProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(PlaneProjection.GlobalOffsetXProperty) does not match the default value");
            Assert.IsNotNull(PlaneProjection.GlobalOffsetYProperty.GetMetadata (typeof (PlaneProjection)), "#metadata should not be null for: PlaneProjection.GlobalOffsetYProperty.PlaneProjection");
            retval = PlaneProjection.GlobalOffsetYProperty.GetMetadata (typeof (PlaneProjection)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PlaneProjection.GlobalOffsetYProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "PlaneProjection.GlobalOffsetYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "PlaneProjection.GlobalOffsetYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PlaneProjection.GlobalOffsetYProperty);
            Assert.IsNotNull(retval, "GetValue(PlaneProjection.GlobalOffsetYProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(PlaneProjection.GlobalOffsetYProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(PlaneProjection.GlobalOffsetYProperty) does not match the default value");
            Assert.IsNotNull(PlaneProjection.GlobalOffsetZProperty.GetMetadata (typeof (PlaneProjection)), "#metadata should not be null for: PlaneProjection.GlobalOffsetZProperty.PlaneProjection");
            retval = PlaneProjection.GlobalOffsetZProperty.GetMetadata (typeof (PlaneProjection)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PlaneProjection.GlobalOffsetZProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "PlaneProjection.GlobalOffsetZProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "PlaneProjection.GlobalOffsetZProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PlaneProjection.GlobalOffsetZProperty);
            Assert.IsNotNull(retval, "GetValue(PlaneProjection.GlobalOffsetZProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(PlaneProjection.GlobalOffsetZProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(PlaneProjection.GlobalOffsetZProperty) does not match the default value");
            Assert.IsNotNull(PlaneProjection.ProjectionMatrixProperty.GetMetadata (typeof (PlaneProjection)), "#metadata should not be null for: PlaneProjection.ProjectionMatrixProperty.PlaneProjection");
            retval = PlaneProjection.ProjectionMatrixProperty.GetMetadata (typeof (PlaneProjection)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PlaneProjection.ProjectionMatrixProperty should be non-null value");
            Assert.IsInstanceOfType<Matrix3D>(retval, "PlaneProjection.ProjectionMatrixProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Identity", retval.ToString (), "PlaneProjection.ProjectionMatrixProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PlaneProjection.ProjectionMatrixProperty);
            Assert.IsNotNull(retval, "GetValue(PlaneProjection.ProjectionMatrixProperty) should not have returned null");
            Assert.IsInstanceOfType<Matrix3D>(retval, "GetValue(PlaneProjection.ProjectionMatrixProperty) is not of the correct type");
            Assert.AreEqual("Identity", retval.ToString (), "GetValue(PlaneProjection.ProjectionMatrixProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_PlaneProjection ()
        {
            PlaneProjection widget = new PlaneProjection ();

            Assert.AreEqual((double) 0, widget.LocalOffsetX, "LocalOffsetX does not match the default value");
            Assert.AreEqual((double) 0, widget.LocalOffsetY, "LocalOffsetY does not match the default value");
            Assert.AreEqual((double) 0, widget.LocalOffsetZ, "LocalOffsetZ does not match the default value");
            Assert.AreEqual((double) 0, widget.RotationX, "RotationX does not match the default value");
            Assert.AreEqual((double) 0, widget.RotationY, "RotationY does not match the default value");
            Assert.AreEqual((double) 0, widget.RotationZ, "RotationZ does not match the default value");
            Assert.AreEqual((double) 0.5, widget.CenterOfRotationX, "CenterOfRotationX does not match the default value");
            Assert.AreEqual((double) 0.5, widget.CenterOfRotationY, "CenterOfRotationY does not match the default value");
            Assert.AreEqual((double) 0, widget.CenterOfRotationZ, "CenterOfRotationZ does not match the default value");
            Assert.AreEqual((double) 0, widget.GlobalOffsetX, "GlobalOffsetX does not match the default value");
            Assert.AreEqual((double) 0, widget.GlobalOffsetY, "GlobalOffsetY does not match the default value");
            Assert.AreEqual((double) 0, widget.GlobalOffsetZ, "GlobalOffsetZ does not match the default value");
            Assert.AreEqual("Identity", widget.ProjectionMatrix.ToString (), "ProjectionMatrix does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class Matrix3DProjectionTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Matrix3DProjection ()
        {
            Matrix3DProjection widget = new Matrix3DProjection ();
            object retval;

            retval = widget.ReadLocalValue(Matrix3DProjection.ProjectionMatrixProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Matrix3DProjection.ProjectionMatrixProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Matrix3DProjection ()
        {
            Matrix3DProjection widget = new Matrix3DProjection ();
            object retval;

            Assert.IsNotNull(Matrix3DProjection.ProjectionMatrixProperty.GetMetadata (typeof (Matrix3DProjection)), "#metadata should not be null for: Matrix3DProjection.ProjectionMatrixProperty.Matrix3DProjection");
            retval = Matrix3DProjection.ProjectionMatrixProperty.GetMetadata (typeof (Matrix3DProjection)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Matrix3DProjection.ProjectionMatrixProperty should be non-null value");
            Assert.IsInstanceOfType<Matrix3D>(retval, "Matrix3DProjection.ProjectionMatrixProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Identity", retval.ToString (), "Matrix3DProjection.ProjectionMatrixProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Matrix3DProjection.ProjectionMatrixProperty);
            Assert.IsNotNull(retval, "GetValue(Matrix3DProjection.ProjectionMatrixProperty) should not have returned null");
            Assert.IsInstanceOfType<Matrix3D>(retval, "GetValue(Matrix3DProjection.ProjectionMatrixProperty) is not of the correct type");
            Assert.AreEqual("Identity", retval.ToString (), "GetValue(Matrix3DProjection.ProjectionMatrixProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_Matrix3DProjection ()
        {
            Matrix3DProjection widget = new Matrix3DProjection ();

            Assert.AreEqual("Identity", widget.ProjectionMatrix.ToString (), "ProjectionMatrix does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class BitmapCacheTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_BitmapCache ()
        {
            BitmapCache widget = new BitmapCache ();
            object retval;

            retval = widget.ReadLocalValue(BitmapCache.RenderAtScaleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(BitmapCache.RenderAtScaleProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_BitmapCache ()
        {
            BitmapCache widget = new BitmapCache ();
            object retval;

            Assert.IsNotNull(BitmapCache.RenderAtScaleProperty.GetMetadata (typeof (BitmapCache)), "#metadata should not be null for: BitmapCache.RenderAtScaleProperty.BitmapCache");
            retval = BitmapCache.RenderAtScaleProperty.GetMetadata (typeof (BitmapCache)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for BitmapCache.RenderAtScaleProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "BitmapCache.RenderAtScaleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "BitmapCache.RenderAtScaleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(BitmapCache.RenderAtScaleProperty);
            Assert.IsNotNull(retval, "GetValue(BitmapCache.RenderAtScaleProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(BitmapCache.RenderAtScaleProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(BitmapCache.RenderAtScaleProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_BitmapCache ()
        {
            BitmapCache widget = new BitmapCache ();

            Assert.AreEqual((double) 1, widget.RenderAtScale, "RenderAtScale does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class CaptureSourceTest
    {
        [TestMethod]
        [MoonlightBug]
        public void Test_ReadLocalValue_CaptureSource ()
        {
            CaptureSource widget = new CaptureSource ();
            object retval;

            retval = widget.ReadLocalValue(CaptureSource.VideoCaptureDeviceProperty);
            Assert.IsNull(retval, "ReadLocalValue(CaptureSource.VideoCaptureDeviceProperty) should have returned null");
            retval = widget.ReadLocalValue(CaptureSource.AudioCaptureDeviceProperty);
            Assert.IsNotNull(retval, "ReadLocalValue(CaptureSource.AudioCaptureDeviceProperty) should not have returned null");
            Assert.IsInstanceOfType<AudioCaptureDevice>(retval, "ReadLocalValue(CaptureSource.AudioCaptureDeviceProperty) is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_GetValue_CaptureSource ()
        {
            CaptureSource widget = new CaptureSource ();
            object retval;

            Assert.IsNotNull(CaptureSource.VideoCaptureDeviceProperty.GetMetadata (typeof (CaptureSource)), "#metadata should not be null for: CaptureSource.VideoCaptureDeviceProperty.CaptureSource");
            retval = CaptureSource.VideoCaptureDeviceProperty.GetMetadata (typeof (CaptureSource)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for CaptureSource.VideoCaptureDeviceProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(CaptureSource.VideoCaptureDeviceProperty);
            Assert.IsNull(retval, "GetValue(CaptureSource.VideoCaptureDeviceProperty) should have returned null");
            Assert.IsNotNull(CaptureSource.AudioCaptureDeviceProperty.GetMetadata (typeof (CaptureSource)), "#metadata should not be null for: CaptureSource.AudioCaptureDeviceProperty.CaptureSource");
            retval = CaptureSource.AudioCaptureDeviceProperty.GetMetadata (typeof (CaptureSource)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for CaptureSource.AudioCaptureDeviceProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(CaptureSource.AudioCaptureDeviceProperty);
            Assert.IsNotNull(retval, "GetValue(CaptureSource.AudioCaptureDeviceProperty) should not have returned null");
            Assert.IsInstanceOfType<AudioCaptureDevice>(retval, "GetValue(CaptureSource.AudioCaptureDeviceProperty) is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_PropertyGetter_CaptureSource ()
        {
            CaptureSource widget = new CaptureSource ();

            Assert.IsNull(widget.VideoCaptureDevice, "VideoCaptureDevice should have returned null");
            Assert.IsNotNull(widget.AudioCaptureDevice, "AudioCaptureDevice should not have returned null");
            Assert.IsInstanceOfType<AudioCaptureDevice>(widget.AudioCaptureDevice, "AudioCaptureDevice is not of the correct type");
            Assert.AreEqual(CaptureState.Stopped, widget.State, "State does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class CircleEaseTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_EasingFunctionBase ()
        {
            CircleEase widget = new CircleEase ();
            object retval;

            retval = widget.ReadLocalValue(EasingFunctionBase.EasingModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EasingFunctionBase.EasingModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_EasingFunctionBase ()
        {
            CircleEase widget = new CircleEase ();
            object retval;

            Assert.IsNotNull(EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (CircleEase)), "#metadata should not be null for: EasingFunctionBase.EasingModeProperty.CircleEase");
            retval = EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (CircleEase)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for EasingFunctionBase.EasingModeProperty should be non-null value");
            Assert.IsInstanceOfType<EasingMode>(retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(EasingFunctionBase.EasingModeProperty);
            Assert.IsNotNull(retval, "GetValue(EasingFunctionBase.EasingModeProperty) should not have returned null");
            Assert.IsInstanceOfType<EasingMode>(retval, "GetValue(EasingFunctionBase.EasingModeProperty) is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "GetValue(EasingFunctionBase.EasingModeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_CircleEase ()
        {
            CircleEase widget = new CircleEase ();

            Assert.AreEqual(EasingMode.EaseOut, widget.EasingMode, "EasingMode does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class BackEaseTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_BackEase ()
        {
            BackEase widget = new BackEase ();
            object retval;

            retval = widget.ReadLocalValue(BackEase.AmplitudeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(BackEase.AmplitudeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_EasingFunctionBase ()
        {
            BackEase widget = new BackEase ();
            object retval;

            retval = widget.ReadLocalValue(EasingFunctionBase.EasingModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EasingFunctionBase.EasingModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_BackEase ()
        {
            BackEase widget = new BackEase ();
            object retval;

            Assert.IsNotNull(BackEase.AmplitudeProperty.GetMetadata (typeof (BackEase)), "#metadata should not be null for: BackEase.AmplitudeProperty.BackEase");
            retval = BackEase.AmplitudeProperty.GetMetadata (typeof (BackEase)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for BackEase.AmplitudeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "BackEase.AmplitudeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "BackEase.AmplitudeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(BackEase.AmplitudeProperty);
            Assert.IsNotNull(retval, "GetValue(BackEase.AmplitudeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(BackEase.AmplitudeProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(BackEase.AmplitudeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_EasingFunctionBase ()
        {
            BackEase widget = new BackEase ();
            object retval;

            Assert.IsNotNull(EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (BackEase)), "#metadata should not be null for: EasingFunctionBase.EasingModeProperty.BackEase");
            retval = EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (BackEase)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for EasingFunctionBase.EasingModeProperty should be non-null value");
            Assert.IsInstanceOfType<EasingMode>(retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(EasingFunctionBase.EasingModeProperty);
            Assert.IsNotNull(retval, "GetValue(EasingFunctionBase.EasingModeProperty) should not have returned null");
            Assert.IsInstanceOfType<EasingMode>(retval, "GetValue(EasingFunctionBase.EasingModeProperty) is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "GetValue(EasingFunctionBase.EasingModeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_BackEase ()
        {
            BackEase widget = new BackEase ();

            Assert.AreEqual((double) 1, widget.Amplitude, "Amplitude does not match the default value");
            Assert.AreEqual(EasingMode.EaseOut, widget.EasingMode, "EasingMode does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class ExponentialEaseTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ExponentialEase ()
        {
            ExponentialEase widget = new ExponentialEase ();
            object retval;

            retval = widget.ReadLocalValue(ExponentialEase.ExponentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ExponentialEase.ExponentProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_EasingFunctionBase ()
        {
            ExponentialEase widget = new ExponentialEase ();
            object retval;

            retval = widget.ReadLocalValue(EasingFunctionBase.EasingModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EasingFunctionBase.EasingModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ExponentialEase ()
        {
            ExponentialEase widget = new ExponentialEase ();
            object retval;

            Assert.IsNotNull(ExponentialEase.ExponentProperty.GetMetadata (typeof (ExponentialEase)), "#metadata should not be null for: ExponentialEase.ExponentProperty.ExponentialEase");
            retval = ExponentialEase.ExponentProperty.GetMetadata (typeof (ExponentialEase)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ExponentialEase.ExponentProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ExponentialEase.ExponentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 2, retval, "ExponentialEase.ExponentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ExponentialEase.ExponentProperty);
            Assert.IsNotNull(retval, "GetValue(ExponentialEase.ExponentProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ExponentialEase.ExponentProperty) is not of the correct type");
            Assert.AreEqual((double) 2, retval, "GetValue(ExponentialEase.ExponentProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_EasingFunctionBase ()
        {
            ExponentialEase widget = new ExponentialEase ();
            object retval;

            Assert.IsNotNull(EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (ExponentialEase)), "#metadata should not be null for: EasingFunctionBase.EasingModeProperty.ExponentialEase");
            retval = EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (ExponentialEase)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for EasingFunctionBase.EasingModeProperty should be non-null value");
            Assert.IsInstanceOfType<EasingMode>(retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(EasingFunctionBase.EasingModeProperty);
            Assert.IsNotNull(retval, "GetValue(EasingFunctionBase.EasingModeProperty) should not have returned null");
            Assert.IsInstanceOfType<EasingMode>(retval, "GetValue(EasingFunctionBase.EasingModeProperty) is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "GetValue(EasingFunctionBase.EasingModeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_ExponentialEase ()
        {
            ExponentialEase widget = new ExponentialEase ();

            Assert.AreEqual((double) 2, widget.Exponent, "Exponent does not match the default value");
            Assert.AreEqual(EasingMode.EaseOut, widget.EasingMode, "EasingMode does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class PowerEaseTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_PowerEase ()
        {
            PowerEase widget = new PowerEase ();
            object retval;

            retval = widget.ReadLocalValue(PowerEase.PowerProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PowerEase.PowerProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_EasingFunctionBase ()
        {
            PowerEase widget = new PowerEase ();
            object retval;

            retval = widget.ReadLocalValue(EasingFunctionBase.EasingModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EasingFunctionBase.EasingModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_PowerEase ()
        {
            PowerEase widget = new PowerEase ();
            object retval;

            Assert.IsNotNull(PowerEase.PowerProperty.GetMetadata (typeof (PowerEase)), "#metadata should not be null for: PowerEase.PowerProperty.PowerEase");
            retval = PowerEase.PowerProperty.GetMetadata (typeof (PowerEase)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PowerEase.PowerProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "PowerEase.PowerProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 2, retval, "PowerEase.PowerProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PowerEase.PowerProperty);
            Assert.IsNotNull(retval, "GetValue(PowerEase.PowerProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(PowerEase.PowerProperty) is not of the correct type");
            Assert.AreEqual((double) 2, retval, "GetValue(PowerEase.PowerProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_EasingFunctionBase ()
        {
            PowerEase widget = new PowerEase ();
            object retval;

            Assert.IsNotNull(EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (PowerEase)), "#metadata should not be null for: EasingFunctionBase.EasingModeProperty.PowerEase");
            retval = EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (PowerEase)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for EasingFunctionBase.EasingModeProperty should be non-null value");
            Assert.IsInstanceOfType<EasingMode>(retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(EasingFunctionBase.EasingModeProperty);
            Assert.IsNotNull(retval, "GetValue(EasingFunctionBase.EasingModeProperty) should not have returned null");
            Assert.IsInstanceOfType<EasingMode>(retval, "GetValue(EasingFunctionBase.EasingModeProperty) is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "GetValue(EasingFunctionBase.EasingModeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_PowerEase ()
        {
            PowerEase widget = new PowerEase ();

            Assert.AreEqual((double) 2, widget.Power, "Power does not match the default value");
            Assert.AreEqual(EasingMode.EaseOut, widget.EasingMode, "EasingMode does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class QuadraticEaseTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_EasingFunctionBase ()
        {
            QuadraticEase widget = new QuadraticEase ();
            object retval;

            retval = widget.ReadLocalValue(EasingFunctionBase.EasingModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EasingFunctionBase.EasingModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_EasingFunctionBase ()
        {
            QuadraticEase widget = new QuadraticEase ();
            object retval;

            Assert.IsNotNull(EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (QuadraticEase)), "#metadata should not be null for: EasingFunctionBase.EasingModeProperty.QuadraticEase");
            retval = EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (QuadraticEase)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for EasingFunctionBase.EasingModeProperty should be non-null value");
            Assert.IsInstanceOfType<EasingMode>(retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(EasingFunctionBase.EasingModeProperty);
            Assert.IsNotNull(retval, "GetValue(EasingFunctionBase.EasingModeProperty) should not have returned null");
            Assert.IsInstanceOfType<EasingMode>(retval, "GetValue(EasingFunctionBase.EasingModeProperty) is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "GetValue(EasingFunctionBase.EasingModeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_QuadraticEase ()
        {
            QuadraticEase widget = new QuadraticEase ();

            Assert.AreEqual(EasingMode.EaseOut, widget.EasingMode, "EasingMode does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class CubicEaseTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_EasingFunctionBase ()
        {
            CubicEase widget = new CubicEase ();
            object retval;

            retval = widget.ReadLocalValue(EasingFunctionBase.EasingModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EasingFunctionBase.EasingModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_EasingFunctionBase ()
        {
            CubicEase widget = new CubicEase ();
            object retval;

            Assert.IsNotNull(EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (CubicEase)), "#metadata should not be null for: EasingFunctionBase.EasingModeProperty.CubicEase");
            retval = EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (CubicEase)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for EasingFunctionBase.EasingModeProperty should be non-null value");
            Assert.IsInstanceOfType<EasingMode>(retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(EasingFunctionBase.EasingModeProperty);
            Assert.IsNotNull(retval, "GetValue(EasingFunctionBase.EasingModeProperty) should not have returned null");
            Assert.IsInstanceOfType<EasingMode>(retval, "GetValue(EasingFunctionBase.EasingModeProperty) is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "GetValue(EasingFunctionBase.EasingModeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_CubicEase ()
        {
            CubicEase widget = new CubicEase ();

            Assert.AreEqual(EasingMode.EaseOut, widget.EasingMode, "EasingMode does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class QuarticEaseTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_EasingFunctionBase ()
        {
            QuarticEase widget = new QuarticEase ();
            object retval;

            retval = widget.ReadLocalValue(EasingFunctionBase.EasingModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EasingFunctionBase.EasingModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_EasingFunctionBase ()
        {
            QuarticEase widget = new QuarticEase ();
            object retval;

            Assert.IsNotNull(EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (QuarticEase)), "#metadata should not be null for: EasingFunctionBase.EasingModeProperty.QuarticEase");
            retval = EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (QuarticEase)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for EasingFunctionBase.EasingModeProperty should be non-null value");
            Assert.IsInstanceOfType<EasingMode>(retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(EasingFunctionBase.EasingModeProperty);
            Assert.IsNotNull(retval, "GetValue(EasingFunctionBase.EasingModeProperty) should not have returned null");
            Assert.IsInstanceOfType<EasingMode>(retval, "GetValue(EasingFunctionBase.EasingModeProperty) is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "GetValue(EasingFunctionBase.EasingModeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_QuarticEase ()
        {
            QuarticEase widget = new QuarticEase ();

            Assert.AreEqual(EasingMode.EaseOut, widget.EasingMode, "EasingMode does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class QuinticEaseTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_EasingFunctionBase ()
        {
            QuinticEase widget = new QuinticEase ();
            object retval;

            retval = widget.ReadLocalValue(EasingFunctionBase.EasingModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EasingFunctionBase.EasingModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_EasingFunctionBase ()
        {
            QuinticEase widget = new QuinticEase ();
            object retval;

            Assert.IsNotNull(EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (QuinticEase)), "#metadata should not be null for: EasingFunctionBase.EasingModeProperty.QuinticEase");
            retval = EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (QuinticEase)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for EasingFunctionBase.EasingModeProperty should be non-null value");
            Assert.IsInstanceOfType<EasingMode>(retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(EasingFunctionBase.EasingModeProperty);
            Assert.IsNotNull(retval, "GetValue(EasingFunctionBase.EasingModeProperty) should not have returned null");
            Assert.IsInstanceOfType<EasingMode>(retval, "GetValue(EasingFunctionBase.EasingModeProperty) is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "GetValue(EasingFunctionBase.EasingModeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_QuinticEase ()
        {
            QuinticEase widget = new QuinticEase ();

            Assert.AreEqual(EasingMode.EaseOut, widget.EasingMode, "EasingMode does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class ElasticEaseTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ElasticEase ()
        {
            ElasticEase widget = new ElasticEase ();
            object retval;

            retval = widget.ReadLocalValue(ElasticEase.OscillationsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ElasticEase.OscillationsProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ElasticEase.SpringinessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ElasticEase.SpringinessProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_EasingFunctionBase ()
        {
            ElasticEase widget = new ElasticEase ();
            object retval;

            retval = widget.ReadLocalValue(EasingFunctionBase.EasingModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EasingFunctionBase.EasingModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ElasticEase ()
        {
            ElasticEase widget = new ElasticEase ();
            object retval;

            Assert.IsNotNull(ElasticEase.OscillationsProperty.GetMetadata (typeof (ElasticEase)), "#metadata should not be null for: ElasticEase.OscillationsProperty.ElasticEase");
            retval = ElasticEase.OscillationsProperty.GetMetadata (typeof (ElasticEase)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ElasticEase.OscillationsProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "ElasticEase.OscillationsProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(3, retval, "ElasticEase.OscillationsProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ElasticEase.OscillationsProperty);
            Assert.IsNotNull(retval, "GetValue(ElasticEase.OscillationsProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(ElasticEase.OscillationsProperty) is not of the correct type");
            Assert.AreEqual(3, retval, "GetValue(ElasticEase.OscillationsProperty) does not match the default value");
            Assert.IsNotNull(ElasticEase.SpringinessProperty.GetMetadata (typeof (ElasticEase)), "#metadata should not be null for: ElasticEase.SpringinessProperty.ElasticEase");
            retval = ElasticEase.SpringinessProperty.GetMetadata (typeof (ElasticEase)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ElasticEase.SpringinessProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ElasticEase.SpringinessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 3, retval, "ElasticEase.SpringinessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ElasticEase.SpringinessProperty);
            Assert.IsNotNull(retval, "GetValue(ElasticEase.SpringinessProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ElasticEase.SpringinessProperty) is not of the correct type");
            Assert.AreEqual((double) 3, retval, "GetValue(ElasticEase.SpringinessProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_EasingFunctionBase ()
        {
            ElasticEase widget = new ElasticEase ();
            object retval;

            Assert.IsNotNull(EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (ElasticEase)), "#metadata should not be null for: EasingFunctionBase.EasingModeProperty.ElasticEase");
            retval = EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (ElasticEase)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for EasingFunctionBase.EasingModeProperty should be non-null value");
            Assert.IsInstanceOfType<EasingMode>(retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(EasingFunctionBase.EasingModeProperty);
            Assert.IsNotNull(retval, "GetValue(EasingFunctionBase.EasingModeProperty) should not have returned null");
            Assert.IsInstanceOfType<EasingMode>(retval, "GetValue(EasingFunctionBase.EasingModeProperty) is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "GetValue(EasingFunctionBase.EasingModeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_ElasticEase ()
        {
            ElasticEase widget = new ElasticEase ();

            Assert.AreEqual(3, widget.Oscillations, "Oscillations does not match the default value");
            Assert.AreEqual((double) 3, widget.Springiness, "Springiness does not match the default value");
            Assert.AreEqual(EasingMode.EaseOut, widget.EasingMode, "EasingMode does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class BounceEaseTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_BounceEase ()
        {
            BounceEase widget = new BounceEase ();
            object retval;

            retval = widget.ReadLocalValue(BounceEase.BouncesProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(BounceEase.BouncesProperty) should not have a value by default");
            retval = widget.ReadLocalValue(BounceEase.BouncinessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(BounceEase.BouncinessProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_EasingFunctionBase ()
        {
            BounceEase widget = new BounceEase ();
            object retval;

            retval = widget.ReadLocalValue(EasingFunctionBase.EasingModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EasingFunctionBase.EasingModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_BounceEase ()
        {
            BounceEase widget = new BounceEase ();
            object retval;

            Assert.IsNotNull(BounceEase.BouncesProperty.GetMetadata (typeof (BounceEase)), "#metadata should not be null for: BounceEase.BouncesProperty.BounceEase");
            retval = BounceEase.BouncesProperty.GetMetadata (typeof (BounceEase)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for BounceEase.BouncesProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "BounceEase.BouncesProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(3, retval, "BounceEase.BouncesProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(BounceEase.BouncesProperty);
            Assert.IsNotNull(retval, "GetValue(BounceEase.BouncesProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(BounceEase.BouncesProperty) is not of the correct type");
            Assert.AreEqual(3, retval, "GetValue(BounceEase.BouncesProperty) does not match the default value");
            Assert.IsNotNull(BounceEase.BouncinessProperty.GetMetadata (typeof (BounceEase)), "#metadata should not be null for: BounceEase.BouncinessProperty.BounceEase");
            retval = BounceEase.BouncinessProperty.GetMetadata (typeof (BounceEase)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for BounceEase.BouncinessProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "BounceEase.BouncinessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 2, retval, "BounceEase.BouncinessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(BounceEase.BouncinessProperty);
            Assert.IsNotNull(retval, "GetValue(BounceEase.BouncinessProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(BounceEase.BouncinessProperty) is not of the correct type");
            Assert.AreEqual((double) 2, retval, "GetValue(BounceEase.BouncinessProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_EasingFunctionBase ()
        {
            BounceEase widget = new BounceEase ();
            object retval;

            Assert.IsNotNull(EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (BounceEase)), "#metadata should not be null for: EasingFunctionBase.EasingModeProperty.BounceEase");
            retval = EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (BounceEase)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for EasingFunctionBase.EasingModeProperty should be non-null value");
            Assert.IsInstanceOfType<EasingMode>(retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(EasingFunctionBase.EasingModeProperty);
            Assert.IsNotNull(retval, "GetValue(EasingFunctionBase.EasingModeProperty) should not have returned null");
            Assert.IsInstanceOfType<EasingMode>(retval, "GetValue(EasingFunctionBase.EasingModeProperty) is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "GetValue(EasingFunctionBase.EasingModeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_BounceEase ()
        {
            BounceEase widget = new BounceEase ();

            Assert.AreEqual(3, widget.Bounces, "Bounces does not match the default value");
            Assert.AreEqual((double) 2, widget.Bounciness, "Bounciness does not match the default value");
            Assert.AreEqual(EasingMode.EaseOut, widget.EasingMode, "EasingMode does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class SineEaseTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_EasingFunctionBase ()
        {
            SineEase widget = new SineEase ();
            object retval;

            retval = widget.ReadLocalValue(EasingFunctionBase.EasingModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EasingFunctionBase.EasingModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_EasingFunctionBase ()
        {
            SineEase widget = new SineEase ();
            object retval;

            Assert.IsNotNull(EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (SineEase)), "#metadata should not be null for: EasingFunctionBase.EasingModeProperty.SineEase");
            retval = EasingFunctionBase.EasingModeProperty.GetMetadata (typeof (SineEase)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for EasingFunctionBase.EasingModeProperty should be non-null value");
            Assert.IsInstanceOfType<EasingMode>(retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "EasingFunctionBase.EasingModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(EasingFunctionBase.EasingModeProperty);
            Assert.IsNotNull(retval, "GetValue(EasingFunctionBase.EasingModeProperty) should not have returned null");
            Assert.IsInstanceOfType<EasingMode>(retval, "GetValue(EasingFunctionBase.EasingModeProperty) is not of the correct type");
            Assert.AreEqual(EasingMode.EaseOut, retval, "GetValue(EasingFunctionBase.EasingModeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_SineEase ()
        {
            SineEase widget = new SineEase ();

            Assert.AreEqual(EasingMode.EaseOut, widget.EasingMode, "EasingMode does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class BeginStoryboardTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_BeginStoryboard ()
        {
            BeginStoryboard widget = new BeginStoryboard ();
            object retval;

            retval = widget.ReadLocalValue(BeginStoryboard.StoryboardProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(BeginStoryboard.StoryboardProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_BeginStoryboard ()
        {
            BeginStoryboard widget = new BeginStoryboard ();
            object retval;

            Assert.IsNotNull(BeginStoryboard.StoryboardProperty.GetMetadata (typeof (BeginStoryboard)), "#metadata should not be null for: BeginStoryboard.StoryboardProperty.BeginStoryboard");
            retval = BeginStoryboard.StoryboardProperty.GetMetadata (typeof (BeginStoryboard)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for BeginStoryboard.StoryboardProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(BeginStoryboard.StoryboardProperty);
            Assert.IsNull(retval, "GetValue(BeginStoryboard.StoryboardProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_BeginStoryboard ()
        {
            BeginStoryboard widget = new BeginStoryboard ();

            Assert.IsNull(widget.Storyboard, "Storyboard should have returned null");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class StoryboardTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Storyboard ()
        {
            Storyboard widget = new Storyboard ();
            object retval;

            retval = widget.ReadLocalValue(Storyboard.TargetPropertyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Storyboard.TargetPropertyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Storyboard.TargetNameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Storyboard.TargetNameProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Timeline ()
        {
            Storyboard widget = new Storyboard ();
            object retval;

            retval = widget.ReadLocalValue(Timeline.AutoReverseProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.AutoReverseProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.BeginTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.BeginTimeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.DurationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.DurationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.SpeedRatioProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.SpeedRatioProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.FillBehaviorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.FillBehaviorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.RepeatBehaviorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.RepeatBehaviorProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Storyboard ()
        {
            Storyboard widget = new Storyboard ();
            object retval;

            Assert.IsNotNull(Storyboard.TargetPropertyProperty.GetMetadata (typeof (Storyboard)), "#metadata should not be null for: Storyboard.TargetPropertyProperty.Storyboard");
            retval = Storyboard.TargetPropertyProperty.GetMetadata (typeof (Storyboard)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Storyboard.TargetPropertyProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Storyboard.TargetPropertyProperty);
            Assert.IsNull(retval, "GetValue(Storyboard.TargetPropertyProperty) should have returned null");
            Assert.IsNotNull(Storyboard.TargetNameProperty.GetMetadata (typeof (Storyboard)), "#metadata should not be null for: Storyboard.TargetNameProperty.Storyboard");
            retval = Storyboard.TargetNameProperty.GetMetadata (typeof (Storyboard)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Storyboard.TargetNameProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Storyboard.TargetNameProperty);
            Assert.IsNull(retval, "GetValue(Storyboard.TargetNameProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Timeline ()
        {
            Storyboard widget = new Storyboard ();
            object retval;

            Assert.IsNotNull(Timeline.AutoReverseProperty.GetMetadata (typeof (Storyboard)), "#metadata should not be null for: Timeline.AutoReverseProperty.Storyboard");
            retval = Timeline.AutoReverseProperty.GetMetadata (typeof (Storyboard)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.AutoReverseProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Timeline.AutoReverseProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Timeline.AutoReverseProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.AutoReverseProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.AutoReverseProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Timeline.AutoReverseProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Timeline.AutoReverseProperty) does not match the default value");
            Assert.IsNotNull(Timeline.BeginTimeProperty.GetMetadata (typeof (Storyboard)), "#metadata should not be null for: Timeline.BeginTimeProperty.Storyboard");
            retval = Timeline.BeginTimeProperty.GetMetadata (typeof (Storyboard)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.BeginTimeProperty should be non-null value");
            Assert.IsInstanceOfType<TimeSpan>(retval, "Timeline.BeginTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "Timeline.BeginTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.BeginTimeProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.BeginTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<TimeSpan>(retval, "GetValue(Timeline.BeginTimeProperty) is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(Timeline.BeginTimeProperty) does not match the default value");
            Assert.IsNotNull(Timeline.DurationProperty.GetMetadata (typeof (Storyboard)), "#metadata should not be null for: Timeline.DurationProperty.Storyboard");
            retval = Timeline.DurationProperty.GetMetadata (typeof (Storyboard)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.DurationProperty should be non-null value");
            Assert.IsInstanceOfType<Duration>(retval, "Timeline.DurationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Automatic", retval.ToString (), "Timeline.DurationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.DurationProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.DurationProperty) should not have returned null");
            Assert.IsInstanceOfType<Duration>(retval, "GetValue(Timeline.DurationProperty) is not of the correct type");
            Assert.AreEqual("Automatic", retval.ToString (), "GetValue(Timeline.DurationProperty) does not match the default value");
            Assert.IsNotNull(Timeline.SpeedRatioProperty.GetMetadata (typeof (Storyboard)), "#metadata should not be null for: Timeline.SpeedRatioProperty.Storyboard");
            retval = Timeline.SpeedRatioProperty.GetMetadata (typeof (Storyboard)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.SpeedRatioProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Timeline.SpeedRatioProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Timeline.SpeedRatioProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.SpeedRatioProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.SpeedRatioProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Timeline.SpeedRatioProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Timeline.SpeedRatioProperty) does not match the default value");
            Assert.IsNotNull(Timeline.FillBehaviorProperty.GetMetadata (typeof (Storyboard)), "#metadata should not be null for: Timeline.FillBehaviorProperty.Storyboard");
            retval = Timeline.FillBehaviorProperty.GetMetadata (typeof (Storyboard)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.FillBehaviorProperty should be non-null value");
            Assert.IsInstanceOfType<FillBehavior>(retval, "Timeline.FillBehaviorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FillBehavior.HoldEnd, retval, "Timeline.FillBehaviorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.FillBehaviorProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.FillBehaviorProperty) should not have returned null");
            Assert.IsInstanceOfType<FillBehavior>(retval, "GetValue(Timeline.FillBehaviorProperty) is not of the correct type");
            Assert.AreEqual(FillBehavior.HoldEnd, retval, "GetValue(Timeline.FillBehaviorProperty) does not match the default value");
            Assert.IsNotNull(Timeline.RepeatBehaviorProperty.GetMetadata (typeof (Storyboard)), "#metadata should not be null for: Timeline.RepeatBehaviorProperty.Storyboard");
            retval = Timeline.RepeatBehaviorProperty.GetMetadata (typeof (Storyboard)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.RepeatBehaviorProperty should be non-null value");
            Assert.IsInstanceOfType<RepeatBehavior>(retval, "Timeline.RepeatBehaviorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("1x", retval.ToString (), "Timeline.RepeatBehaviorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.RepeatBehaviorProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.RepeatBehaviorProperty) should not have returned null");
            Assert.IsInstanceOfType<RepeatBehavior>(retval, "GetValue(Timeline.RepeatBehaviorProperty) is not of the correct type");
            Assert.AreEqual("1x", retval.ToString (), "GetValue(Timeline.RepeatBehaviorProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_Storyboard ()
        {
            Storyboard widget = new Storyboard ();

            Assert.IsNotNull(widget.Children, "Children should not have returned null");
            Assert.IsInstanceOfType<TimelineCollection>(widget.Children, "Children is not of the correct type");
            Assert.AreEqual(false, widget.AutoReverse, "AutoReverse does not match the default value");
            Assert.AreEqual("00:00:00", widget.BeginTime.ToString (), "BeginTime does not match the default value");
            Assert.AreEqual("Automatic", widget.Duration.ToString (), "Duration does not match the default value");
            Assert.AreEqual((double) 1, widget.SpeedRatio, "SpeedRatio does not match the default value");
            Assert.AreEqual(FillBehavior.HoldEnd, widget.FillBehavior, "FillBehavior does not match the default value");
            Assert.AreEqual("1x", widget.RepeatBehavior.ToString (), "RepeatBehavior does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class DoubleAnimationTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_DoubleAnimation ()
        {
            DoubleAnimation widget = new DoubleAnimation ();
            object retval;

            retval = widget.ReadLocalValue(DoubleAnimation.FromProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleAnimation.FromProperty) should not have a value by default");
            retval = widget.ReadLocalValue(DoubleAnimation.ToProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleAnimation.ToProperty) should not have a value by default");
            retval = widget.ReadLocalValue(DoubleAnimation.ByProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleAnimation.ByProperty) should not have a value by default");
            retval = widget.ReadLocalValue(DoubleAnimation.EasingFunctionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleAnimation.EasingFunctionProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Timeline ()
        {
            DoubleAnimation widget = new DoubleAnimation ();
            object retval;

            retval = widget.ReadLocalValue(Timeline.AutoReverseProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.AutoReverseProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.BeginTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.BeginTimeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.DurationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.DurationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.SpeedRatioProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.SpeedRatioProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.FillBehaviorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.FillBehaviorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.RepeatBehaviorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.RepeatBehaviorProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_DoubleAnimation ()
        {
            DoubleAnimation widget = new DoubleAnimation ();
            object retval;

            Assert.IsNotNull(DoubleAnimation.FromProperty.GetMetadata (typeof (DoubleAnimation)), "#metadata should not be null for: DoubleAnimation.FromProperty.DoubleAnimation");
            retval = DoubleAnimation.FromProperty.GetMetadata (typeof (DoubleAnimation)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for DoubleAnimation.FromProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(DoubleAnimation.FromProperty);
            Assert.IsNull(retval, "GetValue(DoubleAnimation.FromProperty) should have returned null");
            Assert.IsNotNull(DoubleAnimation.ToProperty.GetMetadata (typeof (DoubleAnimation)), "#metadata should not be null for: DoubleAnimation.ToProperty.DoubleAnimation");
            retval = DoubleAnimation.ToProperty.GetMetadata (typeof (DoubleAnimation)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for DoubleAnimation.ToProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(DoubleAnimation.ToProperty);
            Assert.IsNull(retval, "GetValue(DoubleAnimation.ToProperty) should have returned null");
            Assert.IsNotNull(DoubleAnimation.ByProperty.GetMetadata (typeof (DoubleAnimation)), "#metadata should not be null for: DoubleAnimation.ByProperty.DoubleAnimation");
            retval = DoubleAnimation.ByProperty.GetMetadata (typeof (DoubleAnimation)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for DoubleAnimation.ByProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(DoubleAnimation.ByProperty);
            Assert.IsNull(retval, "GetValue(DoubleAnimation.ByProperty) should have returned null");
            Assert.IsNotNull(DoubleAnimation.EasingFunctionProperty.GetMetadata (typeof (DoubleAnimation)), "#metadata should not be null for: DoubleAnimation.EasingFunctionProperty.DoubleAnimation");
            retval = DoubleAnimation.EasingFunctionProperty.GetMetadata (typeof (DoubleAnimation)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for DoubleAnimation.EasingFunctionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(DoubleAnimation.EasingFunctionProperty);
            Assert.IsNull(retval, "GetValue(DoubleAnimation.EasingFunctionProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Timeline ()
        {
            DoubleAnimation widget = new DoubleAnimation ();
            object retval;

            Assert.IsNotNull(Timeline.AutoReverseProperty.GetMetadata (typeof (DoubleAnimation)), "#metadata should not be null for: Timeline.AutoReverseProperty.DoubleAnimation");
            retval = Timeline.AutoReverseProperty.GetMetadata (typeof (DoubleAnimation)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.AutoReverseProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Timeline.AutoReverseProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Timeline.AutoReverseProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.AutoReverseProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.AutoReverseProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Timeline.AutoReverseProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Timeline.AutoReverseProperty) does not match the default value");
            Assert.IsNotNull(Timeline.BeginTimeProperty.GetMetadata (typeof (DoubleAnimation)), "#metadata should not be null for: Timeline.BeginTimeProperty.DoubleAnimation");
            retval = Timeline.BeginTimeProperty.GetMetadata (typeof (DoubleAnimation)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.BeginTimeProperty should be non-null value");
            Assert.IsInstanceOfType<TimeSpan>(retval, "Timeline.BeginTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "Timeline.BeginTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.BeginTimeProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.BeginTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<TimeSpan>(retval, "GetValue(Timeline.BeginTimeProperty) is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(Timeline.BeginTimeProperty) does not match the default value");
            Assert.IsNotNull(Timeline.DurationProperty.GetMetadata (typeof (DoubleAnimation)), "#metadata should not be null for: Timeline.DurationProperty.DoubleAnimation");
            retval = Timeline.DurationProperty.GetMetadata (typeof (DoubleAnimation)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.DurationProperty should be non-null value");
            Assert.IsInstanceOfType<Duration>(retval, "Timeline.DurationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Automatic", retval.ToString (), "Timeline.DurationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.DurationProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.DurationProperty) should not have returned null");
            Assert.IsInstanceOfType<Duration>(retval, "GetValue(Timeline.DurationProperty) is not of the correct type");
            Assert.AreEqual("Automatic", retval.ToString (), "GetValue(Timeline.DurationProperty) does not match the default value");
            Assert.IsNotNull(Timeline.SpeedRatioProperty.GetMetadata (typeof (DoubleAnimation)), "#metadata should not be null for: Timeline.SpeedRatioProperty.DoubleAnimation");
            retval = Timeline.SpeedRatioProperty.GetMetadata (typeof (DoubleAnimation)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.SpeedRatioProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Timeline.SpeedRatioProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Timeline.SpeedRatioProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.SpeedRatioProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.SpeedRatioProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Timeline.SpeedRatioProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Timeline.SpeedRatioProperty) does not match the default value");
            Assert.IsNotNull(Timeline.FillBehaviorProperty.GetMetadata (typeof (DoubleAnimation)), "#metadata should not be null for: Timeline.FillBehaviorProperty.DoubleAnimation");
            retval = Timeline.FillBehaviorProperty.GetMetadata (typeof (DoubleAnimation)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.FillBehaviorProperty should be non-null value");
            Assert.IsInstanceOfType<FillBehavior>(retval, "Timeline.FillBehaviorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FillBehavior.HoldEnd, retval, "Timeline.FillBehaviorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.FillBehaviorProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.FillBehaviorProperty) should not have returned null");
            Assert.IsInstanceOfType<FillBehavior>(retval, "GetValue(Timeline.FillBehaviorProperty) is not of the correct type");
            Assert.AreEqual(FillBehavior.HoldEnd, retval, "GetValue(Timeline.FillBehaviorProperty) does not match the default value");
            Assert.IsNotNull(Timeline.RepeatBehaviorProperty.GetMetadata (typeof (DoubleAnimation)), "#metadata should not be null for: Timeline.RepeatBehaviorProperty.DoubleAnimation");
            retval = Timeline.RepeatBehaviorProperty.GetMetadata (typeof (DoubleAnimation)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.RepeatBehaviorProperty should be non-null value");
            Assert.IsInstanceOfType<RepeatBehavior>(retval, "Timeline.RepeatBehaviorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("1x", retval.ToString (), "Timeline.RepeatBehaviorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.RepeatBehaviorProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.RepeatBehaviorProperty) should not have returned null");
            Assert.IsInstanceOfType<RepeatBehavior>(retval, "GetValue(Timeline.RepeatBehaviorProperty) is not of the correct type");
            Assert.AreEqual("1x", retval.ToString (), "GetValue(Timeline.RepeatBehaviorProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_DoubleAnimation ()
        {
            DoubleAnimation widget = new DoubleAnimation ();

            Assert.IsNull(widget.From, "From should have returned null");
            Assert.IsNull(widget.To, "To should have returned null");
            Assert.IsNull(widget.By, "By should have returned null");
            Assert.IsNull(widget.EasingFunction, "EasingFunction should have returned null");
            Assert.AreEqual(false, widget.AutoReverse, "AutoReverse does not match the default value");
            Assert.AreEqual("00:00:00", widget.BeginTime.ToString (), "BeginTime does not match the default value");
            Assert.AreEqual("Automatic", widget.Duration.ToString (), "Duration does not match the default value");
            Assert.AreEqual((double) 1, widget.SpeedRatio, "SpeedRatio does not match the default value");
            Assert.AreEqual(FillBehavior.HoldEnd, widget.FillBehavior, "FillBehavior does not match the default value");
            Assert.AreEqual("1x", widget.RepeatBehavior.ToString (), "RepeatBehavior does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class ColorAnimationTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ColorAnimation ()
        {
            ColorAnimation widget = new ColorAnimation ();
            object retval;

            retval = widget.ReadLocalValue(ColorAnimation.FromProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorAnimation.FromProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ColorAnimation.ToProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorAnimation.ToProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ColorAnimation.ByProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorAnimation.ByProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ColorAnimation.EasingFunctionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorAnimation.EasingFunctionProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Timeline ()
        {
            ColorAnimation widget = new ColorAnimation ();
            object retval;

            retval = widget.ReadLocalValue(Timeline.AutoReverseProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.AutoReverseProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.BeginTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.BeginTimeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.DurationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.DurationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.SpeedRatioProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.SpeedRatioProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.FillBehaviorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.FillBehaviorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.RepeatBehaviorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.RepeatBehaviorProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ColorAnimation ()
        {
            ColorAnimation widget = new ColorAnimation ();
            object retval;

            Assert.IsNotNull(ColorAnimation.FromProperty.GetMetadata (typeof (ColorAnimation)), "#metadata should not be null for: ColorAnimation.FromProperty.ColorAnimation");
            retval = ColorAnimation.FromProperty.GetMetadata (typeof (ColorAnimation)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ColorAnimation.FromProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ColorAnimation.FromProperty);
            Assert.IsNull(retval, "GetValue(ColorAnimation.FromProperty) should have returned null");
            Assert.IsNotNull(ColorAnimation.ToProperty.GetMetadata (typeof (ColorAnimation)), "#metadata should not be null for: ColorAnimation.ToProperty.ColorAnimation");
            retval = ColorAnimation.ToProperty.GetMetadata (typeof (ColorAnimation)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ColorAnimation.ToProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ColorAnimation.ToProperty);
            Assert.IsNull(retval, "GetValue(ColorAnimation.ToProperty) should have returned null");
            Assert.IsNotNull(ColorAnimation.ByProperty.GetMetadata (typeof (ColorAnimation)), "#metadata should not be null for: ColorAnimation.ByProperty.ColorAnimation");
            retval = ColorAnimation.ByProperty.GetMetadata (typeof (ColorAnimation)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ColorAnimation.ByProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ColorAnimation.ByProperty);
            Assert.IsNull(retval, "GetValue(ColorAnimation.ByProperty) should have returned null");
            Assert.IsNotNull(ColorAnimation.EasingFunctionProperty.GetMetadata (typeof (ColorAnimation)), "#metadata should not be null for: ColorAnimation.EasingFunctionProperty.ColorAnimation");
            retval = ColorAnimation.EasingFunctionProperty.GetMetadata (typeof (ColorAnimation)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ColorAnimation.EasingFunctionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ColorAnimation.EasingFunctionProperty);
            Assert.IsNull(retval, "GetValue(ColorAnimation.EasingFunctionProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Timeline ()
        {
            ColorAnimation widget = new ColorAnimation ();
            object retval;

            Assert.IsNotNull(Timeline.AutoReverseProperty.GetMetadata (typeof (ColorAnimation)), "#metadata should not be null for: Timeline.AutoReverseProperty.ColorAnimation");
            retval = Timeline.AutoReverseProperty.GetMetadata (typeof (ColorAnimation)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.AutoReverseProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Timeline.AutoReverseProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Timeline.AutoReverseProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.AutoReverseProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.AutoReverseProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Timeline.AutoReverseProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Timeline.AutoReverseProperty) does not match the default value");
            Assert.IsNotNull(Timeline.BeginTimeProperty.GetMetadata (typeof (ColorAnimation)), "#metadata should not be null for: Timeline.BeginTimeProperty.ColorAnimation");
            retval = Timeline.BeginTimeProperty.GetMetadata (typeof (ColorAnimation)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.BeginTimeProperty should be non-null value");
            Assert.IsInstanceOfType<TimeSpan>(retval, "Timeline.BeginTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "Timeline.BeginTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.BeginTimeProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.BeginTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<TimeSpan>(retval, "GetValue(Timeline.BeginTimeProperty) is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(Timeline.BeginTimeProperty) does not match the default value");
            Assert.IsNotNull(Timeline.DurationProperty.GetMetadata (typeof (ColorAnimation)), "#metadata should not be null for: Timeline.DurationProperty.ColorAnimation");
            retval = Timeline.DurationProperty.GetMetadata (typeof (ColorAnimation)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.DurationProperty should be non-null value");
            Assert.IsInstanceOfType<Duration>(retval, "Timeline.DurationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Automatic", retval.ToString (), "Timeline.DurationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.DurationProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.DurationProperty) should not have returned null");
            Assert.IsInstanceOfType<Duration>(retval, "GetValue(Timeline.DurationProperty) is not of the correct type");
            Assert.AreEqual("Automatic", retval.ToString (), "GetValue(Timeline.DurationProperty) does not match the default value");
            Assert.IsNotNull(Timeline.SpeedRatioProperty.GetMetadata (typeof (ColorAnimation)), "#metadata should not be null for: Timeline.SpeedRatioProperty.ColorAnimation");
            retval = Timeline.SpeedRatioProperty.GetMetadata (typeof (ColorAnimation)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.SpeedRatioProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Timeline.SpeedRatioProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Timeline.SpeedRatioProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.SpeedRatioProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.SpeedRatioProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Timeline.SpeedRatioProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Timeline.SpeedRatioProperty) does not match the default value");
            Assert.IsNotNull(Timeline.FillBehaviorProperty.GetMetadata (typeof (ColorAnimation)), "#metadata should not be null for: Timeline.FillBehaviorProperty.ColorAnimation");
            retval = Timeline.FillBehaviorProperty.GetMetadata (typeof (ColorAnimation)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.FillBehaviorProperty should be non-null value");
            Assert.IsInstanceOfType<FillBehavior>(retval, "Timeline.FillBehaviorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FillBehavior.HoldEnd, retval, "Timeline.FillBehaviorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.FillBehaviorProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.FillBehaviorProperty) should not have returned null");
            Assert.IsInstanceOfType<FillBehavior>(retval, "GetValue(Timeline.FillBehaviorProperty) is not of the correct type");
            Assert.AreEqual(FillBehavior.HoldEnd, retval, "GetValue(Timeline.FillBehaviorProperty) does not match the default value");
            Assert.IsNotNull(Timeline.RepeatBehaviorProperty.GetMetadata (typeof (ColorAnimation)), "#metadata should not be null for: Timeline.RepeatBehaviorProperty.ColorAnimation");
            retval = Timeline.RepeatBehaviorProperty.GetMetadata (typeof (ColorAnimation)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.RepeatBehaviorProperty should be non-null value");
            Assert.IsInstanceOfType<RepeatBehavior>(retval, "Timeline.RepeatBehaviorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("1x", retval.ToString (), "Timeline.RepeatBehaviorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.RepeatBehaviorProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.RepeatBehaviorProperty) should not have returned null");
            Assert.IsInstanceOfType<RepeatBehavior>(retval, "GetValue(Timeline.RepeatBehaviorProperty) is not of the correct type");
            Assert.AreEqual("1x", retval.ToString (), "GetValue(Timeline.RepeatBehaviorProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_ColorAnimation ()
        {
            ColorAnimation widget = new ColorAnimation ();

            Assert.IsNull(widget.From, "From should have returned null");
            Assert.IsNull(widget.To, "To should have returned null");
            Assert.IsNull(widget.By, "By should have returned null");
            Assert.IsNull(widget.EasingFunction, "EasingFunction should have returned null");
            Assert.AreEqual(false, widget.AutoReverse, "AutoReverse does not match the default value");
            Assert.AreEqual("00:00:00", widget.BeginTime.ToString (), "BeginTime does not match the default value");
            Assert.AreEqual("Automatic", widget.Duration.ToString (), "Duration does not match the default value");
            Assert.AreEqual((double) 1, widget.SpeedRatio, "SpeedRatio does not match the default value");
            Assert.AreEqual(FillBehavior.HoldEnd, widget.FillBehavior, "FillBehavior does not match the default value");
            Assert.AreEqual("1x", widget.RepeatBehavior.ToString (), "RepeatBehavior does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class PointAnimationTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_PointAnimation ()
        {
            PointAnimation widget = new PointAnimation ();
            object retval;

            retval = widget.ReadLocalValue(PointAnimation.FromProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointAnimation.FromProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PointAnimation.ToProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointAnimation.ToProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PointAnimation.ByProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointAnimation.ByProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PointAnimation.EasingFunctionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointAnimation.EasingFunctionProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Timeline ()
        {
            PointAnimation widget = new PointAnimation ();
            object retval;

            retval = widget.ReadLocalValue(Timeline.AutoReverseProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.AutoReverseProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.BeginTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.BeginTimeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.DurationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.DurationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.SpeedRatioProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.SpeedRatioProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.FillBehaviorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.FillBehaviorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.RepeatBehaviorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.RepeatBehaviorProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_PointAnimation ()
        {
            PointAnimation widget = new PointAnimation ();
            object retval;

            Assert.IsNotNull(PointAnimation.FromProperty.GetMetadata (typeof (PointAnimation)), "#metadata should not be null for: PointAnimation.FromProperty.PointAnimation");
            retval = PointAnimation.FromProperty.GetMetadata (typeof (PointAnimation)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for PointAnimation.FromProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(PointAnimation.FromProperty);
            Assert.IsNull(retval, "GetValue(PointAnimation.FromProperty) should have returned null");
            Assert.IsNotNull(PointAnimation.ToProperty.GetMetadata (typeof (PointAnimation)), "#metadata should not be null for: PointAnimation.ToProperty.PointAnimation");
            retval = PointAnimation.ToProperty.GetMetadata (typeof (PointAnimation)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for PointAnimation.ToProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(PointAnimation.ToProperty);
            Assert.IsNull(retval, "GetValue(PointAnimation.ToProperty) should have returned null");
            Assert.IsNotNull(PointAnimation.ByProperty.GetMetadata (typeof (PointAnimation)), "#metadata should not be null for: PointAnimation.ByProperty.PointAnimation");
            retval = PointAnimation.ByProperty.GetMetadata (typeof (PointAnimation)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for PointAnimation.ByProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(PointAnimation.ByProperty);
            Assert.IsNull(retval, "GetValue(PointAnimation.ByProperty) should have returned null");
            Assert.IsNotNull(PointAnimation.EasingFunctionProperty.GetMetadata (typeof (PointAnimation)), "#metadata should not be null for: PointAnimation.EasingFunctionProperty.PointAnimation");
            retval = PointAnimation.EasingFunctionProperty.GetMetadata (typeof (PointAnimation)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for PointAnimation.EasingFunctionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(PointAnimation.EasingFunctionProperty);
            Assert.IsNull(retval, "GetValue(PointAnimation.EasingFunctionProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Timeline ()
        {
            PointAnimation widget = new PointAnimation ();
            object retval;

            Assert.IsNotNull(Timeline.AutoReverseProperty.GetMetadata (typeof (PointAnimation)), "#metadata should not be null for: Timeline.AutoReverseProperty.PointAnimation");
            retval = Timeline.AutoReverseProperty.GetMetadata (typeof (PointAnimation)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.AutoReverseProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Timeline.AutoReverseProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Timeline.AutoReverseProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.AutoReverseProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.AutoReverseProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Timeline.AutoReverseProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Timeline.AutoReverseProperty) does not match the default value");
            Assert.IsNotNull(Timeline.BeginTimeProperty.GetMetadata (typeof (PointAnimation)), "#metadata should not be null for: Timeline.BeginTimeProperty.PointAnimation");
            retval = Timeline.BeginTimeProperty.GetMetadata (typeof (PointAnimation)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.BeginTimeProperty should be non-null value");
            Assert.IsInstanceOfType<TimeSpan>(retval, "Timeline.BeginTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "Timeline.BeginTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.BeginTimeProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.BeginTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<TimeSpan>(retval, "GetValue(Timeline.BeginTimeProperty) is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(Timeline.BeginTimeProperty) does not match the default value");
            Assert.IsNotNull(Timeline.DurationProperty.GetMetadata (typeof (PointAnimation)), "#metadata should not be null for: Timeline.DurationProperty.PointAnimation");
            retval = Timeline.DurationProperty.GetMetadata (typeof (PointAnimation)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.DurationProperty should be non-null value");
            Assert.IsInstanceOfType<Duration>(retval, "Timeline.DurationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Automatic", retval.ToString (), "Timeline.DurationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.DurationProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.DurationProperty) should not have returned null");
            Assert.IsInstanceOfType<Duration>(retval, "GetValue(Timeline.DurationProperty) is not of the correct type");
            Assert.AreEqual("Automatic", retval.ToString (), "GetValue(Timeline.DurationProperty) does not match the default value");
            Assert.IsNotNull(Timeline.SpeedRatioProperty.GetMetadata (typeof (PointAnimation)), "#metadata should not be null for: Timeline.SpeedRatioProperty.PointAnimation");
            retval = Timeline.SpeedRatioProperty.GetMetadata (typeof (PointAnimation)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.SpeedRatioProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Timeline.SpeedRatioProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Timeline.SpeedRatioProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.SpeedRatioProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.SpeedRatioProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Timeline.SpeedRatioProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Timeline.SpeedRatioProperty) does not match the default value");
            Assert.IsNotNull(Timeline.FillBehaviorProperty.GetMetadata (typeof (PointAnimation)), "#metadata should not be null for: Timeline.FillBehaviorProperty.PointAnimation");
            retval = Timeline.FillBehaviorProperty.GetMetadata (typeof (PointAnimation)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.FillBehaviorProperty should be non-null value");
            Assert.IsInstanceOfType<FillBehavior>(retval, "Timeline.FillBehaviorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FillBehavior.HoldEnd, retval, "Timeline.FillBehaviorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.FillBehaviorProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.FillBehaviorProperty) should not have returned null");
            Assert.IsInstanceOfType<FillBehavior>(retval, "GetValue(Timeline.FillBehaviorProperty) is not of the correct type");
            Assert.AreEqual(FillBehavior.HoldEnd, retval, "GetValue(Timeline.FillBehaviorProperty) does not match the default value");
            Assert.IsNotNull(Timeline.RepeatBehaviorProperty.GetMetadata (typeof (PointAnimation)), "#metadata should not be null for: Timeline.RepeatBehaviorProperty.PointAnimation");
            retval = Timeline.RepeatBehaviorProperty.GetMetadata (typeof (PointAnimation)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.RepeatBehaviorProperty should be non-null value");
            Assert.IsInstanceOfType<RepeatBehavior>(retval, "Timeline.RepeatBehaviorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("1x", retval.ToString (), "Timeline.RepeatBehaviorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.RepeatBehaviorProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.RepeatBehaviorProperty) should not have returned null");
            Assert.IsInstanceOfType<RepeatBehavior>(retval, "GetValue(Timeline.RepeatBehaviorProperty) is not of the correct type");
            Assert.AreEqual("1x", retval.ToString (), "GetValue(Timeline.RepeatBehaviorProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_PointAnimation ()
        {
            PointAnimation widget = new PointAnimation ();

            Assert.IsNull(widget.From, "From should have returned null");
            Assert.IsNull(widget.To, "To should have returned null");
            Assert.IsNull(widget.By, "By should have returned null");
            Assert.IsNull(widget.EasingFunction, "EasingFunction should have returned null");
            Assert.AreEqual(false, widget.AutoReverse, "AutoReverse does not match the default value");
            Assert.AreEqual("00:00:00", widget.BeginTime.ToString (), "BeginTime does not match the default value");
            Assert.AreEqual("Automatic", widget.Duration.ToString (), "Duration does not match the default value");
            Assert.AreEqual((double) 1, widget.SpeedRatio, "SpeedRatio does not match the default value");
            Assert.AreEqual(FillBehavior.HoldEnd, widget.FillBehavior, "FillBehavior does not match the default value");
            Assert.AreEqual("1x", widget.RepeatBehavior.ToString (), "RepeatBehavior does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class KeySplineTest
    {
        [TestMethod]
        public void Test_PropertyGetter_KeySpline ()
        {
            KeySpline widget = new KeySpline ();

            Assert.AreEqual("0,0", widget.ControlPoint1.ToString (), "ControlPoint1 does not match the default value");
            Assert.AreEqual("1,1", widget.ControlPoint2.ToString (), "ControlPoint2 does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class ColorKeyFrameCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_ColorKeyFrameCollection ()
        {
            ColorKeyFrameCollection widget = new ColorKeyFrameCollection ();

            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<ColorKeyFrameCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class DoubleKeyFrameCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_DoubleKeyFrameCollection ()
        {
            DoubleKeyFrameCollection widget = new DoubleKeyFrameCollection ();

            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<DoubleKeyFrameCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class PointKeyFrameCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_PointKeyFrameCollection ()
        {
            PointKeyFrameCollection widget = new PointKeyFrameCollection ();

            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<PointKeyFrameCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class ObjectKeyFrameCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_ObjectKeyFrameCollection ()
        {
            ObjectKeyFrameCollection widget = new ObjectKeyFrameCollection ();

            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<ObjectKeyFrameCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class DoubleAnimationUsingKeyFramesTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Timeline ()
        {
            DoubleAnimationUsingKeyFrames widget = new DoubleAnimationUsingKeyFrames ();
            object retval;

            retval = widget.ReadLocalValue(Timeline.AutoReverseProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.AutoReverseProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.BeginTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.BeginTimeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.DurationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.DurationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.SpeedRatioProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.SpeedRatioProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.FillBehaviorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.FillBehaviorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.RepeatBehaviorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.RepeatBehaviorProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Timeline ()
        {
            DoubleAnimationUsingKeyFrames widget = new DoubleAnimationUsingKeyFrames ();
            object retval;

            Assert.IsNotNull(Timeline.AutoReverseProperty.GetMetadata (typeof (DoubleAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.AutoReverseProperty.DoubleAnimationUsingKeyFrames");
            retval = Timeline.AutoReverseProperty.GetMetadata (typeof (DoubleAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.AutoReverseProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Timeline.AutoReverseProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Timeline.AutoReverseProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.AutoReverseProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.AutoReverseProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Timeline.AutoReverseProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Timeline.AutoReverseProperty) does not match the default value");
            Assert.IsNotNull(Timeline.BeginTimeProperty.GetMetadata (typeof (DoubleAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.BeginTimeProperty.DoubleAnimationUsingKeyFrames");
            retval = Timeline.BeginTimeProperty.GetMetadata (typeof (DoubleAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.BeginTimeProperty should be non-null value");
            Assert.IsInstanceOfType<TimeSpan>(retval, "Timeline.BeginTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "Timeline.BeginTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.BeginTimeProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.BeginTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<TimeSpan>(retval, "GetValue(Timeline.BeginTimeProperty) is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(Timeline.BeginTimeProperty) does not match the default value");
            Assert.IsNotNull(Timeline.DurationProperty.GetMetadata (typeof (DoubleAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.DurationProperty.DoubleAnimationUsingKeyFrames");
            retval = Timeline.DurationProperty.GetMetadata (typeof (DoubleAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.DurationProperty should be non-null value");
            Assert.IsInstanceOfType<Duration>(retval, "Timeline.DurationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Automatic", retval.ToString (), "Timeline.DurationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.DurationProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.DurationProperty) should not have returned null");
            Assert.IsInstanceOfType<Duration>(retval, "GetValue(Timeline.DurationProperty) is not of the correct type");
            Assert.AreEqual("Automatic", retval.ToString (), "GetValue(Timeline.DurationProperty) does not match the default value");
            Assert.IsNotNull(Timeline.SpeedRatioProperty.GetMetadata (typeof (DoubleAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.SpeedRatioProperty.DoubleAnimationUsingKeyFrames");
            retval = Timeline.SpeedRatioProperty.GetMetadata (typeof (DoubleAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.SpeedRatioProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Timeline.SpeedRatioProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Timeline.SpeedRatioProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.SpeedRatioProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.SpeedRatioProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Timeline.SpeedRatioProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Timeline.SpeedRatioProperty) does not match the default value");
            Assert.IsNotNull(Timeline.FillBehaviorProperty.GetMetadata (typeof (DoubleAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.FillBehaviorProperty.DoubleAnimationUsingKeyFrames");
            retval = Timeline.FillBehaviorProperty.GetMetadata (typeof (DoubleAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.FillBehaviorProperty should be non-null value");
            Assert.IsInstanceOfType<FillBehavior>(retval, "Timeline.FillBehaviorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FillBehavior.HoldEnd, retval, "Timeline.FillBehaviorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.FillBehaviorProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.FillBehaviorProperty) should not have returned null");
            Assert.IsInstanceOfType<FillBehavior>(retval, "GetValue(Timeline.FillBehaviorProperty) is not of the correct type");
            Assert.AreEqual(FillBehavior.HoldEnd, retval, "GetValue(Timeline.FillBehaviorProperty) does not match the default value");
            Assert.IsNotNull(Timeline.RepeatBehaviorProperty.GetMetadata (typeof (DoubleAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.RepeatBehaviorProperty.DoubleAnimationUsingKeyFrames");
            retval = Timeline.RepeatBehaviorProperty.GetMetadata (typeof (DoubleAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.RepeatBehaviorProperty should be non-null value");
            Assert.IsInstanceOfType<RepeatBehavior>(retval, "Timeline.RepeatBehaviorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("1x", retval.ToString (), "Timeline.RepeatBehaviorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.RepeatBehaviorProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.RepeatBehaviorProperty) should not have returned null");
            Assert.IsInstanceOfType<RepeatBehavior>(retval, "GetValue(Timeline.RepeatBehaviorProperty) is not of the correct type");
            Assert.AreEqual("1x", retval.ToString (), "GetValue(Timeline.RepeatBehaviorProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_DoubleAnimationUsingKeyFrames ()
        {
            DoubleAnimationUsingKeyFrames widget = new DoubleAnimationUsingKeyFrames ();

            Assert.IsNotNull(widget.KeyFrames, "KeyFrames should not have returned null");
            Assert.IsInstanceOfType<DoubleKeyFrameCollection>(widget.KeyFrames, "KeyFrames is not of the correct type");
            Assert.AreEqual(false, widget.AutoReverse, "AutoReverse does not match the default value");
            Assert.AreEqual("00:00:00", widget.BeginTime.ToString (), "BeginTime does not match the default value");
            Assert.AreEqual("Automatic", widget.Duration.ToString (), "Duration does not match the default value");
            Assert.AreEqual((double) 1, widget.SpeedRatio, "SpeedRatio does not match the default value");
            Assert.AreEqual(FillBehavior.HoldEnd, widget.FillBehavior, "FillBehavior does not match the default value");
            Assert.AreEqual("1x", widget.RepeatBehavior.ToString (), "RepeatBehavior does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class DiscreteDoubleKeyFrameTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_DoubleKeyFrame ()
        {
            DiscreteDoubleKeyFrame widget = new DiscreteDoubleKeyFrame ();
            object retval;

            retval = widget.ReadLocalValue(DoubleKeyFrame.ValueProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleKeyFrame.ValueProperty) should not have a value by default");
            retval = widget.ReadLocalValue(DoubleKeyFrame.KeyTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleKeyFrame.KeyTimeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_DoubleKeyFrame ()
        {
            DiscreteDoubleKeyFrame widget = new DiscreteDoubleKeyFrame ();
            object retval;

            Assert.IsNotNull(DoubleKeyFrame.ValueProperty.GetMetadata (typeof (DiscreteDoubleKeyFrame)), "#metadata should not be null for: DoubleKeyFrame.ValueProperty.DiscreteDoubleKeyFrame");
            retval = DoubleKeyFrame.ValueProperty.GetMetadata (typeof (DiscreteDoubleKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for DoubleKeyFrame.ValueProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "DoubleKeyFrame.ValueProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "DoubleKeyFrame.ValueProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(DoubleKeyFrame.ValueProperty);
            Assert.IsNotNull(retval, "GetValue(DoubleKeyFrame.ValueProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(DoubleKeyFrame.ValueProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(DoubleKeyFrame.ValueProperty) does not match the default value");
            Assert.IsNotNull(DoubleKeyFrame.KeyTimeProperty.GetMetadata (typeof (DiscreteDoubleKeyFrame)), "#metadata should not be null for: DoubleKeyFrame.KeyTimeProperty.DiscreteDoubleKeyFrame");
            retval = DoubleKeyFrame.KeyTimeProperty.GetMetadata (typeof (DiscreteDoubleKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for DoubleKeyFrame.KeyTimeProperty should be non-null value");
            Assert.IsInstanceOfType<KeyTime>(retval, "DoubleKeyFrame.KeyTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "DoubleKeyFrame.KeyTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(DoubleKeyFrame.KeyTimeProperty);
            Assert.IsNotNull(retval, "GetValue(DoubleKeyFrame.KeyTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyTime>(retval, "GetValue(DoubleKeyFrame.KeyTimeProperty) is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "GetValue(DoubleKeyFrame.KeyTimeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_DiscreteDoubleKeyFrame ()
        {
            DiscreteDoubleKeyFrame widget = new DiscreteDoubleKeyFrame ();

            Assert.AreEqual((double) 0, widget.Value, "Value does not match the default value");
            Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class LinearDoubleKeyFrameTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_DoubleKeyFrame ()
        {
            LinearDoubleKeyFrame widget = new LinearDoubleKeyFrame ();
            object retval;

            retval = widget.ReadLocalValue(DoubleKeyFrame.ValueProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleKeyFrame.ValueProperty) should not have a value by default");
            retval = widget.ReadLocalValue(DoubleKeyFrame.KeyTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleKeyFrame.KeyTimeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_DoubleKeyFrame ()
        {
            LinearDoubleKeyFrame widget = new LinearDoubleKeyFrame ();
            object retval;

            Assert.IsNotNull(DoubleKeyFrame.ValueProperty.GetMetadata (typeof (LinearDoubleKeyFrame)), "#metadata should not be null for: DoubleKeyFrame.ValueProperty.LinearDoubleKeyFrame");
            retval = DoubleKeyFrame.ValueProperty.GetMetadata (typeof (LinearDoubleKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for DoubleKeyFrame.ValueProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "DoubleKeyFrame.ValueProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "DoubleKeyFrame.ValueProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(DoubleKeyFrame.ValueProperty);
            Assert.IsNotNull(retval, "GetValue(DoubleKeyFrame.ValueProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(DoubleKeyFrame.ValueProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(DoubleKeyFrame.ValueProperty) does not match the default value");
            Assert.IsNotNull(DoubleKeyFrame.KeyTimeProperty.GetMetadata (typeof (LinearDoubleKeyFrame)), "#metadata should not be null for: DoubleKeyFrame.KeyTimeProperty.LinearDoubleKeyFrame");
            retval = DoubleKeyFrame.KeyTimeProperty.GetMetadata (typeof (LinearDoubleKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for DoubleKeyFrame.KeyTimeProperty should be non-null value");
            Assert.IsInstanceOfType<KeyTime>(retval, "DoubleKeyFrame.KeyTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "DoubleKeyFrame.KeyTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(DoubleKeyFrame.KeyTimeProperty);
            Assert.IsNotNull(retval, "GetValue(DoubleKeyFrame.KeyTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyTime>(retval, "GetValue(DoubleKeyFrame.KeyTimeProperty) is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "GetValue(DoubleKeyFrame.KeyTimeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_LinearDoubleKeyFrame ()
        {
            LinearDoubleKeyFrame widget = new LinearDoubleKeyFrame ();

            Assert.AreEqual((double) 0, widget.Value, "Value does not match the default value");
            Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class SplineDoubleKeyFrameTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_SplineDoubleKeyFrame ()
        {
            SplineDoubleKeyFrame widget = new SplineDoubleKeyFrame ();
            object retval;

            retval = widget.ReadLocalValue(SplineDoubleKeyFrame.KeySplineProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(SplineDoubleKeyFrame.KeySplineProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_DoubleKeyFrame ()
        {
            SplineDoubleKeyFrame widget = new SplineDoubleKeyFrame ();
            object retval;

            retval = widget.ReadLocalValue(DoubleKeyFrame.ValueProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleKeyFrame.ValueProperty) should not have a value by default");
            retval = widget.ReadLocalValue(DoubleKeyFrame.KeyTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleKeyFrame.KeyTimeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_SplineDoubleKeyFrame ()
        {
            SplineDoubleKeyFrame widget = new SplineDoubleKeyFrame ();
            object retval;

            Assert.IsNotNull(SplineDoubleKeyFrame.KeySplineProperty.GetMetadata (typeof (SplineDoubleKeyFrame)), "#metadata should not be null for: SplineDoubleKeyFrame.KeySplineProperty.SplineDoubleKeyFrame");
            retval = SplineDoubleKeyFrame.KeySplineProperty.GetMetadata (typeof (SplineDoubleKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for SplineDoubleKeyFrame.KeySplineProperty should be non-null value");
            Assert.IsInstanceOfType<KeySpline>(retval, "SplineDoubleKeyFrame.KeySplineProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(SplineDoubleKeyFrame.KeySplineProperty);
            Assert.IsNotNull(retval, "GetValue(SplineDoubleKeyFrame.KeySplineProperty) should not have returned null");
            Assert.IsInstanceOfType<KeySpline>(retval, "GetValue(SplineDoubleKeyFrame.KeySplineProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_GetValue_DoubleKeyFrame ()
        {
            SplineDoubleKeyFrame widget = new SplineDoubleKeyFrame ();
            object retval;

            Assert.IsNotNull(DoubleKeyFrame.ValueProperty.GetMetadata (typeof (SplineDoubleKeyFrame)), "#metadata should not be null for: DoubleKeyFrame.ValueProperty.SplineDoubleKeyFrame");
            retval = DoubleKeyFrame.ValueProperty.GetMetadata (typeof (SplineDoubleKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for DoubleKeyFrame.ValueProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "DoubleKeyFrame.ValueProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "DoubleKeyFrame.ValueProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(DoubleKeyFrame.ValueProperty);
            Assert.IsNotNull(retval, "GetValue(DoubleKeyFrame.ValueProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(DoubleKeyFrame.ValueProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(DoubleKeyFrame.ValueProperty) does not match the default value");
            Assert.IsNotNull(DoubleKeyFrame.KeyTimeProperty.GetMetadata (typeof (SplineDoubleKeyFrame)), "#metadata should not be null for: DoubleKeyFrame.KeyTimeProperty.SplineDoubleKeyFrame");
            retval = DoubleKeyFrame.KeyTimeProperty.GetMetadata (typeof (SplineDoubleKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for DoubleKeyFrame.KeyTimeProperty should be non-null value");
            Assert.IsInstanceOfType<KeyTime>(retval, "DoubleKeyFrame.KeyTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "DoubleKeyFrame.KeyTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(DoubleKeyFrame.KeyTimeProperty);
            Assert.IsNotNull(retval, "GetValue(DoubleKeyFrame.KeyTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyTime>(retval, "GetValue(DoubleKeyFrame.KeyTimeProperty) is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "GetValue(DoubleKeyFrame.KeyTimeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_SplineDoubleKeyFrame ()
        {
            SplineDoubleKeyFrame widget = new SplineDoubleKeyFrame ();

            Assert.IsNotNull(widget.KeySpline, "KeySpline should not have returned null");
            Assert.IsInstanceOfType<KeySpline>(widget.KeySpline, "KeySpline is not of the correct type");
            Assert.AreEqual((double) 0, widget.Value, "Value does not match the default value");
            Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class EasingDoubleKeyFrameTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_EasingDoubleKeyFrame ()
        {
            EasingDoubleKeyFrame widget = new EasingDoubleKeyFrame ();
            object retval;

            retval = widget.ReadLocalValue(EasingDoubleKeyFrame.EasingFunctionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EasingDoubleKeyFrame.EasingFunctionProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_DoubleKeyFrame ()
        {
            EasingDoubleKeyFrame widget = new EasingDoubleKeyFrame ();
            object retval;

            retval = widget.ReadLocalValue(DoubleKeyFrame.ValueProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleKeyFrame.ValueProperty) should not have a value by default");
            retval = widget.ReadLocalValue(DoubleKeyFrame.KeyTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DoubleKeyFrame.KeyTimeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_EasingDoubleKeyFrame ()
        {
            EasingDoubleKeyFrame widget = new EasingDoubleKeyFrame ();
            object retval;

            Assert.IsNotNull(EasingDoubleKeyFrame.EasingFunctionProperty.GetMetadata (typeof (EasingDoubleKeyFrame)), "#metadata should not be null for: EasingDoubleKeyFrame.EasingFunctionProperty.EasingDoubleKeyFrame");
            retval = EasingDoubleKeyFrame.EasingFunctionProperty.GetMetadata (typeof (EasingDoubleKeyFrame)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for EasingDoubleKeyFrame.EasingFunctionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(EasingDoubleKeyFrame.EasingFunctionProperty);
            Assert.IsNull(retval, "GetValue(EasingDoubleKeyFrame.EasingFunctionProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_DoubleKeyFrame ()
        {
            EasingDoubleKeyFrame widget = new EasingDoubleKeyFrame ();
            object retval;

            Assert.IsNotNull(DoubleKeyFrame.ValueProperty.GetMetadata (typeof (EasingDoubleKeyFrame)), "#metadata should not be null for: DoubleKeyFrame.ValueProperty.EasingDoubleKeyFrame");
            retval = DoubleKeyFrame.ValueProperty.GetMetadata (typeof (EasingDoubleKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for DoubleKeyFrame.ValueProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "DoubleKeyFrame.ValueProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "DoubleKeyFrame.ValueProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(DoubleKeyFrame.ValueProperty);
            Assert.IsNotNull(retval, "GetValue(DoubleKeyFrame.ValueProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(DoubleKeyFrame.ValueProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(DoubleKeyFrame.ValueProperty) does not match the default value");
            Assert.IsNotNull(DoubleKeyFrame.KeyTimeProperty.GetMetadata (typeof (EasingDoubleKeyFrame)), "#metadata should not be null for: DoubleKeyFrame.KeyTimeProperty.EasingDoubleKeyFrame");
            retval = DoubleKeyFrame.KeyTimeProperty.GetMetadata (typeof (EasingDoubleKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for DoubleKeyFrame.KeyTimeProperty should be non-null value");
            Assert.IsInstanceOfType<KeyTime>(retval, "DoubleKeyFrame.KeyTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "DoubleKeyFrame.KeyTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(DoubleKeyFrame.KeyTimeProperty);
            Assert.IsNotNull(retval, "GetValue(DoubleKeyFrame.KeyTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyTime>(retval, "GetValue(DoubleKeyFrame.KeyTimeProperty) is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "GetValue(DoubleKeyFrame.KeyTimeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_EasingDoubleKeyFrame ()
        {
            EasingDoubleKeyFrame widget = new EasingDoubleKeyFrame ();

            Assert.IsNull(widget.EasingFunction, "EasingFunction should have returned null");
            Assert.AreEqual((double) 0, widget.Value, "Value does not match the default value");
            Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class ColorAnimationUsingKeyFramesTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Timeline ()
        {
            ColorAnimationUsingKeyFrames widget = new ColorAnimationUsingKeyFrames ();
            object retval;

            retval = widget.ReadLocalValue(Timeline.AutoReverseProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.AutoReverseProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.BeginTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.BeginTimeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.DurationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.DurationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.SpeedRatioProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.SpeedRatioProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.FillBehaviorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.FillBehaviorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.RepeatBehaviorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.RepeatBehaviorProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Timeline ()
        {
            ColorAnimationUsingKeyFrames widget = new ColorAnimationUsingKeyFrames ();
            object retval;

            Assert.IsNotNull(Timeline.AutoReverseProperty.GetMetadata (typeof (ColorAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.AutoReverseProperty.ColorAnimationUsingKeyFrames");
            retval = Timeline.AutoReverseProperty.GetMetadata (typeof (ColorAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.AutoReverseProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Timeline.AutoReverseProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Timeline.AutoReverseProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.AutoReverseProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.AutoReverseProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Timeline.AutoReverseProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Timeline.AutoReverseProperty) does not match the default value");
            Assert.IsNotNull(Timeline.BeginTimeProperty.GetMetadata (typeof (ColorAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.BeginTimeProperty.ColorAnimationUsingKeyFrames");
            retval = Timeline.BeginTimeProperty.GetMetadata (typeof (ColorAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.BeginTimeProperty should be non-null value");
            Assert.IsInstanceOfType<TimeSpan>(retval, "Timeline.BeginTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "Timeline.BeginTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.BeginTimeProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.BeginTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<TimeSpan>(retval, "GetValue(Timeline.BeginTimeProperty) is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(Timeline.BeginTimeProperty) does not match the default value");
            Assert.IsNotNull(Timeline.DurationProperty.GetMetadata (typeof (ColorAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.DurationProperty.ColorAnimationUsingKeyFrames");
            retval = Timeline.DurationProperty.GetMetadata (typeof (ColorAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.DurationProperty should be non-null value");
            Assert.IsInstanceOfType<Duration>(retval, "Timeline.DurationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Automatic", retval.ToString (), "Timeline.DurationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.DurationProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.DurationProperty) should not have returned null");
            Assert.IsInstanceOfType<Duration>(retval, "GetValue(Timeline.DurationProperty) is not of the correct type");
            Assert.AreEqual("Automatic", retval.ToString (), "GetValue(Timeline.DurationProperty) does not match the default value");
            Assert.IsNotNull(Timeline.SpeedRatioProperty.GetMetadata (typeof (ColorAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.SpeedRatioProperty.ColorAnimationUsingKeyFrames");
            retval = Timeline.SpeedRatioProperty.GetMetadata (typeof (ColorAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.SpeedRatioProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Timeline.SpeedRatioProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Timeline.SpeedRatioProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.SpeedRatioProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.SpeedRatioProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Timeline.SpeedRatioProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Timeline.SpeedRatioProperty) does not match the default value");
            Assert.IsNotNull(Timeline.FillBehaviorProperty.GetMetadata (typeof (ColorAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.FillBehaviorProperty.ColorAnimationUsingKeyFrames");
            retval = Timeline.FillBehaviorProperty.GetMetadata (typeof (ColorAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.FillBehaviorProperty should be non-null value");
            Assert.IsInstanceOfType<FillBehavior>(retval, "Timeline.FillBehaviorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FillBehavior.HoldEnd, retval, "Timeline.FillBehaviorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.FillBehaviorProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.FillBehaviorProperty) should not have returned null");
            Assert.IsInstanceOfType<FillBehavior>(retval, "GetValue(Timeline.FillBehaviorProperty) is not of the correct type");
            Assert.AreEqual(FillBehavior.HoldEnd, retval, "GetValue(Timeline.FillBehaviorProperty) does not match the default value");
            Assert.IsNotNull(Timeline.RepeatBehaviorProperty.GetMetadata (typeof (ColorAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.RepeatBehaviorProperty.ColorAnimationUsingKeyFrames");
            retval = Timeline.RepeatBehaviorProperty.GetMetadata (typeof (ColorAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.RepeatBehaviorProperty should be non-null value");
            Assert.IsInstanceOfType<RepeatBehavior>(retval, "Timeline.RepeatBehaviorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("1x", retval.ToString (), "Timeline.RepeatBehaviorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.RepeatBehaviorProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.RepeatBehaviorProperty) should not have returned null");
            Assert.IsInstanceOfType<RepeatBehavior>(retval, "GetValue(Timeline.RepeatBehaviorProperty) is not of the correct type");
            Assert.AreEqual("1x", retval.ToString (), "GetValue(Timeline.RepeatBehaviorProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_ColorAnimationUsingKeyFrames ()
        {
            ColorAnimationUsingKeyFrames widget = new ColorAnimationUsingKeyFrames ();

            Assert.IsNotNull(widget.KeyFrames, "KeyFrames should not have returned null");
            Assert.IsInstanceOfType<ColorKeyFrameCollection>(widget.KeyFrames, "KeyFrames is not of the correct type");
            Assert.AreEqual(false, widget.AutoReverse, "AutoReverse does not match the default value");
            Assert.AreEqual("00:00:00", widget.BeginTime.ToString (), "BeginTime does not match the default value");
            Assert.AreEqual("Automatic", widget.Duration.ToString (), "Duration does not match the default value");
            Assert.AreEqual((double) 1, widget.SpeedRatio, "SpeedRatio does not match the default value");
            Assert.AreEqual(FillBehavior.HoldEnd, widget.FillBehavior, "FillBehavior does not match the default value");
            Assert.AreEqual("1x", widget.RepeatBehavior.ToString (), "RepeatBehavior does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class DiscreteColorKeyFrameTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ColorKeyFrame ()
        {
            DiscreteColorKeyFrame widget = new DiscreteColorKeyFrame ();
            object retval;

            retval = widget.ReadLocalValue(ColorKeyFrame.ValueProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorKeyFrame.ValueProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ColorKeyFrame.KeyTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorKeyFrame.KeyTimeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ColorKeyFrame ()
        {
            DiscreteColorKeyFrame widget = new DiscreteColorKeyFrame ();
            object retval;

            Assert.IsNotNull(ColorKeyFrame.ValueProperty.GetMetadata (typeof (DiscreteColorKeyFrame)), "#metadata should not be null for: ColorKeyFrame.ValueProperty.DiscreteColorKeyFrame");
            retval = ColorKeyFrame.ValueProperty.GetMetadata (typeof (DiscreteColorKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ColorKeyFrame.ValueProperty should be non-null value");
            Assert.IsInstanceOfType<Color>(retval, "ColorKeyFrame.ValueProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("#FF000000", retval.ToString (), "ColorKeyFrame.ValueProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ColorKeyFrame.ValueProperty);
            Assert.IsNotNull(retval, "GetValue(ColorKeyFrame.ValueProperty) should not have returned null");
            Assert.IsInstanceOfType<Color>(retval, "GetValue(ColorKeyFrame.ValueProperty) is not of the correct type");
            Assert.AreEqual("#FF000000", retval.ToString (), "GetValue(ColorKeyFrame.ValueProperty) does not match the default value");
            Assert.IsNotNull(ColorKeyFrame.KeyTimeProperty.GetMetadata (typeof (DiscreteColorKeyFrame)), "#metadata should not be null for: ColorKeyFrame.KeyTimeProperty.DiscreteColorKeyFrame");
            retval = ColorKeyFrame.KeyTimeProperty.GetMetadata (typeof (DiscreteColorKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ColorKeyFrame.KeyTimeProperty should be non-null value");
            Assert.IsInstanceOfType<KeyTime>(retval, "ColorKeyFrame.KeyTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "ColorKeyFrame.KeyTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ColorKeyFrame.KeyTimeProperty);
            Assert.IsNotNull(retval, "GetValue(ColorKeyFrame.KeyTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyTime>(retval, "GetValue(ColorKeyFrame.KeyTimeProperty) is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "GetValue(ColorKeyFrame.KeyTimeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_DiscreteColorKeyFrame ()
        {
            DiscreteColorKeyFrame widget = new DiscreteColorKeyFrame ();

            Assert.AreEqual("#FF000000", widget.Value.ToString (), "Value does not match the default value");
            Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class LinearColorKeyFrameTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ColorKeyFrame ()
        {
            LinearColorKeyFrame widget = new LinearColorKeyFrame ();
            object retval;

            retval = widget.ReadLocalValue(ColorKeyFrame.ValueProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorKeyFrame.ValueProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ColorKeyFrame.KeyTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorKeyFrame.KeyTimeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ColorKeyFrame ()
        {
            LinearColorKeyFrame widget = new LinearColorKeyFrame ();
            object retval;

            Assert.IsNotNull(ColorKeyFrame.ValueProperty.GetMetadata (typeof (LinearColorKeyFrame)), "#metadata should not be null for: ColorKeyFrame.ValueProperty.LinearColorKeyFrame");
            retval = ColorKeyFrame.ValueProperty.GetMetadata (typeof (LinearColorKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ColorKeyFrame.ValueProperty should be non-null value");
            Assert.IsInstanceOfType<Color>(retval, "ColorKeyFrame.ValueProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("#FF000000", retval.ToString (), "ColorKeyFrame.ValueProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ColorKeyFrame.ValueProperty);
            Assert.IsNotNull(retval, "GetValue(ColorKeyFrame.ValueProperty) should not have returned null");
            Assert.IsInstanceOfType<Color>(retval, "GetValue(ColorKeyFrame.ValueProperty) is not of the correct type");
            Assert.AreEqual("#FF000000", retval.ToString (), "GetValue(ColorKeyFrame.ValueProperty) does not match the default value");
            Assert.IsNotNull(ColorKeyFrame.KeyTimeProperty.GetMetadata (typeof (LinearColorKeyFrame)), "#metadata should not be null for: ColorKeyFrame.KeyTimeProperty.LinearColorKeyFrame");
            retval = ColorKeyFrame.KeyTimeProperty.GetMetadata (typeof (LinearColorKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ColorKeyFrame.KeyTimeProperty should be non-null value");
            Assert.IsInstanceOfType<KeyTime>(retval, "ColorKeyFrame.KeyTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "ColorKeyFrame.KeyTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ColorKeyFrame.KeyTimeProperty);
            Assert.IsNotNull(retval, "GetValue(ColorKeyFrame.KeyTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyTime>(retval, "GetValue(ColorKeyFrame.KeyTimeProperty) is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "GetValue(ColorKeyFrame.KeyTimeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_LinearColorKeyFrame ()
        {
            LinearColorKeyFrame widget = new LinearColorKeyFrame ();

            Assert.AreEqual("#FF000000", widget.Value.ToString (), "Value does not match the default value");
            Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class SplineColorKeyFrameTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_SplineColorKeyFrame ()
        {
            SplineColorKeyFrame widget = new SplineColorKeyFrame ();
            object retval;

            retval = widget.ReadLocalValue(SplineColorKeyFrame.KeySplineProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(SplineColorKeyFrame.KeySplineProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ColorKeyFrame ()
        {
            SplineColorKeyFrame widget = new SplineColorKeyFrame ();
            object retval;

            retval = widget.ReadLocalValue(ColorKeyFrame.ValueProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorKeyFrame.ValueProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ColorKeyFrame.KeyTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorKeyFrame.KeyTimeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_SplineColorKeyFrame ()
        {
            SplineColorKeyFrame widget = new SplineColorKeyFrame ();
            object retval;

            Assert.IsNotNull(SplineColorKeyFrame.KeySplineProperty.GetMetadata (typeof (SplineColorKeyFrame)), "#metadata should not be null for: SplineColorKeyFrame.KeySplineProperty.SplineColorKeyFrame");
            retval = SplineColorKeyFrame.KeySplineProperty.GetMetadata (typeof (SplineColorKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for SplineColorKeyFrame.KeySplineProperty should be non-null value");
            Assert.IsInstanceOfType<KeySpline>(retval, "SplineColorKeyFrame.KeySplineProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(SplineColorKeyFrame.KeySplineProperty);
            Assert.IsNotNull(retval, "GetValue(SplineColorKeyFrame.KeySplineProperty) should not have returned null");
            Assert.IsInstanceOfType<KeySpline>(retval, "GetValue(SplineColorKeyFrame.KeySplineProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_GetValue_ColorKeyFrame ()
        {
            SplineColorKeyFrame widget = new SplineColorKeyFrame ();
            object retval;

            Assert.IsNotNull(ColorKeyFrame.ValueProperty.GetMetadata (typeof (SplineColorKeyFrame)), "#metadata should not be null for: ColorKeyFrame.ValueProperty.SplineColorKeyFrame");
            retval = ColorKeyFrame.ValueProperty.GetMetadata (typeof (SplineColorKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ColorKeyFrame.ValueProperty should be non-null value");
            Assert.IsInstanceOfType<Color>(retval, "ColorKeyFrame.ValueProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("#FF000000", retval.ToString (), "ColorKeyFrame.ValueProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ColorKeyFrame.ValueProperty);
            Assert.IsNotNull(retval, "GetValue(ColorKeyFrame.ValueProperty) should not have returned null");
            Assert.IsInstanceOfType<Color>(retval, "GetValue(ColorKeyFrame.ValueProperty) is not of the correct type");
            Assert.AreEqual("#FF000000", retval.ToString (), "GetValue(ColorKeyFrame.ValueProperty) does not match the default value");
            Assert.IsNotNull(ColorKeyFrame.KeyTimeProperty.GetMetadata (typeof (SplineColorKeyFrame)), "#metadata should not be null for: ColorKeyFrame.KeyTimeProperty.SplineColorKeyFrame");
            retval = ColorKeyFrame.KeyTimeProperty.GetMetadata (typeof (SplineColorKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ColorKeyFrame.KeyTimeProperty should be non-null value");
            Assert.IsInstanceOfType<KeyTime>(retval, "ColorKeyFrame.KeyTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "ColorKeyFrame.KeyTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ColorKeyFrame.KeyTimeProperty);
            Assert.IsNotNull(retval, "GetValue(ColorKeyFrame.KeyTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyTime>(retval, "GetValue(ColorKeyFrame.KeyTimeProperty) is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "GetValue(ColorKeyFrame.KeyTimeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_SplineColorKeyFrame ()
        {
            SplineColorKeyFrame widget = new SplineColorKeyFrame ();

            Assert.IsNotNull(widget.KeySpline, "KeySpline should not have returned null");
            Assert.IsInstanceOfType<KeySpline>(widget.KeySpline, "KeySpline is not of the correct type");
            Assert.AreEqual("#FF000000", widget.Value.ToString (), "Value does not match the default value");
            Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class EasingColorKeyFrameTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_EasingColorKeyFrame ()
        {
            EasingColorKeyFrame widget = new EasingColorKeyFrame ();
            object retval;

            retval = widget.ReadLocalValue(EasingColorKeyFrame.EasingFunctionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EasingColorKeyFrame.EasingFunctionProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ColorKeyFrame ()
        {
            EasingColorKeyFrame widget = new EasingColorKeyFrame ();
            object retval;

            retval = widget.ReadLocalValue(ColorKeyFrame.ValueProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorKeyFrame.ValueProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ColorKeyFrame.KeyTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColorKeyFrame.KeyTimeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_EasingColorKeyFrame ()
        {
            EasingColorKeyFrame widget = new EasingColorKeyFrame ();
            object retval;

            Assert.IsNotNull(EasingColorKeyFrame.EasingFunctionProperty.GetMetadata (typeof (EasingColorKeyFrame)), "#metadata should not be null for: EasingColorKeyFrame.EasingFunctionProperty.EasingColorKeyFrame");
            retval = EasingColorKeyFrame.EasingFunctionProperty.GetMetadata (typeof (EasingColorKeyFrame)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for EasingColorKeyFrame.EasingFunctionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(EasingColorKeyFrame.EasingFunctionProperty);
            Assert.IsNull(retval, "GetValue(EasingColorKeyFrame.EasingFunctionProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_ColorKeyFrame ()
        {
            EasingColorKeyFrame widget = new EasingColorKeyFrame ();
            object retval;

            Assert.IsNotNull(ColorKeyFrame.ValueProperty.GetMetadata (typeof (EasingColorKeyFrame)), "#metadata should not be null for: ColorKeyFrame.ValueProperty.EasingColorKeyFrame");
            retval = ColorKeyFrame.ValueProperty.GetMetadata (typeof (EasingColorKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ColorKeyFrame.ValueProperty should be non-null value");
            Assert.IsInstanceOfType<Color>(retval, "ColorKeyFrame.ValueProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("#FF000000", retval.ToString (), "ColorKeyFrame.ValueProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ColorKeyFrame.ValueProperty);
            Assert.IsNotNull(retval, "GetValue(ColorKeyFrame.ValueProperty) should not have returned null");
            Assert.IsInstanceOfType<Color>(retval, "GetValue(ColorKeyFrame.ValueProperty) is not of the correct type");
            Assert.AreEqual("#FF000000", retval.ToString (), "GetValue(ColorKeyFrame.ValueProperty) does not match the default value");
            Assert.IsNotNull(ColorKeyFrame.KeyTimeProperty.GetMetadata (typeof (EasingColorKeyFrame)), "#metadata should not be null for: ColorKeyFrame.KeyTimeProperty.EasingColorKeyFrame");
            retval = ColorKeyFrame.KeyTimeProperty.GetMetadata (typeof (EasingColorKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ColorKeyFrame.KeyTimeProperty should be non-null value");
            Assert.IsInstanceOfType<KeyTime>(retval, "ColorKeyFrame.KeyTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "ColorKeyFrame.KeyTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ColorKeyFrame.KeyTimeProperty);
            Assert.IsNotNull(retval, "GetValue(ColorKeyFrame.KeyTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyTime>(retval, "GetValue(ColorKeyFrame.KeyTimeProperty) is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "GetValue(ColorKeyFrame.KeyTimeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_EasingColorKeyFrame ()
        {
            EasingColorKeyFrame widget = new EasingColorKeyFrame ();

            Assert.IsNull(widget.EasingFunction, "EasingFunction should have returned null");
            Assert.AreEqual("#FF000000", widget.Value.ToString (), "Value does not match the default value");
            Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class PointAnimationUsingKeyFramesTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Timeline ()
        {
            PointAnimationUsingKeyFrames widget = new PointAnimationUsingKeyFrames ();
            object retval;

            retval = widget.ReadLocalValue(Timeline.AutoReverseProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.AutoReverseProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.BeginTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.BeginTimeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.DurationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.DurationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.SpeedRatioProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.SpeedRatioProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.FillBehaviorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.FillBehaviorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.RepeatBehaviorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.RepeatBehaviorProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Timeline ()
        {
            PointAnimationUsingKeyFrames widget = new PointAnimationUsingKeyFrames ();
            object retval;

            Assert.IsNotNull(Timeline.AutoReverseProperty.GetMetadata (typeof (PointAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.AutoReverseProperty.PointAnimationUsingKeyFrames");
            retval = Timeline.AutoReverseProperty.GetMetadata (typeof (PointAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.AutoReverseProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Timeline.AutoReverseProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Timeline.AutoReverseProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.AutoReverseProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.AutoReverseProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Timeline.AutoReverseProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Timeline.AutoReverseProperty) does not match the default value");
            Assert.IsNotNull(Timeline.BeginTimeProperty.GetMetadata (typeof (PointAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.BeginTimeProperty.PointAnimationUsingKeyFrames");
            retval = Timeline.BeginTimeProperty.GetMetadata (typeof (PointAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.BeginTimeProperty should be non-null value");
            Assert.IsInstanceOfType<TimeSpan>(retval, "Timeline.BeginTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "Timeline.BeginTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.BeginTimeProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.BeginTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<TimeSpan>(retval, "GetValue(Timeline.BeginTimeProperty) is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(Timeline.BeginTimeProperty) does not match the default value");
            Assert.IsNotNull(Timeline.DurationProperty.GetMetadata (typeof (PointAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.DurationProperty.PointAnimationUsingKeyFrames");
            retval = Timeline.DurationProperty.GetMetadata (typeof (PointAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.DurationProperty should be non-null value");
            Assert.IsInstanceOfType<Duration>(retval, "Timeline.DurationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Automatic", retval.ToString (), "Timeline.DurationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.DurationProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.DurationProperty) should not have returned null");
            Assert.IsInstanceOfType<Duration>(retval, "GetValue(Timeline.DurationProperty) is not of the correct type");
            Assert.AreEqual("Automatic", retval.ToString (), "GetValue(Timeline.DurationProperty) does not match the default value");
            Assert.IsNotNull(Timeline.SpeedRatioProperty.GetMetadata (typeof (PointAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.SpeedRatioProperty.PointAnimationUsingKeyFrames");
            retval = Timeline.SpeedRatioProperty.GetMetadata (typeof (PointAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.SpeedRatioProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Timeline.SpeedRatioProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Timeline.SpeedRatioProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.SpeedRatioProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.SpeedRatioProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Timeline.SpeedRatioProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Timeline.SpeedRatioProperty) does not match the default value");
            Assert.IsNotNull(Timeline.FillBehaviorProperty.GetMetadata (typeof (PointAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.FillBehaviorProperty.PointAnimationUsingKeyFrames");
            retval = Timeline.FillBehaviorProperty.GetMetadata (typeof (PointAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.FillBehaviorProperty should be non-null value");
            Assert.IsInstanceOfType<FillBehavior>(retval, "Timeline.FillBehaviorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FillBehavior.HoldEnd, retval, "Timeline.FillBehaviorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.FillBehaviorProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.FillBehaviorProperty) should not have returned null");
            Assert.IsInstanceOfType<FillBehavior>(retval, "GetValue(Timeline.FillBehaviorProperty) is not of the correct type");
            Assert.AreEqual(FillBehavior.HoldEnd, retval, "GetValue(Timeline.FillBehaviorProperty) does not match the default value");
            Assert.IsNotNull(Timeline.RepeatBehaviorProperty.GetMetadata (typeof (PointAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.RepeatBehaviorProperty.PointAnimationUsingKeyFrames");
            retval = Timeline.RepeatBehaviorProperty.GetMetadata (typeof (PointAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.RepeatBehaviorProperty should be non-null value");
            Assert.IsInstanceOfType<RepeatBehavior>(retval, "Timeline.RepeatBehaviorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("1x", retval.ToString (), "Timeline.RepeatBehaviorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.RepeatBehaviorProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.RepeatBehaviorProperty) should not have returned null");
            Assert.IsInstanceOfType<RepeatBehavior>(retval, "GetValue(Timeline.RepeatBehaviorProperty) is not of the correct type");
            Assert.AreEqual("1x", retval.ToString (), "GetValue(Timeline.RepeatBehaviorProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_PointAnimationUsingKeyFrames ()
        {
            PointAnimationUsingKeyFrames widget = new PointAnimationUsingKeyFrames ();

            Assert.IsNotNull(widget.KeyFrames, "KeyFrames should not have returned null");
            Assert.IsInstanceOfType<PointKeyFrameCollection>(widget.KeyFrames, "KeyFrames is not of the correct type");
            Assert.AreEqual(false, widget.AutoReverse, "AutoReverse does not match the default value");
            Assert.AreEqual("00:00:00", widget.BeginTime.ToString (), "BeginTime does not match the default value");
            Assert.AreEqual("Automatic", widget.Duration.ToString (), "Duration does not match the default value");
            Assert.AreEqual((double) 1, widget.SpeedRatio, "SpeedRatio does not match the default value");
            Assert.AreEqual(FillBehavior.HoldEnd, widget.FillBehavior, "FillBehavior does not match the default value");
            Assert.AreEqual("1x", widget.RepeatBehavior.ToString (), "RepeatBehavior does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class DiscretePointKeyFrameTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_PointKeyFrame ()
        {
            DiscretePointKeyFrame widget = new DiscretePointKeyFrame ();
            object retval;

            retval = widget.ReadLocalValue(PointKeyFrame.ValueProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointKeyFrame.ValueProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PointKeyFrame.KeyTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointKeyFrame.KeyTimeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_PointKeyFrame ()
        {
            DiscretePointKeyFrame widget = new DiscretePointKeyFrame ();
            object retval;

            Assert.IsNotNull(PointKeyFrame.ValueProperty.GetMetadata (typeof (DiscretePointKeyFrame)), "#metadata should not be null for: PointKeyFrame.ValueProperty.DiscretePointKeyFrame");
            retval = PointKeyFrame.ValueProperty.GetMetadata (typeof (DiscretePointKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PointKeyFrame.ValueProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "PointKeyFrame.ValueProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "PointKeyFrame.ValueProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PointKeyFrame.ValueProperty);
            Assert.IsNotNull(retval, "GetValue(PointKeyFrame.ValueProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(PointKeyFrame.ValueProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(PointKeyFrame.ValueProperty) does not match the default value");
            Assert.IsNotNull(PointKeyFrame.KeyTimeProperty.GetMetadata (typeof (DiscretePointKeyFrame)), "#metadata should not be null for: PointKeyFrame.KeyTimeProperty.DiscretePointKeyFrame");
            retval = PointKeyFrame.KeyTimeProperty.GetMetadata (typeof (DiscretePointKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PointKeyFrame.KeyTimeProperty should be non-null value");
            Assert.IsInstanceOfType<KeyTime>(retval, "PointKeyFrame.KeyTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "PointKeyFrame.KeyTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PointKeyFrame.KeyTimeProperty);
            Assert.IsNotNull(retval, "GetValue(PointKeyFrame.KeyTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyTime>(retval, "GetValue(PointKeyFrame.KeyTimeProperty) is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "GetValue(PointKeyFrame.KeyTimeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_DiscretePointKeyFrame ()
        {
            DiscretePointKeyFrame widget = new DiscretePointKeyFrame ();

            Assert.AreEqual("0,0", widget.Value.ToString (), "Value does not match the default value");
            Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class LinearPointKeyFrameTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_PointKeyFrame ()
        {
            LinearPointKeyFrame widget = new LinearPointKeyFrame ();
            object retval;

            retval = widget.ReadLocalValue(PointKeyFrame.ValueProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointKeyFrame.ValueProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PointKeyFrame.KeyTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointKeyFrame.KeyTimeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_PointKeyFrame ()
        {
            LinearPointKeyFrame widget = new LinearPointKeyFrame ();
            object retval;

            Assert.IsNotNull(PointKeyFrame.ValueProperty.GetMetadata (typeof (LinearPointKeyFrame)), "#metadata should not be null for: PointKeyFrame.ValueProperty.LinearPointKeyFrame");
            retval = PointKeyFrame.ValueProperty.GetMetadata (typeof (LinearPointKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PointKeyFrame.ValueProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "PointKeyFrame.ValueProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "PointKeyFrame.ValueProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PointKeyFrame.ValueProperty);
            Assert.IsNotNull(retval, "GetValue(PointKeyFrame.ValueProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(PointKeyFrame.ValueProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(PointKeyFrame.ValueProperty) does not match the default value");
            Assert.IsNotNull(PointKeyFrame.KeyTimeProperty.GetMetadata (typeof (LinearPointKeyFrame)), "#metadata should not be null for: PointKeyFrame.KeyTimeProperty.LinearPointKeyFrame");
            retval = PointKeyFrame.KeyTimeProperty.GetMetadata (typeof (LinearPointKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PointKeyFrame.KeyTimeProperty should be non-null value");
            Assert.IsInstanceOfType<KeyTime>(retval, "PointKeyFrame.KeyTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "PointKeyFrame.KeyTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PointKeyFrame.KeyTimeProperty);
            Assert.IsNotNull(retval, "GetValue(PointKeyFrame.KeyTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyTime>(retval, "GetValue(PointKeyFrame.KeyTimeProperty) is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "GetValue(PointKeyFrame.KeyTimeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_LinearPointKeyFrame ()
        {
            LinearPointKeyFrame widget = new LinearPointKeyFrame ();

            Assert.AreEqual("0,0", widget.Value.ToString (), "Value does not match the default value");
            Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class SplinePointKeyFrameTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_SplinePointKeyFrame ()
        {
            SplinePointKeyFrame widget = new SplinePointKeyFrame ();
            object retval;

            retval = widget.ReadLocalValue(SplinePointKeyFrame.KeySplineProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(SplinePointKeyFrame.KeySplineProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_PointKeyFrame ()
        {
            SplinePointKeyFrame widget = new SplinePointKeyFrame ();
            object retval;

            retval = widget.ReadLocalValue(PointKeyFrame.ValueProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointKeyFrame.ValueProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PointKeyFrame.KeyTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointKeyFrame.KeyTimeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_SplinePointKeyFrame ()
        {
            SplinePointKeyFrame widget = new SplinePointKeyFrame ();
            object retval;

            Assert.IsNotNull(SplinePointKeyFrame.KeySplineProperty.GetMetadata (typeof (SplinePointKeyFrame)), "#metadata should not be null for: SplinePointKeyFrame.KeySplineProperty.SplinePointKeyFrame");
            retval = SplinePointKeyFrame.KeySplineProperty.GetMetadata (typeof (SplinePointKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for SplinePointKeyFrame.KeySplineProperty should be non-null value");
            Assert.IsInstanceOfType<KeySpline>(retval, "SplinePointKeyFrame.KeySplineProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(SplinePointKeyFrame.KeySplineProperty);
            Assert.IsNotNull(retval, "GetValue(SplinePointKeyFrame.KeySplineProperty) should not have returned null");
            Assert.IsInstanceOfType<KeySpline>(retval, "GetValue(SplinePointKeyFrame.KeySplineProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_GetValue_PointKeyFrame ()
        {
            SplinePointKeyFrame widget = new SplinePointKeyFrame ();
            object retval;

            Assert.IsNotNull(PointKeyFrame.ValueProperty.GetMetadata (typeof (SplinePointKeyFrame)), "#metadata should not be null for: PointKeyFrame.ValueProperty.SplinePointKeyFrame");
            retval = PointKeyFrame.ValueProperty.GetMetadata (typeof (SplinePointKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PointKeyFrame.ValueProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "PointKeyFrame.ValueProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "PointKeyFrame.ValueProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PointKeyFrame.ValueProperty);
            Assert.IsNotNull(retval, "GetValue(PointKeyFrame.ValueProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(PointKeyFrame.ValueProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(PointKeyFrame.ValueProperty) does not match the default value");
            Assert.IsNotNull(PointKeyFrame.KeyTimeProperty.GetMetadata (typeof (SplinePointKeyFrame)), "#metadata should not be null for: PointKeyFrame.KeyTimeProperty.SplinePointKeyFrame");
            retval = PointKeyFrame.KeyTimeProperty.GetMetadata (typeof (SplinePointKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PointKeyFrame.KeyTimeProperty should be non-null value");
            Assert.IsInstanceOfType<KeyTime>(retval, "PointKeyFrame.KeyTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "PointKeyFrame.KeyTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PointKeyFrame.KeyTimeProperty);
            Assert.IsNotNull(retval, "GetValue(PointKeyFrame.KeyTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyTime>(retval, "GetValue(PointKeyFrame.KeyTimeProperty) is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "GetValue(PointKeyFrame.KeyTimeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_SplinePointKeyFrame ()
        {
            SplinePointKeyFrame widget = new SplinePointKeyFrame ();

            Assert.IsNotNull(widget.KeySpline, "KeySpline should not have returned null");
            Assert.IsInstanceOfType<KeySpline>(widget.KeySpline, "KeySpline is not of the correct type");
            Assert.AreEqual("0,0", widget.Value.ToString (), "Value does not match the default value");
            Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class EasingPointKeyFrameTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_EasingPointKeyFrame ()
        {
            EasingPointKeyFrame widget = new EasingPointKeyFrame ();
            object retval;

            retval = widget.ReadLocalValue(EasingPointKeyFrame.EasingFunctionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(EasingPointKeyFrame.EasingFunctionProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_PointKeyFrame ()
        {
            EasingPointKeyFrame widget = new EasingPointKeyFrame ();
            object retval;

            retval = widget.ReadLocalValue(PointKeyFrame.ValueProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointKeyFrame.ValueProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PointKeyFrame.KeyTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PointKeyFrame.KeyTimeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_EasingPointKeyFrame ()
        {
            EasingPointKeyFrame widget = new EasingPointKeyFrame ();
            object retval;

            Assert.IsNotNull(EasingPointKeyFrame.EasingFunctionProperty.GetMetadata (typeof (EasingPointKeyFrame)), "#metadata should not be null for: EasingPointKeyFrame.EasingFunctionProperty.EasingPointKeyFrame");
            retval = EasingPointKeyFrame.EasingFunctionProperty.GetMetadata (typeof (EasingPointKeyFrame)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for EasingPointKeyFrame.EasingFunctionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(EasingPointKeyFrame.EasingFunctionProperty);
            Assert.IsNull(retval, "GetValue(EasingPointKeyFrame.EasingFunctionProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_PointKeyFrame ()
        {
            EasingPointKeyFrame widget = new EasingPointKeyFrame ();
            object retval;

            Assert.IsNotNull(PointKeyFrame.ValueProperty.GetMetadata (typeof (EasingPointKeyFrame)), "#metadata should not be null for: PointKeyFrame.ValueProperty.EasingPointKeyFrame");
            retval = PointKeyFrame.ValueProperty.GetMetadata (typeof (EasingPointKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PointKeyFrame.ValueProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "PointKeyFrame.ValueProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "PointKeyFrame.ValueProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PointKeyFrame.ValueProperty);
            Assert.IsNotNull(retval, "GetValue(PointKeyFrame.ValueProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(PointKeyFrame.ValueProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(PointKeyFrame.ValueProperty) does not match the default value");
            Assert.IsNotNull(PointKeyFrame.KeyTimeProperty.GetMetadata (typeof (EasingPointKeyFrame)), "#metadata should not be null for: PointKeyFrame.KeyTimeProperty.EasingPointKeyFrame");
            retval = PointKeyFrame.KeyTimeProperty.GetMetadata (typeof (EasingPointKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PointKeyFrame.KeyTimeProperty should be non-null value");
            Assert.IsInstanceOfType<KeyTime>(retval, "PointKeyFrame.KeyTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "PointKeyFrame.KeyTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PointKeyFrame.KeyTimeProperty);
            Assert.IsNotNull(retval, "GetValue(PointKeyFrame.KeyTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyTime>(retval, "GetValue(PointKeyFrame.KeyTimeProperty) is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "GetValue(PointKeyFrame.KeyTimeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_EasingPointKeyFrame ()
        {
            EasingPointKeyFrame widget = new EasingPointKeyFrame ();

            Assert.IsNull(widget.EasingFunction, "EasingFunction should have returned null");
            Assert.AreEqual("0,0", widget.Value.ToString (), "Value does not match the default value");
            Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class ObjectAnimationUsingKeyFramesTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Timeline ()
        {
            ObjectAnimationUsingKeyFrames widget = new ObjectAnimationUsingKeyFrames ();
            object retval;

            retval = widget.ReadLocalValue(Timeline.AutoReverseProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.AutoReverseProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.BeginTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.BeginTimeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.DurationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.DurationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.SpeedRatioProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.SpeedRatioProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.FillBehaviorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.FillBehaviorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Timeline.RepeatBehaviorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Timeline.RepeatBehaviorProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Timeline ()
        {
            ObjectAnimationUsingKeyFrames widget = new ObjectAnimationUsingKeyFrames ();
            object retval;

            Assert.IsNotNull(Timeline.AutoReverseProperty.GetMetadata (typeof (ObjectAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.AutoReverseProperty.ObjectAnimationUsingKeyFrames");
            retval = Timeline.AutoReverseProperty.GetMetadata (typeof (ObjectAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.AutoReverseProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Timeline.AutoReverseProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Timeline.AutoReverseProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.AutoReverseProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.AutoReverseProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Timeline.AutoReverseProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Timeline.AutoReverseProperty) does not match the default value");
            Assert.IsNotNull(Timeline.BeginTimeProperty.GetMetadata (typeof (ObjectAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.BeginTimeProperty.ObjectAnimationUsingKeyFrames");
            retval = Timeline.BeginTimeProperty.GetMetadata (typeof (ObjectAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.BeginTimeProperty should be non-null value");
            Assert.IsInstanceOfType<TimeSpan>(retval, "Timeline.BeginTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "Timeline.BeginTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.BeginTimeProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.BeginTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<TimeSpan>(retval, "GetValue(Timeline.BeginTimeProperty) is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(Timeline.BeginTimeProperty) does not match the default value");
            Assert.IsNotNull(Timeline.DurationProperty.GetMetadata (typeof (ObjectAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.DurationProperty.ObjectAnimationUsingKeyFrames");
            retval = Timeline.DurationProperty.GetMetadata (typeof (ObjectAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.DurationProperty should be non-null value");
            Assert.IsInstanceOfType<Duration>(retval, "Timeline.DurationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Automatic", retval.ToString (), "Timeline.DurationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.DurationProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.DurationProperty) should not have returned null");
            Assert.IsInstanceOfType<Duration>(retval, "GetValue(Timeline.DurationProperty) is not of the correct type");
            Assert.AreEqual("Automatic", retval.ToString (), "GetValue(Timeline.DurationProperty) does not match the default value");
            Assert.IsNotNull(Timeline.SpeedRatioProperty.GetMetadata (typeof (ObjectAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.SpeedRatioProperty.ObjectAnimationUsingKeyFrames");
            retval = Timeline.SpeedRatioProperty.GetMetadata (typeof (ObjectAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.SpeedRatioProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Timeline.SpeedRatioProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Timeline.SpeedRatioProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.SpeedRatioProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.SpeedRatioProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Timeline.SpeedRatioProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Timeline.SpeedRatioProperty) does not match the default value");
            Assert.IsNotNull(Timeline.FillBehaviorProperty.GetMetadata (typeof (ObjectAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.FillBehaviorProperty.ObjectAnimationUsingKeyFrames");
            retval = Timeline.FillBehaviorProperty.GetMetadata (typeof (ObjectAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.FillBehaviorProperty should be non-null value");
            Assert.IsInstanceOfType<FillBehavior>(retval, "Timeline.FillBehaviorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FillBehavior.HoldEnd, retval, "Timeline.FillBehaviorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.FillBehaviorProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.FillBehaviorProperty) should not have returned null");
            Assert.IsInstanceOfType<FillBehavior>(retval, "GetValue(Timeline.FillBehaviorProperty) is not of the correct type");
            Assert.AreEqual(FillBehavior.HoldEnd, retval, "GetValue(Timeline.FillBehaviorProperty) does not match the default value");
            Assert.IsNotNull(Timeline.RepeatBehaviorProperty.GetMetadata (typeof (ObjectAnimationUsingKeyFrames)), "#metadata should not be null for: Timeline.RepeatBehaviorProperty.ObjectAnimationUsingKeyFrames");
            retval = Timeline.RepeatBehaviorProperty.GetMetadata (typeof (ObjectAnimationUsingKeyFrames)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Timeline.RepeatBehaviorProperty should be non-null value");
            Assert.IsInstanceOfType<RepeatBehavior>(retval, "Timeline.RepeatBehaviorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("1x", retval.ToString (), "Timeline.RepeatBehaviorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Timeline.RepeatBehaviorProperty);
            Assert.IsNotNull(retval, "GetValue(Timeline.RepeatBehaviorProperty) should not have returned null");
            Assert.IsInstanceOfType<RepeatBehavior>(retval, "GetValue(Timeline.RepeatBehaviorProperty) is not of the correct type");
            Assert.AreEqual("1x", retval.ToString (), "GetValue(Timeline.RepeatBehaviorProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_ObjectAnimationUsingKeyFrames ()
        {
            ObjectAnimationUsingKeyFrames widget = new ObjectAnimationUsingKeyFrames ();

            Assert.IsNotNull(widget.KeyFrames, "KeyFrames should not have returned null");
            Assert.IsInstanceOfType<ObjectKeyFrameCollection>(widget.KeyFrames, "KeyFrames is not of the correct type");
            Assert.AreEqual(false, widget.AutoReverse, "AutoReverse does not match the default value");
            Assert.AreEqual("00:00:00", widget.BeginTime.ToString (), "BeginTime does not match the default value");
            Assert.AreEqual("Automatic", widget.Duration.ToString (), "Duration does not match the default value");
            Assert.AreEqual((double) 1, widget.SpeedRatio, "SpeedRatio does not match the default value");
            Assert.AreEqual(FillBehavior.HoldEnd, widget.FillBehavior, "FillBehavior does not match the default value");
            Assert.AreEqual("1x", widget.RepeatBehavior.ToString (), "RepeatBehavior does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class DiscreteObjectKeyFrameTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ObjectKeyFrame ()
        {
            DiscreteObjectKeyFrame widget = new DiscreteObjectKeyFrame ();
            object retval;

            retval = widget.ReadLocalValue(ObjectKeyFrame.KeyTimeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ObjectKeyFrame.KeyTimeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ObjectKeyFrame.ValueProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ObjectKeyFrame.ValueProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ObjectKeyFrame ()
        {
            DiscreteObjectKeyFrame widget = new DiscreteObjectKeyFrame ();
            object retval;

            Assert.IsNotNull(ObjectKeyFrame.KeyTimeProperty.GetMetadata (typeof (DiscreteObjectKeyFrame)), "#metadata should not be null for: ObjectKeyFrame.KeyTimeProperty.DiscreteObjectKeyFrame");
            retval = ObjectKeyFrame.KeyTimeProperty.GetMetadata (typeof (DiscreteObjectKeyFrame)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ObjectKeyFrame.KeyTimeProperty should be non-null value");
            Assert.IsInstanceOfType<KeyTime>(retval, "ObjectKeyFrame.KeyTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "ObjectKeyFrame.KeyTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ObjectKeyFrame.KeyTimeProperty);
            Assert.IsNotNull(retval, "GetValue(ObjectKeyFrame.KeyTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyTime>(retval, "GetValue(ObjectKeyFrame.KeyTimeProperty) is not of the correct type");
            Assert.AreEqual("Uniform", retval.ToString (), "GetValue(ObjectKeyFrame.KeyTimeProperty) does not match the default value");
            Assert.IsNotNull(ObjectKeyFrame.ValueProperty.GetMetadata (typeof (DiscreteObjectKeyFrame)), "#metadata should not be null for: ObjectKeyFrame.ValueProperty.DiscreteObjectKeyFrame");
            retval = ObjectKeyFrame.ValueProperty.GetMetadata (typeof (DiscreteObjectKeyFrame)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ObjectKeyFrame.ValueProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ObjectKeyFrame.ValueProperty);
            Assert.IsNull(retval, "GetValue(ObjectKeyFrame.ValueProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_DiscreteObjectKeyFrame ()
        {
            DiscreteObjectKeyFrame widget = new DiscreteObjectKeyFrame ();

            Assert.AreEqual("Uniform", widget.KeyTime.ToString (), "KeyTime does not match the default value");
            Assert.IsNull(widget.Value, "Value should have returned null");
        }

    }
}
namespace MoonTest.System.Windows.Media.Animation
{
    [TestClass]
    public partial class TimelineCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_TimelineCollection ()
        {
            TimelineCollection widget = new TimelineCollection ();

            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<TimelineCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Input
{
    [TestClass]
    public partial class StylusPointCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_StylusPointCollection ()
        {
            StylusPointCollection widget = new StylusPointCollection ();

            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<StylusPointCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Input
{
    [TestClass]
    public partial class TouchDeviceTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_TouchDevice ()
        {
            TouchDevice widget = new TouchDevice ();
            object retval;

            retval = widget.ReadLocalValue(TouchDevice.IdProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TouchDevice.IdProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TouchDevice.DirectlyOverProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TouchDevice.DirectlyOverProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_TouchDevice ()
        {
            TouchDevice widget = new TouchDevice ();
            object retval;

            Assert.IsNotNull(TouchDevice.IdProperty.GetMetadata (typeof (TouchDevice)), "#metadata should not be null for: TouchDevice.IdProperty.TouchDevice");
            retval = TouchDevice.IdProperty.GetMetadata (typeof (TouchDevice)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TouchDevice.IdProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "TouchDevice.IdProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(0, retval, "TouchDevice.IdProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TouchDevice.IdProperty);
            Assert.IsNotNull(retval, "GetValue(TouchDevice.IdProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(TouchDevice.IdProperty) is not of the correct type");
            Assert.AreEqual(0, retval, "GetValue(TouchDevice.IdProperty) does not match the default value");
            Assert.IsNotNull(TouchDevice.DirectlyOverProperty.GetMetadata (typeof (TouchDevice)), "#metadata should not be null for: TouchDevice.DirectlyOverProperty.TouchDevice");
            retval = TouchDevice.DirectlyOverProperty.GetMetadata (typeof (TouchDevice)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for TouchDevice.DirectlyOverProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(TouchDevice.DirectlyOverProperty);
            Assert.IsNull(retval, "GetValue(TouchDevice.DirectlyOverProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_TouchDevice ()
        {
            TouchDevice widget = new TouchDevice ();

            Assert.AreEqual(0, widget.Id, "Id does not match the default value");
            Assert.IsNull(widget.DirectlyOver, "DirectlyOver should have returned null");
        }

    }
}
namespace MoonTest.System.Windows.Input
{
    [TestClass]
    public partial class TouchPointTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_TouchPoint ()
        {
            TouchPoint widget = new TouchPoint ();
            object retval;

            retval = widget.ReadLocalValue(TouchPoint.TouchDeviceProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TouchPoint.TouchDeviceProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TouchPoint.PositionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TouchPoint.PositionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TouchPoint.SizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TouchPoint.SizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TouchPoint.ActionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TouchPoint.ActionProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_TouchPoint ()
        {
            TouchPoint widget = new TouchPoint ();
            object retval;

            Assert.IsNotNull(TouchPoint.TouchDeviceProperty.GetMetadata (typeof (TouchPoint)), "#metadata should not be null for: TouchPoint.TouchDeviceProperty.TouchPoint");
            retval = TouchPoint.TouchDeviceProperty.GetMetadata (typeof (TouchPoint)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for TouchPoint.TouchDeviceProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(TouchPoint.TouchDeviceProperty);
            Assert.IsNull(retval, "GetValue(TouchPoint.TouchDeviceProperty) should have returned null");
            Assert.IsNotNull(TouchPoint.PositionProperty.GetMetadata (typeof (TouchPoint)), "#metadata should not be null for: TouchPoint.PositionProperty.TouchPoint");
            retval = TouchPoint.PositionProperty.GetMetadata (typeof (TouchPoint)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TouchPoint.PositionProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "TouchPoint.PositionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "TouchPoint.PositionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TouchPoint.PositionProperty);
            Assert.IsNotNull(retval, "GetValue(TouchPoint.PositionProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(TouchPoint.PositionProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(TouchPoint.PositionProperty) does not match the default value");
            Assert.IsNotNull(TouchPoint.SizeProperty.GetMetadata (typeof (TouchPoint)), "#metadata should not be null for: TouchPoint.SizeProperty.TouchPoint");
            retval = TouchPoint.SizeProperty.GetMetadata (typeof (TouchPoint)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TouchPoint.SizeProperty should be non-null value");
            Assert.IsInstanceOfType<Size>(retval, "TouchPoint.SizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "TouchPoint.SizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TouchPoint.SizeProperty);
            Assert.IsNotNull(retval, "GetValue(TouchPoint.SizeProperty) should not have returned null");
            Assert.IsInstanceOfType<Size>(retval, "GetValue(TouchPoint.SizeProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(TouchPoint.SizeProperty) does not match the default value");
            Assert.IsNotNull(TouchPoint.ActionProperty.GetMetadata (typeof (TouchPoint)), "#metadata should not be null for: TouchPoint.ActionProperty.TouchPoint");
            retval = TouchPoint.ActionProperty.GetMetadata (typeof (TouchPoint)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TouchPoint.ActionProperty should be non-null value");
            Assert.IsInstanceOfType<TouchAction>(retval, "TouchPoint.ActionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((TouchAction)0, retval, "TouchPoint.ActionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TouchPoint.ActionProperty);
            Assert.IsNotNull(retval, "GetValue(TouchPoint.ActionProperty) should not have returned null");
            Assert.IsInstanceOfType<TouchAction>(retval, "GetValue(TouchPoint.ActionProperty) is not of the correct type");
            Assert.AreEqual((TouchAction)0, retval, "GetValue(TouchPoint.ActionProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_TouchPoint ()
        {
            TouchPoint widget = new TouchPoint ();

            Assert.IsNull(widget.TouchDevice, "TouchDevice should have returned null");
            Assert.AreEqual("0,0", widget.Position.ToString (), "Position does not match the default value");
            Assert.AreEqual("0,0", widget.Size.ToString (), "Size does not match the default value");
            Assert.AreEqual((TouchAction)0, widget.Action, "Action does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Shapes
{
    [TestClass]
    public partial class PathTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Path ()
        {
            Path widget = new Path ();
            object retval;

            retval = widget.ReadLocalValue(Path.DataProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Path.DataProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Shape ()
        {
            Path widget = new Path ();
            object retval;

            retval = widget.ReadLocalValue(Shape.FillProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.FillProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeMiterLimitProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeMiterLimitProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeStartLineCapProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeStartLineCapProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeEndLineCapProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeEndLineCapProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeLineJoinProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeLineJoinProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeDashOffsetProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashOffsetProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeDashCapProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashCapProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeDashArrayProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashArrayProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StretchProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            Path widget = new Path ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            Path widget = new Path ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Path ()
        {
            Path widget = new Path ();
            object retval;

            Assert.IsNotNull(Path.DataProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: Path.DataProperty.Path");
            retval = Path.DataProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Path.DataProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Path.DataProperty);
            Assert.IsNull(retval, "GetValue(Path.DataProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Shape ()
        {
            Path widget = new Path ();
            object retval;

            Assert.IsNotNull(Shape.FillProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: Shape.FillProperty.Path");
            retval = Shape.FillProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Shape.FillProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Shape.FillProperty);
            Assert.IsNull(retval, "GetValue(Shape.FillProperty) should have returned null");
            Assert.IsNotNull(Shape.StrokeProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: Shape.StrokeProperty.Path");
            retval = Shape.StrokeProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Shape.StrokeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Shape.StrokeProperty);
            Assert.IsNull(retval, "GetValue(Shape.StrokeProperty) should have returned null");
            Assert.IsNotNull(Shape.StrokeMiterLimitProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: Shape.StrokeMiterLimitProperty.Path");
            retval = Shape.StrokeMiterLimitProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeMiterLimitProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Shape.StrokeMiterLimitProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 10, retval, "Shape.StrokeMiterLimitProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeMiterLimitProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeMiterLimitProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Shape.StrokeMiterLimitProperty) is not of the correct type");
            Assert.AreEqual((double) 10, retval, "GetValue(Shape.StrokeMiterLimitProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeThicknessProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: Shape.StrokeThicknessProperty.Path");
            retval = Shape.StrokeThicknessProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Shape.StrokeThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Shape.StrokeThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Shape.StrokeThicknessProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Shape.StrokeThicknessProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeStartLineCapProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: Shape.StrokeStartLineCapProperty.Path");
            retval = Shape.StrokeStartLineCapProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeStartLineCapProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineCap>(retval, "Shape.StrokeStartLineCapProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "Shape.StrokeStartLineCapProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeStartLineCapProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeStartLineCapProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineCap>(retval, "GetValue(Shape.StrokeStartLineCapProperty) is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeStartLineCapProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeEndLineCapProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: Shape.StrokeEndLineCapProperty.Path");
            retval = Shape.StrokeEndLineCapProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeEndLineCapProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineCap>(retval, "Shape.StrokeEndLineCapProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "Shape.StrokeEndLineCapProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeEndLineCapProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeEndLineCapProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineCap>(retval, "GetValue(Shape.StrokeEndLineCapProperty) is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeEndLineCapProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeLineJoinProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: Shape.StrokeLineJoinProperty.Path");
            retval = Shape.StrokeLineJoinProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeLineJoinProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineJoin>(retval, "Shape.StrokeLineJoinProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineJoin.Miter, retval, "Shape.StrokeLineJoinProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeLineJoinProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeLineJoinProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineJoin>(retval, "GetValue(Shape.StrokeLineJoinProperty) is not of the correct type");
            Assert.AreEqual(PenLineJoin.Miter, retval, "GetValue(Shape.StrokeLineJoinProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeDashOffsetProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: Shape.StrokeDashOffsetProperty.Path");
            retval = Shape.StrokeDashOffsetProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeDashOffsetProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Shape.StrokeDashOffsetProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "Shape.StrokeDashOffsetProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeDashOffsetProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashOffsetProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Shape.StrokeDashOffsetProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(Shape.StrokeDashOffsetProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeDashCapProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: Shape.StrokeDashCapProperty.Path");
            retval = Shape.StrokeDashCapProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeDashCapProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineCap>(retval, "Shape.StrokeDashCapProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "Shape.StrokeDashCapProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeDashCapProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashCapProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineCap>(retval, "GetValue(Shape.StrokeDashCapProperty) is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeDashCapProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeDashArrayProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: Shape.StrokeDashArrayProperty.Path");
            retval = Shape.StrokeDashArrayProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Shape.StrokeDashArrayProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Shape.StrokeDashArrayProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashArrayProperty) should not have returned null");
            Assert.IsInstanceOfType<DoubleCollection>(retval, "GetValue(Shape.StrokeDashArrayProperty) is not of the correct type");
            Assert.IsNotNull(Shape.StretchProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: Shape.StretchProperty.Path");
            retval = Shape.StretchProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StretchProperty should be non-null value");
            Assert.IsInstanceOfType<Stretch>(retval, "Shape.StretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Stretch.None, retval, "Shape.StretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StretchProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StretchProperty) should not have returned null");
            Assert.IsInstanceOfType<Stretch>(retval, "GetValue(Shape.StretchProperty) is not of the correct type");
            Assert.AreEqual(Stretch.None, retval, "GetValue(Shape.StretchProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            Path widget = new Path ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: FrameworkElement.LanguageProperty.Path");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.Path");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.Path");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: FrameworkElement.WidthProperty.Path");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: FrameworkElement.HeightProperty.Path");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.Path");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.Path");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.Path");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.Path");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.Path");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.Path");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: FrameworkElement.MarginProperty.Path");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: FrameworkElement.StyleProperty.Path");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.Path");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: FrameworkElement.NameProperty.Path");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: FrameworkElement.TagProperty.Path");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: FrameworkElement.CursorProperty.Path");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: FrameworkElement.DataContextProperty.Path");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            Path widget = new Path ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: UIElement.AllowDropProperty.Path");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: UIElement.OpacityProperty.Path");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: UIElement.ClipProperty.Path");
            retval = UIElement.ClipProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: UIElement.RenderTransformProperty.Path");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: UIElement.EffectProperty.Path");
            retval = UIElement.EffectProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: UIElement.ProjectionProperty.Path");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: UIElement.OpacityMaskProperty.Path");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.Path");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.Path");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: UIElement.VisibilityProperty.Path");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.Path");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (Path)), "#metadata should not be null for: UIElement.CacheModeProperty.Path");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (Path)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_Path ()
        {
            Path widget = new Path ();

            Assert.IsNull(widget.Data, "Data should have returned null");
            Assert.IsNull(widget.Fill, "Fill should have returned null");
            Assert.IsNull(widget.Stroke, "Stroke should have returned null");
            Assert.AreEqual((double) 10, widget.StrokeMiterLimit, "StrokeMiterLimit does not match the default value");
            Assert.AreEqual((double) 1, widget.StrokeThickness, "StrokeThickness does not match the default value");
            Assert.AreEqual(PenLineCap.Flat, widget.StrokeStartLineCap, "StrokeStartLineCap does not match the default value");
            Assert.AreEqual(PenLineCap.Flat, widget.StrokeEndLineCap, "StrokeEndLineCap does not match the default value");
            Assert.AreEqual(PenLineJoin.Miter, widget.StrokeLineJoin, "StrokeLineJoin does not match the default value");
            Assert.AreEqual((double) 0, widget.StrokeDashOffset, "StrokeDashOffset does not match the default value");
            Assert.AreEqual(PenLineCap.Flat, widget.StrokeDashCap, "StrokeDashCap does not match the default value");
            Assert.IsNotNull(widget.StrokeDashArray, "StrokeDashArray should not have returned null");
            Assert.IsInstanceOfType<DoubleCollection>(widget.StrokeDashArray, "StrokeDashArray is not of the correct type");
            Assert.AreEqual(Stretch.None, widget.Stretch, "Stretch does not match the default value");
            Assert.IsNotNull(widget.GeometryTransform, "GeometryTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.GeometryTransform, "GeometryTransform is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            Path widget = new Path ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Shapes
{
    [TestClass]
    public partial class EllipseTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Shape ()
        {
            Ellipse widget = new Ellipse ();
            object retval;

            retval = widget.ReadLocalValue(Shape.FillProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.FillProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeMiterLimitProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeMiterLimitProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeStartLineCapProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeStartLineCapProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeEndLineCapProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeEndLineCapProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeLineJoinProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeLineJoinProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeDashOffsetProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashOffsetProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeDashCapProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashCapProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeDashArrayProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashArrayProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StretchProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            Ellipse widget = new Ellipse ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            Ellipse widget = new Ellipse ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Shape ()
        {
            Ellipse widget = new Ellipse ();
            object retval;

            Assert.IsNotNull(Shape.FillProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: Shape.FillProperty.Ellipse");
            retval = Shape.FillProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Shape.FillProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Shape.FillProperty);
            Assert.IsNull(retval, "GetValue(Shape.FillProperty) should have returned null");
            Assert.IsNotNull(Shape.StrokeProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: Shape.StrokeProperty.Ellipse");
            retval = Shape.StrokeProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Shape.StrokeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Shape.StrokeProperty);
            Assert.IsNull(retval, "GetValue(Shape.StrokeProperty) should have returned null");
            Assert.IsNotNull(Shape.StrokeMiterLimitProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: Shape.StrokeMiterLimitProperty.Ellipse");
            retval = Shape.StrokeMiterLimitProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeMiterLimitProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Shape.StrokeMiterLimitProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 10, retval, "Shape.StrokeMiterLimitProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeMiterLimitProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeMiterLimitProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Shape.StrokeMiterLimitProperty) is not of the correct type");
            Assert.AreEqual((double) 10, retval, "GetValue(Shape.StrokeMiterLimitProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeThicknessProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: Shape.StrokeThicknessProperty.Ellipse");
            retval = Shape.StrokeThicknessProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Shape.StrokeThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Shape.StrokeThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Shape.StrokeThicknessProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Shape.StrokeThicknessProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeStartLineCapProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: Shape.StrokeStartLineCapProperty.Ellipse");
            retval = Shape.StrokeStartLineCapProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeStartLineCapProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineCap>(retval, "Shape.StrokeStartLineCapProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "Shape.StrokeStartLineCapProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeStartLineCapProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeStartLineCapProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineCap>(retval, "GetValue(Shape.StrokeStartLineCapProperty) is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeStartLineCapProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeEndLineCapProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: Shape.StrokeEndLineCapProperty.Ellipse");
            retval = Shape.StrokeEndLineCapProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeEndLineCapProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineCap>(retval, "Shape.StrokeEndLineCapProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "Shape.StrokeEndLineCapProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeEndLineCapProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeEndLineCapProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineCap>(retval, "GetValue(Shape.StrokeEndLineCapProperty) is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeEndLineCapProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeLineJoinProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: Shape.StrokeLineJoinProperty.Ellipse");
            retval = Shape.StrokeLineJoinProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeLineJoinProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineJoin>(retval, "Shape.StrokeLineJoinProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineJoin.Miter, retval, "Shape.StrokeLineJoinProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeLineJoinProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeLineJoinProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineJoin>(retval, "GetValue(Shape.StrokeLineJoinProperty) is not of the correct type");
            Assert.AreEqual(PenLineJoin.Miter, retval, "GetValue(Shape.StrokeLineJoinProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeDashOffsetProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: Shape.StrokeDashOffsetProperty.Ellipse");
            retval = Shape.StrokeDashOffsetProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeDashOffsetProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Shape.StrokeDashOffsetProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "Shape.StrokeDashOffsetProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeDashOffsetProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashOffsetProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Shape.StrokeDashOffsetProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(Shape.StrokeDashOffsetProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeDashCapProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: Shape.StrokeDashCapProperty.Ellipse");
            retval = Shape.StrokeDashCapProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeDashCapProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineCap>(retval, "Shape.StrokeDashCapProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "Shape.StrokeDashCapProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeDashCapProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashCapProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineCap>(retval, "GetValue(Shape.StrokeDashCapProperty) is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeDashCapProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeDashArrayProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: Shape.StrokeDashArrayProperty.Ellipse");
            retval = Shape.StrokeDashArrayProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Shape.StrokeDashArrayProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Shape.StrokeDashArrayProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashArrayProperty) should not have returned null");
            Assert.IsInstanceOfType<DoubleCollection>(retval, "GetValue(Shape.StrokeDashArrayProperty) is not of the correct type");
            Assert.IsNotNull(Shape.StretchProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: Shape.StretchProperty.Ellipse");
            retval = Shape.StretchProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StretchProperty should be non-null value");
            Assert.IsInstanceOfType<Stretch>(retval, "Shape.StretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Stretch.Fill, retval, "Shape.StretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StretchProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StretchProperty) should not have returned null");
            Assert.IsInstanceOfType<Stretch>(retval, "GetValue(Shape.StretchProperty) is not of the correct type");
            Assert.AreEqual(Stretch.Fill, retval, "GetValue(Shape.StretchProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            Ellipse widget = new Ellipse ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: FrameworkElement.LanguageProperty.Ellipse");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.Ellipse");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.Ellipse");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: FrameworkElement.WidthProperty.Ellipse");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: FrameworkElement.HeightProperty.Ellipse");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.Ellipse");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.Ellipse");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.Ellipse");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.Ellipse");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.Ellipse");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.Ellipse");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: FrameworkElement.MarginProperty.Ellipse");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: FrameworkElement.StyleProperty.Ellipse");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.Ellipse");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: FrameworkElement.NameProperty.Ellipse");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: FrameworkElement.TagProperty.Ellipse");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: FrameworkElement.CursorProperty.Ellipse");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: FrameworkElement.DataContextProperty.Ellipse");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            Ellipse widget = new Ellipse ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: UIElement.AllowDropProperty.Ellipse");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: UIElement.OpacityProperty.Ellipse");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: UIElement.ClipProperty.Ellipse");
            retval = UIElement.ClipProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: UIElement.RenderTransformProperty.Ellipse");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: UIElement.EffectProperty.Ellipse");
            retval = UIElement.EffectProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: UIElement.ProjectionProperty.Ellipse");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: UIElement.OpacityMaskProperty.Ellipse");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.Ellipse");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.Ellipse");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: UIElement.VisibilityProperty.Ellipse");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.Ellipse");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (Ellipse)), "#metadata should not be null for: UIElement.CacheModeProperty.Ellipse");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (Ellipse)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_Ellipse ()
        {
            Ellipse widget = new Ellipse ();

            Assert.IsNull(widget.Fill, "Fill should have returned null");
            Assert.IsNull(widget.Stroke, "Stroke should have returned null");
            Assert.AreEqual((double) 10, widget.StrokeMiterLimit, "StrokeMiterLimit does not match the default value");
            Assert.AreEqual((double) 1, widget.StrokeThickness, "StrokeThickness does not match the default value");
            Assert.AreEqual(PenLineCap.Flat, widget.StrokeStartLineCap, "StrokeStartLineCap does not match the default value");
            Assert.AreEqual(PenLineCap.Flat, widget.StrokeEndLineCap, "StrokeEndLineCap does not match the default value");
            Assert.AreEqual(PenLineJoin.Miter, widget.StrokeLineJoin, "StrokeLineJoin does not match the default value");
            Assert.AreEqual((double) 0, widget.StrokeDashOffset, "StrokeDashOffset does not match the default value");
            Assert.AreEqual(PenLineCap.Flat, widget.StrokeDashCap, "StrokeDashCap does not match the default value");
            Assert.IsNotNull(widget.StrokeDashArray, "StrokeDashArray should not have returned null");
            Assert.IsInstanceOfType<DoubleCollection>(widget.StrokeDashArray, "StrokeDashArray is not of the correct type");
            Assert.AreEqual(Stretch.Fill, widget.Stretch, "Stretch does not match the default value");
            Assert.IsNotNull(widget.GeometryTransform, "GeometryTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.GeometryTransform, "GeometryTransform is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            Ellipse widget = new Ellipse ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Shapes
{
    [TestClass]
    public partial class LineTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Line ()
        {
            Line widget = new Line ();
            object retval;

            retval = widget.ReadLocalValue(Line.X1Property);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Line.X1Property) should not have a value by default");
            retval = widget.ReadLocalValue(Line.Y1Property);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Line.Y1Property) should not have a value by default");
            retval = widget.ReadLocalValue(Line.X2Property);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Line.X2Property) should not have a value by default");
            retval = widget.ReadLocalValue(Line.Y2Property);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Line.Y2Property) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Shape ()
        {
            Line widget = new Line ();
            object retval;

            retval = widget.ReadLocalValue(Shape.FillProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.FillProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeMiterLimitProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeMiterLimitProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeStartLineCapProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeStartLineCapProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeEndLineCapProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeEndLineCapProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeLineJoinProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeLineJoinProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeDashOffsetProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashOffsetProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeDashCapProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashCapProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeDashArrayProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashArrayProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StretchProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            Line widget = new Line ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            Line widget = new Line ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Line ()
        {
            Line widget = new Line ();
            object retval;

            Assert.IsNotNull(Line.X1Property.GetMetadata (typeof (Line)), "#metadata should not be null for: Line.X1Property.Line");
            retval = Line.X1Property.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Line.X1Property should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Line.X1Property.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "Line.X1Property.GetMetadata() does not match the default value");
            retval = widget.GetValue(Line.X1Property);
            Assert.IsNotNull(retval, "GetValue(Line.X1Property) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Line.X1Property) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(Line.X1Property) does not match the default value");
            Assert.IsNotNull(Line.Y1Property.GetMetadata (typeof (Line)), "#metadata should not be null for: Line.Y1Property.Line");
            retval = Line.Y1Property.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Line.Y1Property should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Line.Y1Property.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "Line.Y1Property.GetMetadata() does not match the default value");
            retval = widget.GetValue(Line.Y1Property);
            Assert.IsNotNull(retval, "GetValue(Line.Y1Property) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Line.Y1Property) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(Line.Y1Property) does not match the default value");
            Assert.IsNotNull(Line.X2Property.GetMetadata (typeof (Line)), "#metadata should not be null for: Line.X2Property.Line");
            retval = Line.X2Property.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Line.X2Property should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Line.X2Property.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "Line.X2Property.GetMetadata() does not match the default value");
            retval = widget.GetValue(Line.X2Property);
            Assert.IsNotNull(retval, "GetValue(Line.X2Property) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Line.X2Property) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(Line.X2Property) does not match the default value");
            Assert.IsNotNull(Line.Y2Property.GetMetadata (typeof (Line)), "#metadata should not be null for: Line.Y2Property.Line");
            retval = Line.Y2Property.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Line.Y2Property should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Line.Y2Property.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "Line.Y2Property.GetMetadata() does not match the default value");
            retval = widget.GetValue(Line.Y2Property);
            Assert.IsNotNull(retval, "GetValue(Line.Y2Property) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Line.Y2Property) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(Line.Y2Property) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Shape ()
        {
            Line widget = new Line ();
            object retval;

            Assert.IsNotNull(Shape.FillProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: Shape.FillProperty.Line");
            retval = Shape.FillProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Shape.FillProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Shape.FillProperty);
            Assert.IsNull(retval, "GetValue(Shape.FillProperty) should have returned null");
            Assert.IsNotNull(Shape.StrokeProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: Shape.StrokeProperty.Line");
            retval = Shape.StrokeProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Shape.StrokeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Shape.StrokeProperty);
            Assert.IsNull(retval, "GetValue(Shape.StrokeProperty) should have returned null");
            Assert.IsNotNull(Shape.StrokeMiterLimitProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: Shape.StrokeMiterLimitProperty.Line");
            retval = Shape.StrokeMiterLimitProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeMiterLimitProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Shape.StrokeMiterLimitProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 10, retval, "Shape.StrokeMiterLimitProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeMiterLimitProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeMiterLimitProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Shape.StrokeMiterLimitProperty) is not of the correct type");
            Assert.AreEqual((double) 10, retval, "GetValue(Shape.StrokeMiterLimitProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeThicknessProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: Shape.StrokeThicknessProperty.Line");
            retval = Shape.StrokeThicknessProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Shape.StrokeThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Shape.StrokeThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Shape.StrokeThicknessProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Shape.StrokeThicknessProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeStartLineCapProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: Shape.StrokeStartLineCapProperty.Line");
            retval = Shape.StrokeStartLineCapProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeStartLineCapProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineCap>(retval, "Shape.StrokeStartLineCapProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "Shape.StrokeStartLineCapProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeStartLineCapProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeStartLineCapProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineCap>(retval, "GetValue(Shape.StrokeStartLineCapProperty) is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeStartLineCapProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeEndLineCapProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: Shape.StrokeEndLineCapProperty.Line");
            retval = Shape.StrokeEndLineCapProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeEndLineCapProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineCap>(retval, "Shape.StrokeEndLineCapProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "Shape.StrokeEndLineCapProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeEndLineCapProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeEndLineCapProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineCap>(retval, "GetValue(Shape.StrokeEndLineCapProperty) is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeEndLineCapProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeLineJoinProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: Shape.StrokeLineJoinProperty.Line");
            retval = Shape.StrokeLineJoinProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeLineJoinProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineJoin>(retval, "Shape.StrokeLineJoinProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineJoin.Miter, retval, "Shape.StrokeLineJoinProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeLineJoinProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeLineJoinProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineJoin>(retval, "GetValue(Shape.StrokeLineJoinProperty) is not of the correct type");
            Assert.AreEqual(PenLineJoin.Miter, retval, "GetValue(Shape.StrokeLineJoinProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeDashOffsetProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: Shape.StrokeDashOffsetProperty.Line");
            retval = Shape.StrokeDashOffsetProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeDashOffsetProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Shape.StrokeDashOffsetProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "Shape.StrokeDashOffsetProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeDashOffsetProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashOffsetProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Shape.StrokeDashOffsetProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(Shape.StrokeDashOffsetProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeDashCapProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: Shape.StrokeDashCapProperty.Line");
            retval = Shape.StrokeDashCapProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeDashCapProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineCap>(retval, "Shape.StrokeDashCapProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "Shape.StrokeDashCapProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeDashCapProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashCapProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineCap>(retval, "GetValue(Shape.StrokeDashCapProperty) is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeDashCapProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeDashArrayProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: Shape.StrokeDashArrayProperty.Line");
            retval = Shape.StrokeDashArrayProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Shape.StrokeDashArrayProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Shape.StrokeDashArrayProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashArrayProperty) should not have returned null");
            Assert.IsInstanceOfType<DoubleCollection>(retval, "GetValue(Shape.StrokeDashArrayProperty) is not of the correct type");
            Assert.IsNotNull(Shape.StretchProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: Shape.StretchProperty.Line");
            retval = Shape.StretchProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StretchProperty should be non-null value");
            Assert.IsInstanceOfType<Stretch>(retval, "Shape.StretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Stretch.None, retval, "Shape.StretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StretchProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StretchProperty) should not have returned null");
            Assert.IsInstanceOfType<Stretch>(retval, "GetValue(Shape.StretchProperty) is not of the correct type");
            Assert.AreEqual(Stretch.None, retval, "GetValue(Shape.StretchProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            Line widget = new Line ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: FrameworkElement.LanguageProperty.Line");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.Line");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.Line");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: FrameworkElement.WidthProperty.Line");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: FrameworkElement.HeightProperty.Line");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.Line");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.Line");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.Line");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.Line");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.Line");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.Line");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: FrameworkElement.MarginProperty.Line");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: FrameworkElement.StyleProperty.Line");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.Line");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: FrameworkElement.NameProperty.Line");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: FrameworkElement.TagProperty.Line");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: FrameworkElement.CursorProperty.Line");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: FrameworkElement.DataContextProperty.Line");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            Line widget = new Line ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: UIElement.AllowDropProperty.Line");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: UIElement.OpacityProperty.Line");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: UIElement.ClipProperty.Line");
            retval = UIElement.ClipProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: UIElement.RenderTransformProperty.Line");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: UIElement.EffectProperty.Line");
            retval = UIElement.EffectProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: UIElement.ProjectionProperty.Line");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: UIElement.OpacityMaskProperty.Line");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.Line");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.Line");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: UIElement.VisibilityProperty.Line");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.Line");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (Line)), "#metadata should not be null for: UIElement.CacheModeProperty.Line");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (Line)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_Line ()
        {
            Line widget = new Line ();

            Assert.AreEqual((double) 0, widget.X1, "X1 does not match the default value");
            Assert.AreEqual((double) 0, widget.Y1, "Y1 does not match the default value");
            Assert.AreEqual((double) 0, widget.X2, "X2 does not match the default value");
            Assert.AreEqual((double) 0, widget.Y2, "Y2 does not match the default value");
            Assert.IsNull(widget.Fill, "Fill should have returned null");
            Assert.IsNull(widget.Stroke, "Stroke should have returned null");
            Assert.AreEqual((double) 10, widget.StrokeMiterLimit, "StrokeMiterLimit does not match the default value");
            Assert.AreEqual((double) 1, widget.StrokeThickness, "StrokeThickness does not match the default value");
            Assert.AreEqual(PenLineCap.Flat, widget.StrokeStartLineCap, "StrokeStartLineCap does not match the default value");
            Assert.AreEqual(PenLineCap.Flat, widget.StrokeEndLineCap, "StrokeEndLineCap does not match the default value");
            Assert.AreEqual(PenLineJoin.Miter, widget.StrokeLineJoin, "StrokeLineJoin does not match the default value");
            Assert.AreEqual((double) 0, widget.StrokeDashOffset, "StrokeDashOffset does not match the default value");
            Assert.AreEqual(PenLineCap.Flat, widget.StrokeDashCap, "StrokeDashCap does not match the default value");
            Assert.IsNotNull(widget.StrokeDashArray, "StrokeDashArray should not have returned null");
            Assert.IsInstanceOfType<DoubleCollection>(widget.StrokeDashArray, "StrokeDashArray is not of the correct type");
            Assert.AreEqual(Stretch.None, widget.Stretch, "Stretch does not match the default value");
            Assert.IsNotNull(widget.GeometryTransform, "GeometryTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.GeometryTransform, "GeometryTransform is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            Line widget = new Line ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Shapes
{
    [TestClass]
    public partial class PolygonTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Polygon ()
        {
            Polygon widget = new Polygon ();
            object retval;

            retval = widget.ReadLocalValue(Polygon.FillRuleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Polygon.FillRuleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Polygon.PointsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Polygon.PointsProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Shape ()
        {
            Polygon widget = new Polygon ();
            object retval;

            retval = widget.ReadLocalValue(Shape.FillProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.FillProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeMiterLimitProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeMiterLimitProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeStartLineCapProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeStartLineCapProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeEndLineCapProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeEndLineCapProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeLineJoinProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeLineJoinProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeDashOffsetProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashOffsetProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeDashCapProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashCapProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeDashArrayProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashArrayProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StretchProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            Polygon widget = new Polygon ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            Polygon widget = new Polygon ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Polygon ()
        {
            Polygon widget = new Polygon ();
            object retval;

            Assert.IsNotNull(Polygon.FillRuleProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: Polygon.FillRuleProperty.Polygon");
            retval = Polygon.FillRuleProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Polygon.FillRuleProperty should be non-null value");
            Assert.IsInstanceOfType<FillRule>(retval, "Polygon.FillRuleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FillRule.EvenOdd, retval, "Polygon.FillRuleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Polygon.FillRuleProperty);
            Assert.IsNotNull(retval, "GetValue(Polygon.FillRuleProperty) should not have returned null");
            Assert.IsInstanceOfType<FillRule>(retval, "GetValue(Polygon.FillRuleProperty) is not of the correct type");
            Assert.AreEqual(FillRule.EvenOdd, retval, "GetValue(Polygon.FillRuleProperty) does not match the default value");
            Assert.IsNotNull(Polygon.PointsProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: Polygon.PointsProperty.Polygon");
            retval = Polygon.PointsProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Polygon.PointsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Polygon.PointsProperty);
            Assert.IsNotNull(retval, "GetValue(Polygon.PointsProperty) should not have returned null");
            Assert.IsInstanceOfType<PointCollection>(retval, "GetValue(Polygon.PointsProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_GetValue_Shape ()
        {
            Polygon widget = new Polygon ();
            object retval;

            Assert.IsNotNull(Shape.FillProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: Shape.FillProperty.Polygon");
            retval = Shape.FillProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Shape.FillProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Shape.FillProperty);
            Assert.IsNull(retval, "GetValue(Shape.FillProperty) should have returned null");
            Assert.IsNotNull(Shape.StrokeProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: Shape.StrokeProperty.Polygon");
            retval = Shape.StrokeProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Shape.StrokeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Shape.StrokeProperty);
            Assert.IsNull(retval, "GetValue(Shape.StrokeProperty) should have returned null");
            Assert.IsNotNull(Shape.StrokeMiterLimitProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: Shape.StrokeMiterLimitProperty.Polygon");
            retval = Shape.StrokeMiterLimitProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeMiterLimitProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Shape.StrokeMiterLimitProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 10, retval, "Shape.StrokeMiterLimitProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeMiterLimitProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeMiterLimitProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Shape.StrokeMiterLimitProperty) is not of the correct type");
            Assert.AreEqual((double) 10, retval, "GetValue(Shape.StrokeMiterLimitProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeThicknessProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: Shape.StrokeThicknessProperty.Polygon");
            retval = Shape.StrokeThicknessProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Shape.StrokeThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Shape.StrokeThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Shape.StrokeThicknessProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Shape.StrokeThicknessProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeStartLineCapProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: Shape.StrokeStartLineCapProperty.Polygon");
            retval = Shape.StrokeStartLineCapProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeStartLineCapProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineCap>(retval, "Shape.StrokeStartLineCapProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "Shape.StrokeStartLineCapProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeStartLineCapProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeStartLineCapProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineCap>(retval, "GetValue(Shape.StrokeStartLineCapProperty) is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeStartLineCapProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeEndLineCapProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: Shape.StrokeEndLineCapProperty.Polygon");
            retval = Shape.StrokeEndLineCapProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeEndLineCapProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineCap>(retval, "Shape.StrokeEndLineCapProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "Shape.StrokeEndLineCapProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeEndLineCapProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeEndLineCapProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineCap>(retval, "GetValue(Shape.StrokeEndLineCapProperty) is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeEndLineCapProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeLineJoinProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: Shape.StrokeLineJoinProperty.Polygon");
            retval = Shape.StrokeLineJoinProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeLineJoinProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineJoin>(retval, "Shape.StrokeLineJoinProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineJoin.Miter, retval, "Shape.StrokeLineJoinProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeLineJoinProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeLineJoinProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineJoin>(retval, "GetValue(Shape.StrokeLineJoinProperty) is not of the correct type");
            Assert.AreEqual(PenLineJoin.Miter, retval, "GetValue(Shape.StrokeLineJoinProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeDashOffsetProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: Shape.StrokeDashOffsetProperty.Polygon");
            retval = Shape.StrokeDashOffsetProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeDashOffsetProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Shape.StrokeDashOffsetProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "Shape.StrokeDashOffsetProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeDashOffsetProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashOffsetProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Shape.StrokeDashOffsetProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(Shape.StrokeDashOffsetProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeDashCapProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: Shape.StrokeDashCapProperty.Polygon");
            retval = Shape.StrokeDashCapProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeDashCapProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineCap>(retval, "Shape.StrokeDashCapProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "Shape.StrokeDashCapProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeDashCapProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashCapProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineCap>(retval, "GetValue(Shape.StrokeDashCapProperty) is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeDashCapProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeDashArrayProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: Shape.StrokeDashArrayProperty.Polygon");
            retval = Shape.StrokeDashArrayProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Shape.StrokeDashArrayProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Shape.StrokeDashArrayProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashArrayProperty) should not have returned null");
            Assert.IsInstanceOfType<DoubleCollection>(retval, "GetValue(Shape.StrokeDashArrayProperty) is not of the correct type");
            Assert.IsNotNull(Shape.StretchProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: Shape.StretchProperty.Polygon");
            retval = Shape.StretchProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StretchProperty should be non-null value");
            Assert.IsInstanceOfType<Stretch>(retval, "Shape.StretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Stretch.None, retval, "Shape.StretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StretchProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StretchProperty) should not have returned null");
            Assert.IsInstanceOfType<Stretch>(retval, "GetValue(Shape.StretchProperty) is not of the correct type");
            Assert.AreEqual(Stretch.None, retval, "GetValue(Shape.StretchProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            Polygon widget = new Polygon ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: FrameworkElement.LanguageProperty.Polygon");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.Polygon");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.Polygon");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: FrameworkElement.WidthProperty.Polygon");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: FrameworkElement.HeightProperty.Polygon");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.Polygon");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.Polygon");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.Polygon");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.Polygon");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.Polygon");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.Polygon");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: FrameworkElement.MarginProperty.Polygon");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: FrameworkElement.StyleProperty.Polygon");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.Polygon");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: FrameworkElement.NameProperty.Polygon");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: FrameworkElement.TagProperty.Polygon");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: FrameworkElement.CursorProperty.Polygon");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: FrameworkElement.DataContextProperty.Polygon");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            Polygon widget = new Polygon ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: UIElement.AllowDropProperty.Polygon");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: UIElement.OpacityProperty.Polygon");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: UIElement.ClipProperty.Polygon");
            retval = UIElement.ClipProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: UIElement.RenderTransformProperty.Polygon");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: UIElement.EffectProperty.Polygon");
            retval = UIElement.EffectProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: UIElement.ProjectionProperty.Polygon");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: UIElement.OpacityMaskProperty.Polygon");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.Polygon");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.Polygon");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: UIElement.VisibilityProperty.Polygon");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.Polygon");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (Polygon)), "#metadata should not be null for: UIElement.CacheModeProperty.Polygon");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (Polygon)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_Polygon ()
        {
            Polygon widget = new Polygon ();

            Assert.AreEqual(FillRule.EvenOdd, widget.FillRule, "FillRule does not match the default value");
            Assert.IsNotNull(widget.Points, "Points should not have returned null");
            Assert.IsInstanceOfType<PointCollection>(widget.Points, "Points is not of the correct type");
            Assert.IsNull(widget.Fill, "Fill should have returned null");
            Assert.IsNull(widget.Stroke, "Stroke should have returned null");
            Assert.AreEqual((double) 10, widget.StrokeMiterLimit, "StrokeMiterLimit does not match the default value");
            Assert.AreEqual((double) 1, widget.StrokeThickness, "StrokeThickness does not match the default value");
            Assert.AreEqual(PenLineCap.Flat, widget.StrokeStartLineCap, "StrokeStartLineCap does not match the default value");
            Assert.AreEqual(PenLineCap.Flat, widget.StrokeEndLineCap, "StrokeEndLineCap does not match the default value");
            Assert.AreEqual(PenLineJoin.Miter, widget.StrokeLineJoin, "StrokeLineJoin does not match the default value");
            Assert.AreEqual((double) 0, widget.StrokeDashOffset, "StrokeDashOffset does not match the default value");
            Assert.AreEqual(PenLineCap.Flat, widget.StrokeDashCap, "StrokeDashCap does not match the default value");
            Assert.IsNotNull(widget.StrokeDashArray, "StrokeDashArray should not have returned null");
            Assert.IsInstanceOfType<DoubleCollection>(widget.StrokeDashArray, "StrokeDashArray is not of the correct type");
            Assert.AreEqual(Stretch.None, widget.Stretch, "Stretch does not match the default value");
            Assert.IsNotNull(widget.GeometryTransform, "GeometryTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.GeometryTransform, "GeometryTransform is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            Polygon widget = new Polygon ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Shapes
{
    [TestClass]
    public partial class PolylineTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Polyline ()
        {
            Polyline widget = new Polyline ();
            object retval;

            retval = widget.ReadLocalValue(Polyline.FillRuleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Polyline.FillRuleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Polyline.PointsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Polyline.PointsProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Shape ()
        {
            Polyline widget = new Polyline ();
            object retval;

            retval = widget.ReadLocalValue(Shape.FillProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.FillProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeMiterLimitProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeMiterLimitProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeStartLineCapProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeStartLineCapProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeEndLineCapProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeEndLineCapProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeLineJoinProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeLineJoinProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeDashOffsetProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashOffsetProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeDashCapProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashCapProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeDashArrayProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashArrayProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StretchProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            Polyline widget = new Polyline ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            Polyline widget = new Polyline ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Polyline ()
        {
            Polyline widget = new Polyline ();
            object retval;

            Assert.IsNotNull(Polyline.FillRuleProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: Polyline.FillRuleProperty.Polyline");
            retval = Polyline.FillRuleProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Polyline.FillRuleProperty should be non-null value");
            Assert.IsInstanceOfType<FillRule>(retval, "Polyline.FillRuleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FillRule.EvenOdd, retval, "Polyline.FillRuleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Polyline.FillRuleProperty);
            Assert.IsNotNull(retval, "GetValue(Polyline.FillRuleProperty) should not have returned null");
            Assert.IsInstanceOfType<FillRule>(retval, "GetValue(Polyline.FillRuleProperty) is not of the correct type");
            Assert.AreEqual(FillRule.EvenOdd, retval, "GetValue(Polyline.FillRuleProperty) does not match the default value");
            Assert.IsNotNull(Polyline.PointsProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: Polyline.PointsProperty.Polyline");
            retval = Polyline.PointsProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Polyline.PointsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Polyline.PointsProperty);
            Assert.IsNotNull(retval, "GetValue(Polyline.PointsProperty) should not have returned null");
            Assert.IsInstanceOfType<PointCollection>(retval, "GetValue(Polyline.PointsProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_GetValue_Shape ()
        {
            Polyline widget = new Polyline ();
            object retval;

            Assert.IsNotNull(Shape.FillProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: Shape.FillProperty.Polyline");
            retval = Shape.FillProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Shape.FillProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Shape.FillProperty);
            Assert.IsNull(retval, "GetValue(Shape.FillProperty) should have returned null");
            Assert.IsNotNull(Shape.StrokeProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: Shape.StrokeProperty.Polyline");
            retval = Shape.StrokeProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Shape.StrokeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Shape.StrokeProperty);
            Assert.IsNull(retval, "GetValue(Shape.StrokeProperty) should have returned null");
            Assert.IsNotNull(Shape.StrokeMiterLimitProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: Shape.StrokeMiterLimitProperty.Polyline");
            retval = Shape.StrokeMiterLimitProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeMiterLimitProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Shape.StrokeMiterLimitProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 10, retval, "Shape.StrokeMiterLimitProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeMiterLimitProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeMiterLimitProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Shape.StrokeMiterLimitProperty) is not of the correct type");
            Assert.AreEqual((double) 10, retval, "GetValue(Shape.StrokeMiterLimitProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeThicknessProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: Shape.StrokeThicknessProperty.Polyline");
            retval = Shape.StrokeThicknessProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Shape.StrokeThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Shape.StrokeThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Shape.StrokeThicknessProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Shape.StrokeThicknessProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeStartLineCapProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: Shape.StrokeStartLineCapProperty.Polyline");
            retval = Shape.StrokeStartLineCapProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeStartLineCapProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineCap>(retval, "Shape.StrokeStartLineCapProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "Shape.StrokeStartLineCapProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeStartLineCapProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeStartLineCapProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineCap>(retval, "GetValue(Shape.StrokeStartLineCapProperty) is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeStartLineCapProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeEndLineCapProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: Shape.StrokeEndLineCapProperty.Polyline");
            retval = Shape.StrokeEndLineCapProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeEndLineCapProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineCap>(retval, "Shape.StrokeEndLineCapProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "Shape.StrokeEndLineCapProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeEndLineCapProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeEndLineCapProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineCap>(retval, "GetValue(Shape.StrokeEndLineCapProperty) is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeEndLineCapProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeLineJoinProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: Shape.StrokeLineJoinProperty.Polyline");
            retval = Shape.StrokeLineJoinProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeLineJoinProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineJoin>(retval, "Shape.StrokeLineJoinProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineJoin.Miter, retval, "Shape.StrokeLineJoinProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeLineJoinProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeLineJoinProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineJoin>(retval, "GetValue(Shape.StrokeLineJoinProperty) is not of the correct type");
            Assert.AreEqual(PenLineJoin.Miter, retval, "GetValue(Shape.StrokeLineJoinProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeDashOffsetProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: Shape.StrokeDashOffsetProperty.Polyline");
            retval = Shape.StrokeDashOffsetProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeDashOffsetProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Shape.StrokeDashOffsetProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "Shape.StrokeDashOffsetProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeDashOffsetProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashOffsetProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Shape.StrokeDashOffsetProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(Shape.StrokeDashOffsetProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeDashCapProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: Shape.StrokeDashCapProperty.Polyline");
            retval = Shape.StrokeDashCapProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeDashCapProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineCap>(retval, "Shape.StrokeDashCapProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "Shape.StrokeDashCapProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeDashCapProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashCapProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineCap>(retval, "GetValue(Shape.StrokeDashCapProperty) is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeDashCapProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeDashArrayProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: Shape.StrokeDashArrayProperty.Polyline");
            retval = Shape.StrokeDashArrayProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Shape.StrokeDashArrayProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Shape.StrokeDashArrayProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashArrayProperty) should not have returned null");
            Assert.IsInstanceOfType<DoubleCollection>(retval, "GetValue(Shape.StrokeDashArrayProperty) is not of the correct type");
            Assert.IsNotNull(Shape.StretchProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: Shape.StretchProperty.Polyline");
            retval = Shape.StretchProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StretchProperty should be non-null value");
            Assert.IsInstanceOfType<Stretch>(retval, "Shape.StretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Stretch.None, retval, "Shape.StretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StretchProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StretchProperty) should not have returned null");
            Assert.IsInstanceOfType<Stretch>(retval, "GetValue(Shape.StretchProperty) is not of the correct type");
            Assert.AreEqual(Stretch.None, retval, "GetValue(Shape.StretchProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            Polyline widget = new Polyline ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: FrameworkElement.LanguageProperty.Polyline");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.Polyline");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.Polyline");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: FrameworkElement.WidthProperty.Polyline");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: FrameworkElement.HeightProperty.Polyline");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.Polyline");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.Polyline");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.Polyline");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.Polyline");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.Polyline");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.Polyline");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: FrameworkElement.MarginProperty.Polyline");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: FrameworkElement.StyleProperty.Polyline");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.Polyline");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: FrameworkElement.NameProperty.Polyline");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: FrameworkElement.TagProperty.Polyline");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: FrameworkElement.CursorProperty.Polyline");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: FrameworkElement.DataContextProperty.Polyline");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            Polyline widget = new Polyline ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: UIElement.AllowDropProperty.Polyline");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: UIElement.OpacityProperty.Polyline");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: UIElement.ClipProperty.Polyline");
            retval = UIElement.ClipProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: UIElement.RenderTransformProperty.Polyline");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: UIElement.EffectProperty.Polyline");
            retval = UIElement.EffectProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: UIElement.ProjectionProperty.Polyline");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: UIElement.OpacityMaskProperty.Polyline");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.Polyline");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.Polyline");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: UIElement.VisibilityProperty.Polyline");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.Polyline");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (Polyline)), "#metadata should not be null for: UIElement.CacheModeProperty.Polyline");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (Polyline)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_Polyline ()
        {
            Polyline widget = new Polyline ();

            Assert.AreEqual(FillRule.EvenOdd, widget.FillRule, "FillRule does not match the default value");
            Assert.IsNotNull(widget.Points, "Points should not have returned null");
            Assert.IsInstanceOfType<PointCollection>(widget.Points, "Points is not of the correct type");
            Assert.IsNull(widget.Fill, "Fill should have returned null");
            Assert.IsNull(widget.Stroke, "Stroke should have returned null");
            Assert.AreEqual((double) 10, widget.StrokeMiterLimit, "StrokeMiterLimit does not match the default value");
            Assert.AreEqual((double) 1, widget.StrokeThickness, "StrokeThickness does not match the default value");
            Assert.AreEqual(PenLineCap.Flat, widget.StrokeStartLineCap, "StrokeStartLineCap does not match the default value");
            Assert.AreEqual(PenLineCap.Flat, widget.StrokeEndLineCap, "StrokeEndLineCap does not match the default value");
            Assert.AreEqual(PenLineJoin.Miter, widget.StrokeLineJoin, "StrokeLineJoin does not match the default value");
            Assert.AreEqual((double) 0, widget.StrokeDashOffset, "StrokeDashOffset does not match the default value");
            Assert.AreEqual(PenLineCap.Flat, widget.StrokeDashCap, "StrokeDashCap does not match the default value");
            Assert.IsNotNull(widget.StrokeDashArray, "StrokeDashArray should not have returned null");
            Assert.IsInstanceOfType<DoubleCollection>(widget.StrokeDashArray, "StrokeDashArray is not of the correct type");
            Assert.AreEqual(Stretch.None, widget.Stretch, "Stretch does not match the default value");
            Assert.IsNotNull(widget.GeometryTransform, "GeometryTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.GeometryTransform, "GeometryTransform is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            Polyline widget = new Polyline ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Shapes
{
    [TestClass]
    public partial class RectangleTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Rectangle ()
        {
            Rectangle widget = new Rectangle ();
            object retval;

            retval = widget.ReadLocalValue(Rectangle.RadiusXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Rectangle.RadiusXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Rectangle.RadiusYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Rectangle.RadiusYProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Shape ()
        {
            Rectangle widget = new Rectangle ();
            object retval;

            retval = widget.ReadLocalValue(Shape.FillProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.FillProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeMiterLimitProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeMiterLimitProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeStartLineCapProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeStartLineCapProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeEndLineCapProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeEndLineCapProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeLineJoinProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeLineJoinProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeDashOffsetProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashOffsetProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeDashCapProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashCapProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StrokeDashArrayProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StrokeDashArrayProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Shape.StretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Shape.StretchProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            Rectangle widget = new Rectangle ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            Rectangle widget = new Rectangle ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Rectangle ()
        {
            Rectangle widget = new Rectangle ();
            object retval;

            Assert.IsNotNull(Rectangle.RadiusXProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: Rectangle.RadiusXProperty.Rectangle");
            retval = Rectangle.RadiusXProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Rectangle.RadiusXProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Rectangle.RadiusXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "Rectangle.RadiusXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Rectangle.RadiusXProperty);
            Assert.IsNotNull(retval, "GetValue(Rectangle.RadiusXProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Rectangle.RadiusXProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(Rectangle.RadiusXProperty) does not match the default value");
            Assert.IsNotNull(Rectangle.RadiusYProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: Rectangle.RadiusYProperty.Rectangle");
            retval = Rectangle.RadiusYProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Rectangle.RadiusYProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Rectangle.RadiusYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "Rectangle.RadiusYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Rectangle.RadiusYProperty);
            Assert.IsNotNull(retval, "GetValue(Rectangle.RadiusYProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Rectangle.RadiusYProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(Rectangle.RadiusYProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Shape ()
        {
            Rectangle widget = new Rectangle ();
            object retval;

            Assert.IsNotNull(Shape.FillProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: Shape.FillProperty.Rectangle");
            retval = Shape.FillProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Shape.FillProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Shape.FillProperty);
            Assert.IsNull(retval, "GetValue(Shape.FillProperty) should have returned null");
            Assert.IsNotNull(Shape.StrokeProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: Shape.StrokeProperty.Rectangle");
            retval = Shape.StrokeProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Shape.StrokeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Shape.StrokeProperty);
            Assert.IsNull(retval, "GetValue(Shape.StrokeProperty) should have returned null");
            Assert.IsNotNull(Shape.StrokeMiterLimitProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: Shape.StrokeMiterLimitProperty.Rectangle");
            retval = Shape.StrokeMiterLimitProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeMiterLimitProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Shape.StrokeMiterLimitProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 10, retval, "Shape.StrokeMiterLimitProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeMiterLimitProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeMiterLimitProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Shape.StrokeMiterLimitProperty) is not of the correct type");
            Assert.AreEqual((double) 10, retval, "GetValue(Shape.StrokeMiterLimitProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeThicknessProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: Shape.StrokeThicknessProperty.Rectangle");
            retval = Shape.StrokeThicknessProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Shape.StrokeThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Shape.StrokeThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Shape.StrokeThicknessProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Shape.StrokeThicknessProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeStartLineCapProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: Shape.StrokeStartLineCapProperty.Rectangle");
            retval = Shape.StrokeStartLineCapProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeStartLineCapProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineCap>(retval, "Shape.StrokeStartLineCapProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "Shape.StrokeStartLineCapProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeStartLineCapProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeStartLineCapProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineCap>(retval, "GetValue(Shape.StrokeStartLineCapProperty) is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeStartLineCapProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeEndLineCapProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: Shape.StrokeEndLineCapProperty.Rectangle");
            retval = Shape.StrokeEndLineCapProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeEndLineCapProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineCap>(retval, "Shape.StrokeEndLineCapProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "Shape.StrokeEndLineCapProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeEndLineCapProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeEndLineCapProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineCap>(retval, "GetValue(Shape.StrokeEndLineCapProperty) is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeEndLineCapProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeLineJoinProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: Shape.StrokeLineJoinProperty.Rectangle");
            retval = Shape.StrokeLineJoinProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeLineJoinProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineJoin>(retval, "Shape.StrokeLineJoinProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineJoin.Miter, retval, "Shape.StrokeLineJoinProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeLineJoinProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeLineJoinProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineJoin>(retval, "GetValue(Shape.StrokeLineJoinProperty) is not of the correct type");
            Assert.AreEqual(PenLineJoin.Miter, retval, "GetValue(Shape.StrokeLineJoinProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeDashOffsetProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: Shape.StrokeDashOffsetProperty.Rectangle");
            retval = Shape.StrokeDashOffsetProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeDashOffsetProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Shape.StrokeDashOffsetProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "Shape.StrokeDashOffsetProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeDashOffsetProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashOffsetProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Shape.StrokeDashOffsetProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(Shape.StrokeDashOffsetProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeDashCapProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: Shape.StrokeDashCapProperty.Rectangle");
            retval = Shape.StrokeDashCapProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StrokeDashCapProperty should be non-null value");
            Assert.IsInstanceOfType<PenLineCap>(retval, "Shape.StrokeDashCapProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "Shape.StrokeDashCapProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StrokeDashCapProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashCapProperty) should not have returned null");
            Assert.IsInstanceOfType<PenLineCap>(retval, "GetValue(Shape.StrokeDashCapProperty) is not of the correct type");
            Assert.AreEqual(PenLineCap.Flat, retval, "GetValue(Shape.StrokeDashCapProperty) does not match the default value");
            Assert.IsNotNull(Shape.StrokeDashArrayProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: Shape.StrokeDashArrayProperty.Rectangle");
            retval = Shape.StrokeDashArrayProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Shape.StrokeDashArrayProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Shape.StrokeDashArrayProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StrokeDashArrayProperty) should not have returned null");
            Assert.IsInstanceOfType<DoubleCollection>(retval, "GetValue(Shape.StrokeDashArrayProperty) is not of the correct type");
            Assert.IsNotNull(Shape.StretchProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: Shape.StretchProperty.Rectangle");
            retval = Shape.StretchProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Shape.StretchProperty should be non-null value");
            Assert.IsInstanceOfType<Stretch>(retval, "Shape.StretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Stretch.Fill, retval, "Shape.StretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Shape.StretchProperty);
            Assert.IsNotNull(retval, "GetValue(Shape.StretchProperty) should not have returned null");
            Assert.IsInstanceOfType<Stretch>(retval, "GetValue(Shape.StretchProperty) is not of the correct type");
            Assert.AreEqual(Stretch.Fill, retval, "GetValue(Shape.StretchProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            Rectangle widget = new Rectangle ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: FrameworkElement.LanguageProperty.Rectangle");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.Rectangle");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.Rectangle");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: FrameworkElement.WidthProperty.Rectangle");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: FrameworkElement.HeightProperty.Rectangle");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.Rectangle");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.Rectangle");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.Rectangle");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.Rectangle");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.Rectangle");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.Rectangle");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: FrameworkElement.MarginProperty.Rectangle");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: FrameworkElement.StyleProperty.Rectangle");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.Rectangle");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: FrameworkElement.NameProperty.Rectangle");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: FrameworkElement.TagProperty.Rectangle");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: FrameworkElement.CursorProperty.Rectangle");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: FrameworkElement.DataContextProperty.Rectangle");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            Rectangle widget = new Rectangle ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: UIElement.AllowDropProperty.Rectangle");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: UIElement.OpacityProperty.Rectangle");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: UIElement.ClipProperty.Rectangle");
            retval = UIElement.ClipProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: UIElement.RenderTransformProperty.Rectangle");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: UIElement.EffectProperty.Rectangle");
            retval = UIElement.EffectProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: UIElement.ProjectionProperty.Rectangle");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: UIElement.OpacityMaskProperty.Rectangle");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.Rectangle");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.Rectangle");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: UIElement.VisibilityProperty.Rectangle");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.Rectangle");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (Rectangle)), "#metadata should not be null for: UIElement.CacheModeProperty.Rectangle");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (Rectangle)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_Rectangle ()
        {
            Rectangle widget = new Rectangle ();

            Assert.AreEqual((double) 0, widget.RadiusX, "RadiusX does not match the default value");
            Assert.AreEqual((double) 0, widget.RadiusY, "RadiusY does not match the default value");
            Assert.IsNull(widget.Fill, "Fill should have returned null");
            Assert.IsNull(widget.Stroke, "Stroke should have returned null");
            Assert.AreEqual((double) 10, widget.StrokeMiterLimit, "StrokeMiterLimit does not match the default value");
            Assert.AreEqual((double) 1, widget.StrokeThickness, "StrokeThickness does not match the default value");
            Assert.AreEqual(PenLineCap.Flat, widget.StrokeStartLineCap, "StrokeStartLineCap does not match the default value");
            Assert.AreEqual(PenLineCap.Flat, widget.StrokeEndLineCap, "StrokeEndLineCap does not match the default value");
            Assert.AreEqual(PenLineJoin.Miter, widget.StrokeLineJoin, "StrokeLineJoin does not match the default value");
            Assert.AreEqual((double) 0, widget.StrokeDashOffset, "StrokeDashOffset does not match the default value");
            Assert.AreEqual(PenLineCap.Flat, widget.StrokeDashCap, "StrokeDashCap does not match the default value");
            Assert.IsNotNull(widget.StrokeDashArray, "StrokeDashArray should not have returned null");
            Assert.IsInstanceOfType<DoubleCollection>(widget.StrokeDashArray, "StrokeDashArray is not of the correct type");
            Assert.AreEqual(Stretch.Fill, widget.Stretch, "Stretch does not match the default value");
            Assert.IsNotNull(widget.GeometryTransform, "GeometryTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.GeometryTransform, "GeometryTransform is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            Rectangle widget = new Rectangle ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Documents
{
    [TestClass]
    public partial class GlyphsTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Glyphs ()
        {
            Glyphs widget = new Glyphs ();
            object retval;

            retval = widget.ReadLocalValue(Glyphs.UnicodeStringProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Glyphs.UnicodeStringProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Glyphs.IndicesProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Glyphs.IndicesProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Glyphs.FontUriProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Glyphs.FontUriProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Glyphs.StyleSimulationsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Glyphs.StyleSimulationsProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Glyphs.FontRenderingEmSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Glyphs.FontRenderingEmSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Glyphs.OriginXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Glyphs.OriginXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Glyphs.OriginYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Glyphs.OriginYProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Glyphs.FillProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Glyphs.FillProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            Glyphs widget = new Glyphs ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            Glyphs widget = new Glyphs ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_GetValue_Glyphs ()
        {
            Glyphs widget = new Glyphs ();
            object retval;

            Assert.IsNotNull(Glyphs.UnicodeStringProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: Glyphs.UnicodeStringProperty.Glyphs");
            retval = Glyphs.UnicodeStringProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Glyphs.UnicodeStringProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "Glyphs.UnicodeStringProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "Glyphs.UnicodeStringProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Glyphs.UnicodeStringProperty);
            Assert.IsNotNull(retval, "GetValue(Glyphs.UnicodeStringProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(Glyphs.UnicodeStringProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(Glyphs.UnicodeStringProperty) does not match the default value");
            Assert.IsNotNull(Glyphs.IndicesProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: Glyphs.IndicesProperty.Glyphs");
            retval = Glyphs.IndicesProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Glyphs.IndicesProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "Glyphs.IndicesProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "Glyphs.IndicesProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Glyphs.IndicesProperty);
            Assert.IsNotNull(retval, "GetValue(Glyphs.IndicesProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(Glyphs.IndicesProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(Glyphs.IndicesProperty) does not match the default value");
            Assert.IsNotNull(Glyphs.FontUriProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: Glyphs.FontUriProperty.Glyphs");
            retval = Glyphs.FontUriProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Glyphs.FontUriProperty should be non-null value");
            Assert.IsInstanceOfType<Uri>(retval, "Glyphs.FontUriProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval.ToString (), "Glyphs.FontUriProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Glyphs.FontUriProperty);
            Assert.IsNotNull(retval, "GetValue(Glyphs.FontUriProperty) should not have returned null");
            Assert.IsInstanceOfType<Uri>(retval, "GetValue(Glyphs.FontUriProperty) is not of the correct type");
            Assert.AreEqual("", retval.ToString (), "GetValue(Glyphs.FontUriProperty) does not match the default value");
            Assert.IsNotNull(Glyphs.StyleSimulationsProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: Glyphs.StyleSimulationsProperty.Glyphs");
            retval = Glyphs.StyleSimulationsProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Glyphs.StyleSimulationsProperty should be non-null value");
            Assert.IsInstanceOfType<StyleSimulations>(retval, "Glyphs.StyleSimulationsProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(StyleSimulations.None, retval, "Glyphs.StyleSimulationsProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Glyphs.StyleSimulationsProperty);
            Assert.IsNotNull(retval, "GetValue(Glyphs.StyleSimulationsProperty) should not have returned null");
            Assert.IsInstanceOfType<StyleSimulations>(retval, "GetValue(Glyphs.StyleSimulationsProperty) is not of the correct type");
            Assert.AreEqual(StyleSimulations.None, retval, "GetValue(Glyphs.StyleSimulationsProperty) does not match the default value");
            Assert.IsNotNull(Glyphs.FontRenderingEmSizeProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: Glyphs.FontRenderingEmSizeProperty.Glyphs");
            retval = Glyphs.FontRenderingEmSizeProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Glyphs.FontRenderingEmSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Glyphs.FontRenderingEmSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "Glyphs.FontRenderingEmSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Glyphs.FontRenderingEmSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Glyphs.FontRenderingEmSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Glyphs.FontRenderingEmSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(Glyphs.FontRenderingEmSizeProperty) does not match the default value");
            Assert.IsNotNull(Glyphs.OriginXProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: Glyphs.OriginXProperty.Glyphs");
            retval = Glyphs.OriginXProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Glyphs.OriginXProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Glyphs.OriginXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) -3.40282346638529E+38, retval, "Glyphs.OriginXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Glyphs.OriginXProperty);
            Assert.IsNotNull(retval, "GetValue(Glyphs.OriginXProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Glyphs.OriginXProperty) is not of the correct type");
            Assert.AreEqual((double) -3.40282346638529E+38, retval, "GetValue(Glyphs.OriginXProperty) does not match the default value");
            Assert.IsNotNull(Glyphs.OriginYProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: Glyphs.OriginYProperty.Glyphs");
            retval = Glyphs.OriginYProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Glyphs.OriginYProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Glyphs.OriginYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) -3.40282346638529E+38, retval, "Glyphs.OriginYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Glyphs.OriginYProperty);
            Assert.IsNotNull(retval, "GetValue(Glyphs.OriginYProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Glyphs.OriginYProperty) is not of the correct type");
            Assert.AreEqual((double) -3.40282346638529E+38, retval, "GetValue(Glyphs.OriginYProperty) does not match the default value");
            Assert.IsNotNull(Glyphs.FillProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: Glyphs.FillProperty.Glyphs");
            retval = Glyphs.FillProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Glyphs.FillProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Glyphs.FillProperty);
            Assert.IsNull(retval, "GetValue(Glyphs.FillProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            Glyphs widget = new Glyphs ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: FrameworkElement.LanguageProperty.Glyphs");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.Glyphs");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.Glyphs");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: FrameworkElement.WidthProperty.Glyphs");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: FrameworkElement.HeightProperty.Glyphs");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.Glyphs");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.Glyphs");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.Glyphs");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.Glyphs");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.Glyphs");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.Glyphs");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: FrameworkElement.MarginProperty.Glyphs");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: FrameworkElement.StyleProperty.Glyphs");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.Glyphs");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: FrameworkElement.NameProperty.Glyphs");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: FrameworkElement.TagProperty.Glyphs");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: FrameworkElement.CursorProperty.Glyphs");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: FrameworkElement.DataContextProperty.Glyphs");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            Glyphs widget = new Glyphs ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: UIElement.AllowDropProperty.Glyphs");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: UIElement.OpacityProperty.Glyphs");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: UIElement.ClipProperty.Glyphs");
            retval = UIElement.ClipProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: UIElement.RenderTransformProperty.Glyphs");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: UIElement.EffectProperty.Glyphs");
            retval = UIElement.EffectProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: UIElement.ProjectionProperty.Glyphs");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: UIElement.OpacityMaskProperty.Glyphs");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.Glyphs");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.Glyphs");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: UIElement.VisibilityProperty.Glyphs");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.Glyphs");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (Glyphs)), "#metadata should not be null for: UIElement.CacheModeProperty.Glyphs");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (Glyphs)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_PropertyGetter_Glyphs ()
        {
            Glyphs widget = new Glyphs ();

            Assert.IsNotNull(widget.UnicodeString, "UnicodeString should not have returned null");
            Assert.AreEqual("", widget.UnicodeString, "UnicodeString does not match the default value");
            Assert.IsNotNull(widget.Indices, "Indices should not have returned null");
            Assert.AreEqual("", widget.Indices, "Indices does not match the default value");
            Assert.IsNotNull(widget.FontUri, "FontUri should not have returned null");
            Assert.AreEqual("", widget.FontUri.ToString (), "FontUri does not match the default value");
            Assert.AreEqual(StyleSimulations.None, widget.StyleSimulations, "StyleSimulations does not match the default value");
            Assert.AreEqual((double) 0, widget.FontRenderingEmSize, "FontRenderingEmSize does not match the default value");
            Assert.AreEqual((double) -3.40282346638529E+38, widget.OriginX, "OriginX does not match the default value");
            Assert.AreEqual((double) -3.40282346638529E+38, widget.OriginY, "OriginY does not match the default value");
            Assert.IsNull(widget.Fill, "Fill should have returned null");
            Assert.IsNull(widget.FontSource, "FontSource should have returned null");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_Glyphs ()
        {
            Glyphs widget = new Glyphs ();
            object retval;

            widget.SetValue(Glyphs.UnicodeStringProperty, "some text");
            retval = widget.GetValue(Glyphs.UnicodeStringProperty);
            Assert.AreEqual("some text", retval, "GetValue(Glyphs.UnicodeStringProperty) should have returned 'some text'");
            widget.SetValue(Glyphs.UnicodeStringProperty, null);
            retval = widget.GetValue(Glyphs.UnicodeStringProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(Glyphs.UnicodeStringProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(Glyphs.UnicodeStringProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(Glyphs.UnicodeStringProperty) should have returned String.Empty");
            widget.SetValue(Glyphs.IndicesProperty, "some text");
            retval = widget.GetValue(Glyphs.IndicesProperty);
            Assert.AreEqual("some text", retval, "GetValue(Glyphs.IndicesProperty) should have returned 'some text'");
            widget.SetValue(Glyphs.IndicesProperty, null);
            retval = widget.GetValue(Glyphs.IndicesProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(Glyphs.IndicesProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(Glyphs.IndicesProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(Glyphs.IndicesProperty) should have returned String.Empty");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            Glyphs widget = new Glyphs ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Documents
{
    [TestClass]
    public partial class RunTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Run ()
        {
            Run widget = new Run ();
            object retval;

            retval = widget.ReadLocalValue(Run.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Run.FlowDirectionProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Inline ()
        {
            Run widget = new Run ();
            object retval;

            retval = widget.ReadLocalValue(Inline.TextDecorationsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.TextDecorationsProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.LanguageProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_TextElement ()
        {
            Run widget = new Run ();
            object retval;

            retval = widget.ReadLocalValue(TextElement.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.LanguageProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Run ()
        {
            Run widget = new Run ();
            object retval;

            Assert.IsNotNull(Run.FlowDirectionProperty.GetMetadata (typeof (Run)), "#metadata should not be null for: Run.FlowDirectionProperty.Run");
            retval = Run.FlowDirectionProperty.GetMetadata (typeof (Run)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Run.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "Run.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "Run.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Run.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(Run.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(Run.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(Run.FlowDirectionProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Inline ()
        {
            Run widget = new Run ();
            object retval;

            Assert.IsNotNull(Inline.TextDecorationsProperty.GetMetadata (typeof (Run)), "#metadata should not be null for: Inline.TextDecorationsProperty.Run");
            retval = Inline.TextDecorationsProperty.GetMetadata (typeof (Run)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Inline.TextDecorationsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Inline.TextDecorationsProperty);
            Assert.IsNull(retval, "GetValue(Inline.TextDecorationsProperty) should have returned null");
            Assert.IsNotNull(Inline.FontSizeProperty.GetMetadata (typeof (Run)), "#metadata should not be null for: Inline.FontSizeProperty.Run");
            retval = Inline.FontSizeProperty.GetMetadata (typeof (Run)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Inline.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Inline.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Inline.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Inline.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontFamilyProperty.GetMetadata (typeof (Run)), "#metadata should not be null for: Inline.FontFamilyProperty.Run");
            retval = Inline.FontFamilyProperty.GetMetadata (typeof (Run)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Inline.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Inline.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Inline.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Inline.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontWeightProperty.GetMetadata (typeof (Run)), "#metadata should not be null for: Inline.FontWeightProperty.Run");
            retval = Inline.FontWeightProperty.GetMetadata (typeof (Run)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Inline.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Inline.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontStyleProperty.GetMetadata (typeof (Run)), "#metadata should not be null for: Inline.FontStyleProperty.Run");
            retval = Inline.FontStyleProperty.GetMetadata (typeof (Run)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Inline.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Inline.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontStretchProperty.GetMetadata (typeof (Run)), "#metadata should not be null for: Inline.FontStretchProperty.Run");
            retval = Inline.FontStretchProperty.GetMetadata (typeof (Run)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Inline.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Inline.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Inline.ForegroundProperty.GetMetadata (typeof (Run)), "#metadata should not be null for: Inline.ForegroundProperty.Run");
            retval = Inline.ForegroundProperty.GetMetadata (typeof (Run)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Inline.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Inline.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Inline.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Inline.LanguageProperty.GetMetadata (typeof (Run)), "#metadata should not be null for: Inline.LanguageProperty.Run");
            retval = Inline.LanguageProperty.GetMetadata (typeof (Run)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "Inline.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "Inline.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(Inline.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(Inline.LanguageProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_TextElement ()
        {
            Run widget = new Run ();
            object retval;

            Assert.IsNotNull(TextElement.FontSizeProperty.GetMetadata (typeof (Run)), "#metadata should not be null for: TextElement.FontSizeProperty.Run");
            retval = TextElement.FontSizeProperty.GetMetadata (typeof (Run)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "TextElement.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "TextElement.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(TextElement.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(TextElement.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontFamilyProperty.GetMetadata (typeof (Run)), "#metadata should not be null for: TextElement.FontFamilyProperty.Run");
            retval = TextElement.FontFamilyProperty.GetMetadata (typeof (Run)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "TextElement.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "TextElement.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(TextElement.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(TextElement.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontWeightProperty.GetMetadata (typeof (Run)), "#metadata should not be null for: TextElement.FontWeightProperty.Run");
            retval = TextElement.FontWeightProperty.GetMetadata (typeof (Run)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "TextElement.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(TextElement.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontStyleProperty.GetMetadata (typeof (Run)), "#metadata should not be null for: TextElement.FontStyleProperty.Run");
            retval = TextElement.FontStyleProperty.GetMetadata (typeof (Run)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "TextElement.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(TextElement.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontStretchProperty.GetMetadata (typeof (Run)), "#metadata should not be null for: TextElement.FontStretchProperty.Run");
            retval = TextElement.FontStretchProperty.GetMetadata (typeof (Run)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "TextElement.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(TextElement.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(TextElement.ForegroundProperty.GetMetadata (typeof (Run)), "#metadata should not be null for: TextElement.ForegroundProperty.Run");
            retval = TextElement.ForegroundProperty.GetMetadata (typeof (Run)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "TextElement.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(TextElement.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(TextElement.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(TextElement.LanguageProperty.GetMetadata (typeof (Run)), "#metadata should not be null for: TextElement.LanguageProperty.Run");
            retval = TextElement.LanguageProperty.GetMetadata (typeof (Run)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "TextElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "TextElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(TextElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(TextElement.LanguageProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_Run ()
        {
            Run widget = new Run ();

            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNull(widget.Text, "Text should have returned null");
            Assert.IsNull(widget.TextDecorations, "TextDecorations should have returned null");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_Inline ()
        {
            Run widget = new Run ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_TextElement ()
        {
            Run widget = new Run ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

    }
}
namespace MoonTest.System.Windows.Documents
{
    [TestClass]
    public partial class ParagraphTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Block ()
        {
            Paragraph widget = new Paragraph ();
            object retval;

            retval = widget.ReadLocalValue(Block.TextAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Block.TextAlignmentProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_TextElement ()
        {
            Paragraph widget = new Paragraph ();
            object retval;

            retval = widget.ReadLocalValue(TextElement.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.LanguageProperty) should not have a value by default");
        }

        [TestMethod]
        [MoonlightBug ("If you check new Paragraph ().TextAlignment it is a non-locally set value of 'Left'. The PropertyMetadata is the only place 'Center' shows up, so it looks like a SL bug")]
        public void Test_GetValue_Block ()
        {
            Paragraph widget = new Paragraph ();
            object retval;

            Assert.IsNotNull(Block.TextAlignmentProperty.GetMetadata (typeof (Paragraph)), "#metadata should not be null for: Block.TextAlignmentProperty.Paragraph");
            retval = Block.TextAlignmentProperty.GetMetadata (typeof (Paragraph)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Block.TextAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<TextAlignment>(retval, "Block.TextAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(TextAlignment.Center, retval, "Block.TextAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Block.TextAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Block.TextAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<TextAlignment>(retval, "GetValue(Block.TextAlignmentProperty) is not of the correct type");
            Assert.AreEqual(TextAlignment.Left, retval, "GetValue(Block.TextAlignmentProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_TextElement ()
        {
            Paragraph widget = new Paragraph ();
            object retval;

            Assert.IsNotNull(TextElement.FontSizeProperty.GetMetadata (typeof (Paragraph)), "#metadata should not be null for: TextElement.FontSizeProperty.Paragraph");
            retval = TextElement.FontSizeProperty.GetMetadata (typeof (Paragraph)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "TextElement.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "TextElement.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(TextElement.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(TextElement.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontFamilyProperty.GetMetadata (typeof (Paragraph)), "#metadata should not be null for: TextElement.FontFamilyProperty.Paragraph");
            retval = TextElement.FontFamilyProperty.GetMetadata (typeof (Paragraph)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "TextElement.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "TextElement.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(TextElement.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(TextElement.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontWeightProperty.GetMetadata (typeof (Paragraph)), "#metadata should not be null for: TextElement.FontWeightProperty.Paragraph");
            retval = TextElement.FontWeightProperty.GetMetadata (typeof (Paragraph)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "TextElement.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(TextElement.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontStyleProperty.GetMetadata (typeof (Paragraph)), "#metadata should not be null for: TextElement.FontStyleProperty.Paragraph");
            retval = TextElement.FontStyleProperty.GetMetadata (typeof (Paragraph)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "TextElement.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(TextElement.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontStretchProperty.GetMetadata (typeof (Paragraph)), "#metadata should not be null for: TextElement.FontStretchProperty.Paragraph");
            retval = TextElement.FontStretchProperty.GetMetadata (typeof (Paragraph)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "TextElement.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(TextElement.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(TextElement.ForegroundProperty.GetMetadata (typeof (Paragraph)), "#metadata should not be null for: TextElement.ForegroundProperty.Paragraph");
            retval = TextElement.ForegroundProperty.GetMetadata (typeof (Paragraph)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "TextElement.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(TextElement.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(TextElement.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(TextElement.LanguageProperty.GetMetadata (typeof (Paragraph)), "#metadata should not be null for: TextElement.LanguageProperty.Paragraph");
            retval = TextElement.LanguageProperty.GetMetadata (typeof (Paragraph)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "TextElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "TextElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(TextElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(TextElement.LanguageProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_Paragraph ()
        {
            Paragraph widget = new Paragraph ();

            Assert.IsNotNull(widget.Inlines, "Inlines should not have returned null");
            Assert.IsInstanceOfType<InlineCollection>(widget.Inlines, "Inlines is not of the correct type");
            Assert.AreEqual(TextAlignment.Left, widget.TextAlignment, "TextAlignment does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_Block ()
        {
            Paragraph widget = new Paragraph ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_TextElement ()
        {
            Paragraph widget = new Paragraph ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

    }
}
namespace MoonTest.System.Windows.Documents
{
    [TestClass]
    public partial class SpanTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Inline ()
        {
            Span widget = new Span ();
            object retval;

            retval = widget.ReadLocalValue(Inline.TextDecorationsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.TextDecorationsProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.LanguageProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_TextElement ()
        {
            Span widget = new Span ();
            object retval;

            retval = widget.ReadLocalValue(TextElement.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.LanguageProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Inline ()
        {
            Span widget = new Span ();
            object retval;

            Assert.IsNotNull(Inline.TextDecorationsProperty.GetMetadata (typeof (Span)), "#metadata should not be null for: Inline.TextDecorationsProperty.Span");
            retval = Inline.TextDecorationsProperty.GetMetadata (typeof (Span)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Inline.TextDecorationsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Inline.TextDecorationsProperty);
            Assert.IsNull(retval, "GetValue(Inline.TextDecorationsProperty) should have returned null");
            Assert.IsNotNull(Inline.FontSizeProperty.GetMetadata (typeof (Span)), "#metadata should not be null for: Inline.FontSizeProperty.Span");
            retval = Inline.FontSizeProperty.GetMetadata (typeof (Span)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Inline.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Inline.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Inline.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Inline.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontFamilyProperty.GetMetadata (typeof (Span)), "#metadata should not be null for: Inline.FontFamilyProperty.Span");
            retval = Inline.FontFamilyProperty.GetMetadata (typeof (Span)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Inline.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Inline.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Inline.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Inline.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontWeightProperty.GetMetadata (typeof (Span)), "#metadata should not be null for: Inline.FontWeightProperty.Span");
            retval = Inline.FontWeightProperty.GetMetadata (typeof (Span)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Inline.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Inline.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontStyleProperty.GetMetadata (typeof (Span)), "#metadata should not be null for: Inline.FontStyleProperty.Span");
            retval = Inline.FontStyleProperty.GetMetadata (typeof (Span)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Inline.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Inline.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontStretchProperty.GetMetadata (typeof (Span)), "#metadata should not be null for: Inline.FontStretchProperty.Span");
            retval = Inline.FontStretchProperty.GetMetadata (typeof (Span)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Inline.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Inline.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Inline.ForegroundProperty.GetMetadata (typeof (Span)), "#metadata should not be null for: Inline.ForegroundProperty.Span");
            retval = Inline.ForegroundProperty.GetMetadata (typeof (Span)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Inline.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Inline.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Inline.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Inline.LanguageProperty.GetMetadata (typeof (Span)), "#metadata should not be null for: Inline.LanguageProperty.Span");
            retval = Inline.LanguageProperty.GetMetadata (typeof (Span)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "Inline.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "Inline.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(Inline.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(Inline.LanguageProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_TextElement ()
        {
            Span widget = new Span ();
            object retval;

            Assert.IsNotNull(TextElement.FontSizeProperty.GetMetadata (typeof (Span)), "#metadata should not be null for: TextElement.FontSizeProperty.Span");
            retval = TextElement.FontSizeProperty.GetMetadata (typeof (Span)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "TextElement.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "TextElement.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(TextElement.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(TextElement.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontFamilyProperty.GetMetadata (typeof (Span)), "#metadata should not be null for: TextElement.FontFamilyProperty.Span");
            retval = TextElement.FontFamilyProperty.GetMetadata (typeof (Span)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "TextElement.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "TextElement.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(TextElement.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(TextElement.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontWeightProperty.GetMetadata (typeof (Span)), "#metadata should not be null for: TextElement.FontWeightProperty.Span");
            retval = TextElement.FontWeightProperty.GetMetadata (typeof (Span)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "TextElement.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(TextElement.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontStyleProperty.GetMetadata (typeof (Span)), "#metadata should not be null for: TextElement.FontStyleProperty.Span");
            retval = TextElement.FontStyleProperty.GetMetadata (typeof (Span)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "TextElement.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(TextElement.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontStretchProperty.GetMetadata (typeof (Span)), "#metadata should not be null for: TextElement.FontStretchProperty.Span");
            retval = TextElement.FontStretchProperty.GetMetadata (typeof (Span)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "TextElement.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(TextElement.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(TextElement.ForegroundProperty.GetMetadata (typeof (Span)), "#metadata should not be null for: TextElement.ForegroundProperty.Span");
            retval = TextElement.ForegroundProperty.GetMetadata (typeof (Span)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "TextElement.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(TextElement.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(TextElement.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(TextElement.LanguageProperty.GetMetadata (typeof (Span)), "#metadata should not be null for: TextElement.LanguageProperty.Span");
            retval = TextElement.LanguageProperty.GetMetadata (typeof (Span)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "TextElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "TextElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(TextElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(TextElement.LanguageProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_Span ()
        {
            Span widget = new Span ();

            Assert.IsNotNull(widget.Inlines, "Inlines should not have returned null");
            Assert.IsInstanceOfType<InlineCollection>(widget.Inlines, "Inlines is not of the correct type");
            Assert.IsNull(widget.TextDecorations, "TextDecorations should have returned null");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_Inline ()
        {
            Span widget = new Span ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_TextElement ()
        {
            Span widget = new Span ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

    }
}
namespace MoonTest.System.Windows.Documents
{
    [TestClass]
    public partial class UnderlineTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Inline ()
        {
            Underline widget = new Underline ();
            object retval;

            retval = widget.ReadLocalValue(Inline.TextDecorationsProperty);
            Assert.IsNotNull(retval, "ReadLocalValue(Inline.TextDecorationsProperty) should not have returned null");
            Assert.IsInstanceOfType<TextDecorationCollection>(retval, "ReadLocalValue(Inline.TextDecorationsProperty) is not of the correct type");
            Assert.AreEqual("System.Windows.TextDecorationCollection", retval.ToString (), "ReadLocalValue(Inline.TextDecorationsProperty) does not match the default value");
            retval = widget.ReadLocalValue(Inline.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.LanguageProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_TextElement ()
        {
            Underline widget = new Underline ();
            object retval;

            retval = widget.ReadLocalValue(TextElement.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.LanguageProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Inline ()
        {
            Underline widget = new Underline ();
            object retval;

            Assert.IsNotNull(Inline.TextDecorationsProperty.GetMetadata (typeof (Underline)), "#metadata should not be null for: Inline.TextDecorationsProperty.Underline");
            retval = Inline.TextDecorationsProperty.GetMetadata (typeof (Underline)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Inline.TextDecorationsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Inline.TextDecorationsProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.TextDecorationsProperty) should not have returned null");
            Assert.IsInstanceOfType<TextDecorationCollection>(retval, "GetValue(Inline.TextDecorationsProperty) is not of the correct type");
            Assert.AreEqual("System.Windows.TextDecorationCollection", retval.ToString (), "GetValue(Inline.TextDecorationsProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontSizeProperty.GetMetadata (typeof (Underline)), "#metadata should not be null for: Inline.FontSizeProperty.Underline");
            retval = Inline.FontSizeProperty.GetMetadata (typeof (Underline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Inline.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Inline.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Inline.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Inline.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontFamilyProperty.GetMetadata (typeof (Underline)), "#metadata should not be null for: Inline.FontFamilyProperty.Underline");
            retval = Inline.FontFamilyProperty.GetMetadata (typeof (Underline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Inline.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Inline.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Inline.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Inline.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontWeightProperty.GetMetadata (typeof (Underline)), "#metadata should not be null for: Inline.FontWeightProperty.Underline");
            retval = Inline.FontWeightProperty.GetMetadata (typeof (Underline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Inline.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Inline.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontStyleProperty.GetMetadata (typeof (Underline)), "#metadata should not be null for: Inline.FontStyleProperty.Underline");
            retval = Inline.FontStyleProperty.GetMetadata (typeof (Underline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Inline.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Inline.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontStretchProperty.GetMetadata (typeof (Underline)), "#metadata should not be null for: Inline.FontStretchProperty.Underline");
            retval = Inline.FontStretchProperty.GetMetadata (typeof (Underline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Inline.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Inline.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Inline.ForegroundProperty.GetMetadata (typeof (Underline)), "#metadata should not be null for: Inline.ForegroundProperty.Underline");
            retval = Inline.ForegroundProperty.GetMetadata (typeof (Underline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Inline.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Inline.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Inline.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Inline.LanguageProperty.GetMetadata (typeof (Underline)), "#metadata should not be null for: Inline.LanguageProperty.Underline");
            retval = Inline.LanguageProperty.GetMetadata (typeof (Underline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "Inline.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "Inline.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(Inline.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(Inline.LanguageProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_TextElement ()
        {
            Underline widget = new Underline ();
            object retval;

            Assert.IsNotNull(TextElement.FontSizeProperty.GetMetadata (typeof (Underline)), "#metadata should not be null for: TextElement.FontSizeProperty.Underline");
            retval = TextElement.FontSizeProperty.GetMetadata (typeof (Underline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "TextElement.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "TextElement.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(TextElement.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(TextElement.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontFamilyProperty.GetMetadata (typeof (Underline)), "#metadata should not be null for: TextElement.FontFamilyProperty.Underline");
            retval = TextElement.FontFamilyProperty.GetMetadata (typeof (Underline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "TextElement.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "TextElement.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(TextElement.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(TextElement.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontWeightProperty.GetMetadata (typeof (Underline)), "#metadata should not be null for: TextElement.FontWeightProperty.Underline");
            retval = TextElement.FontWeightProperty.GetMetadata (typeof (Underline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "TextElement.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(TextElement.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontStyleProperty.GetMetadata (typeof (Underline)), "#metadata should not be null for: TextElement.FontStyleProperty.Underline");
            retval = TextElement.FontStyleProperty.GetMetadata (typeof (Underline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "TextElement.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(TextElement.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontStretchProperty.GetMetadata (typeof (Underline)), "#metadata should not be null for: TextElement.FontStretchProperty.Underline");
            retval = TextElement.FontStretchProperty.GetMetadata (typeof (Underline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "TextElement.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(TextElement.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(TextElement.ForegroundProperty.GetMetadata (typeof (Underline)), "#metadata should not be null for: TextElement.ForegroundProperty.Underline");
            retval = TextElement.ForegroundProperty.GetMetadata (typeof (Underline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "TextElement.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(TextElement.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(TextElement.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(TextElement.LanguageProperty.GetMetadata (typeof (Underline)), "#metadata should not be null for: TextElement.LanguageProperty.Underline");
            retval = TextElement.LanguageProperty.GetMetadata (typeof (Underline)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "TextElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "TextElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(TextElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(TextElement.LanguageProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_Underline ()
        {
            Underline widget = new Underline ();

            Assert.IsNotNull(widget.Inlines, "Inlines should not have returned null");
            Assert.IsInstanceOfType<InlineCollection>(widget.Inlines, "Inlines is not of the correct type");
            Assert.IsNotNull(widget.TextDecorations, "TextDecorations should not have returned null");
            Assert.AreEqual("System.Windows.TextDecorationCollection", widget.TextDecorations.ToString (), "TextDecorations does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_Span ()
        {
            Underline widget = new Underline ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_Inline ()
        {
            Underline widget = new Underline ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_TextElement ()
        {
            Underline widget = new Underline ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

    }
}
namespace MoonTest.System.Windows.Documents
{
    [TestClass]
    public partial class ItalicTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Inline ()
        {
            Italic widget = new Italic ();
            object retval;

            retval = widget.ReadLocalValue(Inline.TextDecorationsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.TextDecorationsProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontStyleProperty);
            Assert.IsNotNull(retval, "ReadLocalValue(Inline.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "ReadLocalValue(Inline.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Italic", retval.ToString (), "ReadLocalValue(Inline.FontStyleProperty) does not match the default value");
            retval = widget.ReadLocalValue(Inline.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.LanguageProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_TextElement ()
        {
            Italic widget = new Italic ();
            object retval;

            retval = widget.ReadLocalValue(TextElement.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontStyleProperty);
            Assert.IsNotNull(retval, "ReadLocalValue(TextElement.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "ReadLocalValue(TextElement.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Italic", retval.ToString (), "ReadLocalValue(TextElement.FontStyleProperty) does not match the default value");
            retval = widget.ReadLocalValue(TextElement.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.LanguageProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Inline ()
        {
            Italic widget = new Italic ();
            object retval;

            Assert.IsNotNull(Inline.TextDecorationsProperty.GetMetadata (typeof (Italic)), "#metadata should not be null for: Inline.TextDecorationsProperty.Italic");
            retval = Inline.TextDecorationsProperty.GetMetadata (typeof (Italic)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Inline.TextDecorationsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Inline.TextDecorationsProperty);
            Assert.IsNull(retval, "GetValue(Inline.TextDecorationsProperty) should have returned null");
            Assert.IsNotNull(Inline.FontSizeProperty.GetMetadata (typeof (Italic)), "#metadata should not be null for: Inline.FontSizeProperty.Italic");
            retval = Inline.FontSizeProperty.GetMetadata (typeof (Italic)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Inline.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Inline.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Inline.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Inline.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontFamilyProperty.GetMetadata (typeof (Italic)), "#metadata should not be null for: Inline.FontFamilyProperty.Italic");
            retval = Inline.FontFamilyProperty.GetMetadata (typeof (Italic)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Inline.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Inline.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Inline.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Inline.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontWeightProperty.GetMetadata (typeof (Italic)), "#metadata should not be null for: Inline.FontWeightProperty.Italic");
            retval = Inline.FontWeightProperty.GetMetadata (typeof (Italic)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Inline.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Inline.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontStyleProperty.GetMetadata (typeof (Italic)), "#metadata should not be null for: Inline.FontStyleProperty.Italic");
            retval = Inline.FontStyleProperty.GetMetadata (typeof (Italic)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Inline.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Inline.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Italic", retval.ToString (), "GetValue(Inline.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontStretchProperty.GetMetadata (typeof (Italic)), "#metadata should not be null for: Inline.FontStretchProperty.Italic");
            retval = Inline.FontStretchProperty.GetMetadata (typeof (Italic)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Inline.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Inline.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Inline.ForegroundProperty.GetMetadata (typeof (Italic)), "#metadata should not be null for: Inline.ForegroundProperty.Italic");
            retval = Inline.ForegroundProperty.GetMetadata (typeof (Italic)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Inline.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Inline.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Inline.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Inline.LanguageProperty.GetMetadata (typeof (Italic)), "#metadata should not be null for: Inline.LanguageProperty.Italic");
            retval = Inline.LanguageProperty.GetMetadata (typeof (Italic)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "Inline.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "Inline.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(Inline.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(Inline.LanguageProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_TextElement ()
        {
            Italic widget = new Italic ();
            object retval;

            Assert.IsNotNull(TextElement.FontSizeProperty.GetMetadata (typeof (Italic)), "#metadata should not be null for: TextElement.FontSizeProperty.Italic");
            retval = TextElement.FontSizeProperty.GetMetadata (typeof (Italic)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "TextElement.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "TextElement.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(TextElement.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(TextElement.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontFamilyProperty.GetMetadata (typeof (Italic)), "#metadata should not be null for: TextElement.FontFamilyProperty.Italic");
            retval = TextElement.FontFamilyProperty.GetMetadata (typeof (Italic)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "TextElement.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "TextElement.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(TextElement.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(TextElement.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontWeightProperty.GetMetadata (typeof (Italic)), "#metadata should not be null for: TextElement.FontWeightProperty.Italic");
            retval = TextElement.FontWeightProperty.GetMetadata (typeof (Italic)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "TextElement.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(TextElement.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontStyleProperty.GetMetadata (typeof (Italic)), "#metadata should not be null for: TextElement.FontStyleProperty.Italic");
            retval = TextElement.FontStyleProperty.GetMetadata (typeof (Italic)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "TextElement.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(TextElement.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Italic", retval.ToString (), "GetValue(TextElement.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontStretchProperty.GetMetadata (typeof (Italic)), "#metadata should not be null for: TextElement.FontStretchProperty.Italic");
            retval = TextElement.FontStretchProperty.GetMetadata (typeof (Italic)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "TextElement.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(TextElement.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(TextElement.ForegroundProperty.GetMetadata (typeof (Italic)), "#metadata should not be null for: TextElement.ForegroundProperty.Italic");
            retval = TextElement.ForegroundProperty.GetMetadata (typeof (Italic)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "TextElement.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(TextElement.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(TextElement.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(TextElement.LanguageProperty.GetMetadata (typeof (Italic)), "#metadata should not be null for: TextElement.LanguageProperty.Italic");
            retval = TextElement.LanguageProperty.GetMetadata (typeof (Italic)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "TextElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "TextElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(TextElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(TextElement.LanguageProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_Italic ()
        {
            Italic widget = new Italic ();

            Assert.IsNotNull(widget.Inlines, "Inlines should not have returned null");
            Assert.IsInstanceOfType<InlineCollection>(widget.Inlines, "Inlines is not of the correct type");
            Assert.IsNull(widget.TextDecorations, "TextDecorations should have returned null");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.AreEqual("Italic", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_Span ()
        {
            Italic widget = new Italic ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_Inline ()
        {
            Italic widget = new Italic ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_TextElement ()
        {
            Italic widget = new Italic ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

    }
}
namespace MoonTest.System.Windows.Documents
{
    [TestClass]
    public partial class BoldTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Inline ()
        {
            Bold widget = new Bold ();
            object retval;

            retval = widget.ReadLocalValue(Inline.TextDecorationsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.TextDecorationsProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontWeightProperty);
            Assert.IsNotNull(retval, "ReadLocalValue(Inline.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "ReadLocalValue(Inline.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Bold", retval.ToString (), "ReadLocalValue(Inline.FontWeightProperty) does not match the default value");
            retval = widget.ReadLocalValue(Inline.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.LanguageProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_TextElement ()
        {
            Bold widget = new Bold ();
            object retval;

            retval = widget.ReadLocalValue(TextElement.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontWeightProperty);
            Assert.IsNotNull(retval, "ReadLocalValue(TextElement.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "ReadLocalValue(TextElement.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Bold", retval.ToString (), "ReadLocalValue(TextElement.FontWeightProperty) does not match the default value");
            retval = widget.ReadLocalValue(TextElement.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.LanguageProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Inline ()
        {
            Bold widget = new Bold ();
            object retval;

            Assert.IsNotNull(Inline.TextDecorationsProperty.GetMetadata (typeof (Bold)), "#metadata should not be null for: Inline.TextDecorationsProperty.Bold");
            retval = Inline.TextDecorationsProperty.GetMetadata (typeof (Bold)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Inline.TextDecorationsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Inline.TextDecorationsProperty);
            Assert.IsNull(retval, "GetValue(Inline.TextDecorationsProperty) should have returned null");
            Assert.IsNotNull(Inline.FontSizeProperty.GetMetadata (typeof (Bold)), "#metadata should not be null for: Inline.FontSizeProperty.Bold");
            retval = Inline.FontSizeProperty.GetMetadata (typeof (Bold)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Inline.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Inline.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Inline.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Inline.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontFamilyProperty.GetMetadata (typeof (Bold)), "#metadata should not be null for: Inline.FontFamilyProperty.Bold");
            retval = Inline.FontFamilyProperty.GetMetadata (typeof (Bold)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Inline.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Inline.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Inline.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Inline.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontWeightProperty.GetMetadata (typeof (Bold)), "#metadata should not be null for: Inline.FontWeightProperty.Bold");
            retval = Inline.FontWeightProperty.GetMetadata (typeof (Bold)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Inline.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Inline.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Bold", retval.ToString (), "GetValue(Inline.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontStyleProperty.GetMetadata (typeof (Bold)), "#metadata should not be null for: Inline.FontStyleProperty.Bold");
            retval = Inline.FontStyleProperty.GetMetadata (typeof (Bold)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Inline.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Inline.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontStretchProperty.GetMetadata (typeof (Bold)), "#metadata should not be null for: Inline.FontStretchProperty.Bold");
            retval = Inline.FontStretchProperty.GetMetadata (typeof (Bold)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Inline.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Inline.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Inline.ForegroundProperty.GetMetadata (typeof (Bold)), "#metadata should not be null for: Inline.ForegroundProperty.Bold");
            retval = Inline.ForegroundProperty.GetMetadata (typeof (Bold)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Inline.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Inline.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Inline.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Inline.LanguageProperty.GetMetadata (typeof (Bold)), "#metadata should not be null for: Inline.LanguageProperty.Bold");
            retval = Inline.LanguageProperty.GetMetadata (typeof (Bold)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "Inline.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "Inline.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(Inline.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(Inline.LanguageProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_TextElement ()
        {
            Bold widget = new Bold ();
            object retval;

            Assert.IsNotNull(TextElement.FontSizeProperty.GetMetadata (typeof (Bold)), "#metadata should not be null for: TextElement.FontSizeProperty.Bold");
            retval = TextElement.FontSizeProperty.GetMetadata (typeof (Bold)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "TextElement.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "TextElement.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(TextElement.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(TextElement.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontFamilyProperty.GetMetadata (typeof (Bold)), "#metadata should not be null for: TextElement.FontFamilyProperty.Bold");
            retval = TextElement.FontFamilyProperty.GetMetadata (typeof (Bold)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "TextElement.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "TextElement.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(TextElement.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(TextElement.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontWeightProperty.GetMetadata (typeof (Bold)), "#metadata should not be null for: TextElement.FontWeightProperty.Bold");
            retval = TextElement.FontWeightProperty.GetMetadata (typeof (Bold)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "TextElement.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(TextElement.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Bold", retval.ToString (), "GetValue(TextElement.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontStyleProperty.GetMetadata (typeof (Bold)), "#metadata should not be null for: TextElement.FontStyleProperty.Bold");
            retval = TextElement.FontStyleProperty.GetMetadata (typeof (Bold)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "TextElement.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(TextElement.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontStretchProperty.GetMetadata (typeof (Bold)), "#metadata should not be null for: TextElement.FontStretchProperty.Bold");
            retval = TextElement.FontStretchProperty.GetMetadata (typeof (Bold)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "TextElement.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(TextElement.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(TextElement.ForegroundProperty.GetMetadata (typeof (Bold)), "#metadata should not be null for: TextElement.ForegroundProperty.Bold");
            retval = TextElement.ForegroundProperty.GetMetadata (typeof (Bold)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "TextElement.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(TextElement.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(TextElement.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(TextElement.LanguageProperty.GetMetadata (typeof (Bold)), "#metadata should not be null for: TextElement.LanguageProperty.Bold");
            retval = TextElement.LanguageProperty.GetMetadata (typeof (Bold)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "TextElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "TextElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(TextElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(TextElement.LanguageProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_Bold ()
        {
            Bold widget = new Bold ();

            Assert.IsNotNull(widget.Inlines, "Inlines should not have returned null");
            Assert.IsInstanceOfType<InlineCollection>(widget.Inlines, "Inlines is not of the correct type");
            Assert.IsNull(widget.TextDecorations, "TextDecorations should have returned null");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual("Bold", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_Span ()
        {
            Bold widget = new Bold ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_Inline ()
        {
            Bold widget = new Bold ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_TextElement ()
        {
            Bold widget = new Bold ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

    }
}
namespace MoonTest.System.Windows.Documents
{
    [TestClass]
    public partial class HyperlinkTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Hyperlink ()
        {
            Hyperlink widget = new Hyperlink ();
            object retval;

            retval = widget.ReadLocalValue(Hyperlink.TargetNameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Hyperlink.TargetNameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Hyperlink.NavigateUriProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Hyperlink.NavigateUriProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Hyperlink.MouseOverForegroundProperty);
            Assert.IsNotNull(retval, "ReadLocalValue(Hyperlink.MouseOverForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "ReadLocalValue(Hyperlink.MouseOverForegroundProperty) is not of the correct type");
            retval = widget.ReadLocalValue(Hyperlink.MouseOverTextDecorationsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Hyperlink.MouseOverTextDecorationsProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Hyperlink.CommandProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Hyperlink.CommandProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Hyperlink.CommandParameterProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Hyperlink.CommandParameterProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Inline ()
        {
            Hyperlink widget = new Hyperlink ();
            object retval;

            retval = widget.ReadLocalValue(Inline.TextDecorationsProperty);
            Assert.IsNotNull(retval, "ReadLocalValue(Inline.TextDecorationsProperty) should not have returned null");
            Assert.IsInstanceOfType<TextDecorationCollection>(retval, "ReadLocalValue(Inline.TextDecorationsProperty) is not of the correct type");
            Assert.AreEqual("System.Windows.TextDecorationCollection", retval.ToString (), "ReadLocalValue(Inline.TextDecorationsProperty) does not match the default value");
            retval = widget.ReadLocalValue(Inline.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.ForegroundProperty);
            Assert.IsNotNull(retval, "ReadLocalValue(Inline.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "ReadLocalValue(Inline.ForegroundProperty) is not of the correct type");
            retval = widget.ReadLocalValue(Inline.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.LanguageProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_TextElement ()
        {
            Hyperlink widget = new Hyperlink ();
            object retval;

            retval = widget.ReadLocalValue(TextElement.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.ForegroundProperty);
            Assert.IsNotNull(retval, "ReadLocalValue(TextElement.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "ReadLocalValue(TextElement.ForegroundProperty) is not of the correct type");
            retval = widget.ReadLocalValue(TextElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.LanguageProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Hyperlink ()
        {
            Hyperlink widget = new Hyperlink ();
            object retval;

            Assert.IsNotNull(Hyperlink.TargetNameProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: Hyperlink.TargetNameProperty.Hyperlink");
            retval = Hyperlink.TargetNameProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Hyperlink.TargetNameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "Hyperlink.TargetNameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "Hyperlink.TargetNameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Hyperlink.TargetNameProperty);
            Assert.IsNotNull(retval, "GetValue(Hyperlink.TargetNameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(Hyperlink.TargetNameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(Hyperlink.TargetNameProperty) does not match the default value");
            Assert.IsNotNull(Hyperlink.NavigateUriProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: Hyperlink.NavigateUriProperty.Hyperlink");
            retval = Hyperlink.NavigateUriProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Hyperlink.NavigateUriProperty should be non-null value");
            Assert.IsInstanceOfType<Uri>(retval, "Hyperlink.NavigateUriProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval.ToString (), "Hyperlink.NavigateUriProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Hyperlink.NavigateUriProperty);
            Assert.IsNotNull(retval, "GetValue(Hyperlink.NavigateUriProperty) should not have returned null");
            Assert.IsInstanceOfType<Uri>(retval, "GetValue(Hyperlink.NavigateUriProperty) is not of the correct type");
            Assert.AreEqual("", retval.ToString (), "GetValue(Hyperlink.NavigateUriProperty) does not match the default value");
            Assert.IsNotNull(Hyperlink.MouseOverForegroundProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: Hyperlink.MouseOverForegroundProperty.Hyperlink");
            retval = Hyperlink.MouseOverForegroundProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Hyperlink.MouseOverForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Hyperlink.MouseOverForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Hyperlink.MouseOverForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Hyperlink.MouseOverForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Hyperlink.MouseOverForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Hyperlink.MouseOverTextDecorationsProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: Hyperlink.MouseOverTextDecorationsProperty.Hyperlink");
            retval = Hyperlink.MouseOverTextDecorationsProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Hyperlink.MouseOverTextDecorationsProperty should be non-null value");
            Assert.IsInstanceOfType<TextDecorationCollection>(retval, "Hyperlink.MouseOverTextDecorationsProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("System.Windows.TextDecorationCollection", retval.ToString (), "Hyperlink.MouseOverTextDecorationsProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Hyperlink.MouseOverTextDecorationsProperty);
            Assert.IsNotNull(retval, "GetValue(Hyperlink.MouseOverTextDecorationsProperty) should not have returned null");
            Assert.IsInstanceOfType<TextDecorationCollection>(retval, "GetValue(Hyperlink.MouseOverTextDecorationsProperty) is not of the correct type");
            Assert.AreEqual("System.Windows.TextDecorationCollection", retval.ToString (), "GetValue(Hyperlink.MouseOverTextDecorationsProperty) does not match the default value");
            Assert.IsNotNull(Hyperlink.CommandProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: Hyperlink.CommandProperty.Hyperlink");
            retval = Hyperlink.CommandProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Hyperlink.CommandProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Hyperlink.CommandProperty);
            Assert.IsNull(retval, "GetValue(Hyperlink.CommandProperty) should have returned null");
            Assert.IsNotNull(Hyperlink.CommandParameterProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: Hyperlink.CommandParameterProperty.Hyperlink");
            retval = Hyperlink.CommandParameterProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Hyperlink.CommandParameterProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Hyperlink.CommandParameterProperty);
            Assert.IsNull(retval, "GetValue(Hyperlink.CommandParameterProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Inline ()
        {
            Hyperlink widget = new Hyperlink ();
            object retval;

            Assert.IsNotNull(Inline.TextDecorationsProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: Inline.TextDecorationsProperty.Hyperlink");
            retval = Inline.TextDecorationsProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Inline.TextDecorationsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Inline.TextDecorationsProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.TextDecorationsProperty) should not have returned null");
            Assert.IsInstanceOfType<TextDecorationCollection>(retval, "GetValue(Inline.TextDecorationsProperty) is not of the correct type");
            Assert.AreEqual("System.Windows.TextDecorationCollection", retval.ToString (), "GetValue(Inline.TextDecorationsProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontSizeProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: Inline.FontSizeProperty.Hyperlink");
            retval = Inline.FontSizeProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Inline.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Inline.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Inline.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Inline.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontFamilyProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: Inline.FontFamilyProperty.Hyperlink");
            retval = Inline.FontFamilyProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Inline.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Inline.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Inline.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Inline.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontWeightProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: Inline.FontWeightProperty.Hyperlink");
            retval = Inline.FontWeightProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Inline.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Inline.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontStyleProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: Inline.FontStyleProperty.Hyperlink");
            retval = Inline.FontStyleProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Inline.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Inline.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontStretchProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: Inline.FontStretchProperty.Hyperlink");
            retval = Inline.FontStretchProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Inline.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Inline.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Inline.ForegroundProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: Inline.ForegroundProperty.Hyperlink");
            retval = Inline.ForegroundProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Inline.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Inline.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Inline.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Inline.LanguageProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: Inline.LanguageProperty.Hyperlink");
            retval = Inline.LanguageProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "Inline.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "Inline.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(Inline.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(Inline.LanguageProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_TextElement ()
        {
            Hyperlink widget = new Hyperlink ();
            object retval;

            Assert.IsNotNull(TextElement.FontSizeProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: TextElement.FontSizeProperty.Hyperlink");
            retval = TextElement.FontSizeProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "TextElement.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "TextElement.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(TextElement.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(TextElement.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontFamilyProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: TextElement.FontFamilyProperty.Hyperlink");
            retval = TextElement.FontFamilyProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "TextElement.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "TextElement.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(TextElement.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(TextElement.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontWeightProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: TextElement.FontWeightProperty.Hyperlink");
            retval = TextElement.FontWeightProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "TextElement.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(TextElement.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontStyleProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: TextElement.FontStyleProperty.Hyperlink");
            retval = TextElement.FontStyleProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "TextElement.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(TextElement.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontStretchProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: TextElement.FontStretchProperty.Hyperlink");
            retval = TextElement.FontStretchProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "TextElement.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(TextElement.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(TextElement.ForegroundProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: TextElement.ForegroundProperty.Hyperlink");
            retval = TextElement.ForegroundProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "TextElement.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(TextElement.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(TextElement.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(TextElement.LanguageProperty.GetMetadata (typeof (Hyperlink)), "#metadata should not be null for: TextElement.LanguageProperty.Hyperlink");
            retval = TextElement.LanguageProperty.GetMetadata (typeof (Hyperlink)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "TextElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "TextElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(TextElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(TextElement.LanguageProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_Hyperlink ()
        {
            Hyperlink widget = new Hyperlink ();

            Assert.IsNotNull(widget.TargetName, "TargetName should not have returned null");
            Assert.AreEqual("", widget.TargetName, "TargetName does not match the default value");
            Assert.IsNotNull(widget.NavigateUri, "NavigateUri should not have returned null");
            Assert.AreEqual("", widget.NavigateUri.ToString (), "NavigateUri does not match the default value");
            Assert.IsNotNull(widget.MouseOverForeground, "MouseOverForeground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.MouseOverForeground, "MouseOverForeground is not of the correct type");
            Assert.IsNotNull(widget.MouseOverTextDecorations, "MouseOverTextDecorations should not have returned null");
            Assert.AreEqual("System.Windows.TextDecorationCollection", widget.MouseOverTextDecorations.ToString (), "MouseOverTextDecorations does not match the default value");
            Assert.IsNull(widget.Command, "Command should have returned null");
            Assert.IsNull(widget.CommandParameter, "CommandParameter should have returned null");
            Assert.IsNotNull(widget.Inlines, "Inlines should not have returned null");
            Assert.IsInstanceOfType<InlineCollection>(widget.Inlines, "Inlines is not of the correct type");
            Assert.IsNotNull(widget.TextDecorations, "TextDecorations should not have returned null");
            Assert.AreEqual("System.Windows.TextDecorationCollection", widget.TextDecorations.ToString (), "TextDecorations does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_Span ()
        {
            Hyperlink widget = new Hyperlink ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_Inline ()
        {
            Hyperlink widget = new Hyperlink ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_TextElement ()
        {
            Hyperlink widget = new Hyperlink ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_Hyperlink ()
        {
            Hyperlink widget = new Hyperlink ();
            object retval;

            widget.SetValue(Hyperlink.TargetNameProperty, "some text");
            retval = widget.GetValue(Hyperlink.TargetNameProperty);
            Assert.AreEqual("some text", retval, "GetValue(Hyperlink.TargetNameProperty) should have returned 'some text'");
            widget.SetValue(Hyperlink.TargetNameProperty, null);
            retval = widget.GetValue(Hyperlink.TargetNameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(Hyperlink.TargetNameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(Hyperlink.TargetNameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(Hyperlink.TargetNameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Documents
{
    [TestClass]
    public partial class LineBreakTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Inline ()
        {
            LineBreak widget = new LineBreak ();
            object retval;

            retval = widget.ReadLocalValue(Inline.TextDecorationsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.TextDecorationsProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.LanguageProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_TextElement ()
        {
            LineBreak widget = new LineBreak ();
            object retval;

            retval = widget.ReadLocalValue(TextElement.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.LanguageProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Inline ()
        {
            LineBreak widget = new LineBreak ();
            object retval;

            Assert.IsNotNull(Inline.TextDecorationsProperty.GetMetadata (typeof (LineBreak)), "#metadata should not be null for: Inline.TextDecorationsProperty.LineBreak");
            retval = Inline.TextDecorationsProperty.GetMetadata (typeof (LineBreak)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Inline.TextDecorationsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Inline.TextDecorationsProperty);
            Assert.IsNull(retval, "GetValue(Inline.TextDecorationsProperty) should have returned null");
            Assert.IsNotNull(Inline.FontSizeProperty.GetMetadata (typeof (LineBreak)), "#metadata should not be null for: Inline.FontSizeProperty.LineBreak");
            retval = Inline.FontSizeProperty.GetMetadata (typeof (LineBreak)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Inline.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Inline.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Inline.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Inline.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontFamilyProperty.GetMetadata (typeof (LineBreak)), "#metadata should not be null for: Inline.FontFamilyProperty.LineBreak");
            retval = Inline.FontFamilyProperty.GetMetadata (typeof (LineBreak)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Inline.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Inline.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Inline.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Inline.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontWeightProperty.GetMetadata (typeof (LineBreak)), "#metadata should not be null for: Inline.FontWeightProperty.LineBreak");
            retval = Inline.FontWeightProperty.GetMetadata (typeof (LineBreak)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Inline.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Inline.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontStyleProperty.GetMetadata (typeof (LineBreak)), "#metadata should not be null for: Inline.FontStyleProperty.LineBreak");
            retval = Inline.FontStyleProperty.GetMetadata (typeof (LineBreak)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Inline.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Inline.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontStretchProperty.GetMetadata (typeof (LineBreak)), "#metadata should not be null for: Inline.FontStretchProperty.LineBreak");
            retval = Inline.FontStretchProperty.GetMetadata (typeof (LineBreak)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Inline.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Inline.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Inline.ForegroundProperty.GetMetadata (typeof (LineBreak)), "#metadata should not be null for: Inline.ForegroundProperty.LineBreak");
            retval = Inline.ForegroundProperty.GetMetadata (typeof (LineBreak)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Inline.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Inline.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Inline.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Inline.LanguageProperty.GetMetadata (typeof (LineBreak)), "#metadata should not be null for: Inline.LanguageProperty.LineBreak");
            retval = Inline.LanguageProperty.GetMetadata (typeof (LineBreak)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "Inline.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "Inline.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(Inline.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(Inline.LanguageProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_TextElement ()
        {
            LineBreak widget = new LineBreak ();
            object retval;

            Assert.IsNotNull(TextElement.FontSizeProperty.GetMetadata (typeof (LineBreak)), "#metadata should not be null for: TextElement.FontSizeProperty.LineBreak");
            retval = TextElement.FontSizeProperty.GetMetadata (typeof (LineBreak)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "TextElement.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "TextElement.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(TextElement.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(TextElement.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontFamilyProperty.GetMetadata (typeof (LineBreak)), "#metadata should not be null for: TextElement.FontFamilyProperty.LineBreak");
            retval = TextElement.FontFamilyProperty.GetMetadata (typeof (LineBreak)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "TextElement.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "TextElement.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(TextElement.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(TextElement.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontWeightProperty.GetMetadata (typeof (LineBreak)), "#metadata should not be null for: TextElement.FontWeightProperty.LineBreak");
            retval = TextElement.FontWeightProperty.GetMetadata (typeof (LineBreak)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "TextElement.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(TextElement.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontStyleProperty.GetMetadata (typeof (LineBreak)), "#metadata should not be null for: TextElement.FontStyleProperty.LineBreak");
            retval = TextElement.FontStyleProperty.GetMetadata (typeof (LineBreak)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "TextElement.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(TextElement.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontStretchProperty.GetMetadata (typeof (LineBreak)), "#metadata should not be null for: TextElement.FontStretchProperty.LineBreak");
            retval = TextElement.FontStretchProperty.GetMetadata (typeof (LineBreak)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "TextElement.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(TextElement.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(TextElement.ForegroundProperty.GetMetadata (typeof (LineBreak)), "#metadata should not be null for: TextElement.ForegroundProperty.LineBreak");
            retval = TextElement.ForegroundProperty.GetMetadata (typeof (LineBreak)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "TextElement.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(TextElement.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(TextElement.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(TextElement.LanguageProperty.GetMetadata (typeof (LineBreak)), "#metadata should not be null for: TextElement.LanguageProperty.LineBreak");
            retval = TextElement.LanguageProperty.GetMetadata (typeof (LineBreak)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "TextElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "TextElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(TextElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(TextElement.LanguageProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_LineBreak ()
        {
            LineBreak widget = new LineBreak ();

            Assert.IsNull(widget.TextDecorations, "TextDecorations should have returned null");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_Inline ()
        {
            LineBreak widget = new LineBreak ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_TextElement ()
        {
            LineBreak widget = new LineBreak ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

    }
}
namespace MoonTest.System.Windows.Documents
{
    [TestClass]
    public partial class InlineUIContainerTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Inline ()
        {
            InlineUIContainer widget = new InlineUIContainer ();
            object retval;

            retval = widget.ReadLocalValue(Inline.TextDecorationsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.TextDecorationsProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Inline.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Inline.LanguageProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_TextElement ()
        {
            InlineUIContainer widget = new InlineUIContainer ();
            object retval;

            retval = widget.ReadLocalValue(TextElement.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextElement.LanguageProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Inline ()
        {
            InlineUIContainer widget = new InlineUIContainer ();
            object retval;

            Assert.IsNotNull(Inline.TextDecorationsProperty.GetMetadata (typeof (InlineUIContainer)), "#metadata should not be null for: Inline.TextDecorationsProperty.InlineUIContainer");
            retval = Inline.TextDecorationsProperty.GetMetadata (typeof (InlineUIContainer)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Inline.TextDecorationsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Inline.TextDecorationsProperty);
            Assert.IsNull(retval, "GetValue(Inline.TextDecorationsProperty) should have returned null");
            Assert.IsNotNull(Inline.FontSizeProperty.GetMetadata (typeof (InlineUIContainer)), "#metadata should not be null for: Inline.FontSizeProperty.InlineUIContainer");
            retval = Inline.FontSizeProperty.GetMetadata (typeof (InlineUIContainer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Inline.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Inline.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Inline.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Inline.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontFamilyProperty.GetMetadata (typeof (InlineUIContainer)), "#metadata should not be null for: Inline.FontFamilyProperty.InlineUIContainer");
            retval = Inline.FontFamilyProperty.GetMetadata (typeof (InlineUIContainer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Inline.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Inline.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Inline.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Inline.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontWeightProperty.GetMetadata (typeof (InlineUIContainer)), "#metadata should not be null for: Inline.FontWeightProperty.InlineUIContainer");
            retval = Inline.FontWeightProperty.GetMetadata (typeof (InlineUIContainer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Inline.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Inline.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontStyleProperty.GetMetadata (typeof (InlineUIContainer)), "#metadata should not be null for: Inline.FontStyleProperty.InlineUIContainer");
            retval = Inline.FontStyleProperty.GetMetadata (typeof (InlineUIContainer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Inline.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Inline.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Inline.FontStretchProperty.GetMetadata (typeof (InlineUIContainer)), "#metadata should not be null for: Inline.FontStretchProperty.InlineUIContainer");
            retval = Inline.FontStretchProperty.GetMetadata (typeof (InlineUIContainer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Inline.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Inline.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Inline.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Inline.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Inline.ForegroundProperty.GetMetadata (typeof (InlineUIContainer)), "#metadata should not be null for: Inline.ForegroundProperty.InlineUIContainer");
            retval = Inline.ForegroundProperty.GetMetadata (typeof (InlineUIContainer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Inline.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Inline.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Inline.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Inline.LanguageProperty.GetMetadata (typeof (InlineUIContainer)), "#metadata should not be null for: Inline.LanguageProperty.InlineUIContainer");
            retval = Inline.LanguageProperty.GetMetadata (typeof (InlineUIContainer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Inline.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "Inline.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "Inline.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Inline.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(Inline.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(Inline.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(Inline.LanguageProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_TextElement ()
        {
            InlineUIContainer widget = new InlineUIContainer ();
            object retval;

            Assert.IsNotNull(TextElement.FontSizeProperty.GetMetadata (typeof (InlineUIContainer)), "#metadata should not be null for: TextElement.FontSizeProperty.InlineUIContainer");
            retval = TextElement.FontSizeProperty.GetMetadata (typeof (InlineUIContainer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "TextElement.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "TextElement.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(TextElement.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(TextElement.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontFamilyProperty.GetMetadata (typeof (InlineUIContainer)), "#metadata should not be null for: TextElement.FontFamilyProperty.InlineUIContainer");
            retval = TextElement.FontFamilyProperty.GetMetadata (typeof (InlineUIContainer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "TextElement.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "TextElement.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(TextElement.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(TextElement.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontWeightProperty.GetMetadata (typeof (InlineUIContainer)), "#metadata should not be null for: TextElement.FontWeightProperty.InlineUIContainer");
            retval = TextElement.FontWeightProperty.GetMetadata (typeof (InlineUIContainer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "TextElement.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(TextElement.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontStyleProperty.GetMetadata (typeof (InlineUIContainer)), "#metadata should not be null for: TextElement.FontStyleProperty.InlineUIContainer");
            retval = TextElement.FontStyleProperty.GetMetadata (typeof (InlineUIContainer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "TextElement.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(TextElement.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(TextElement.FontStretchProperty.GetMetadata (typeof (InlineUIContainer)), "#metadata should not be null for: TextElement.FontStretchProperty.InlineUIContainer");
            retval = TextElement.FontStretchProperty.GetMetadata (typeof (InlineUIContainer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "TextElement.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextElement.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(TextElement.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextElement.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(TextElement.ForegroundProperty.GetMetadata (typeof (InlineUIContainer)), "#metadata should not be null for: TextElement.ForegroundProperty.InlineUIContainer");
            retval = TextElement.ForegroundProperty.GetMetadata (typeof (InlineUIContainer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "TextElement.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(TextElement.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(TextElement.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(TextElement.LanguageProperty.GetMetadata (typeof (InlineUIContainer)), "#metadata should not be null for: TextElement.LanguageProperty.InlineUIContainer");
            retval = TextElement.LanguageProperty.GetMetadata (typeof (InlineUIContainer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "TextElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "TextElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(TextElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(TextElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(TextElement.LanguageProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_InlineUIContainer ()
        {
            InlineUIContainer widget = new InlineUIContainer ();

            Assert.IsNull(widget.Child, "Child should have returned null");
            Assert.IsNull(widget.TextDecorations, "TextDecorations should have returned null");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_Inline ()
        {
            InlineUIContainer widget = new InlineUIContainer ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

        [TestMethod]
        public void Test_PropertyGetter_TextElement ()
        {
            InlineUIContainer widget = new InlineUIContainer ();

            // exception generating test for ContentStart
            // exception generating test for ContentEnd
            // exception generating test for ElementStart
            // exception generating test for ElementEnd
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class ImageTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Image ()
        {
            Image widget = new Image ();
            object retval;

            retval = widget.ReadLocalValue(Image.SourceProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Image.SourceProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Image.StretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Image.StretchProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            Image widget = new Image ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            Image widget = new Image ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Image ()
        {
            Image widget = new Image ();
            object retval;

            Assert.IsNotNull(Image.SourceProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: Image.SourceProperty.Image");
            retval = Image.SourceProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Image.SourceProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Image.SourceProperty);
            Assert.IsNull(retval, "GetValue(Image.SourceProperty) should have returned null");
            Assert.IsNotNull(Image.StretchProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: Image.StretchProperty.Image");
            retval = Image.StretchProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Image.StretchProperty should be non-null value");
            Assert.IsInstanceOfType<Stretch>(retval, "Image.StretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Stretch.Uniform, retval, "Image.StretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Image.StretchProperty);
            Assert.IsNotNull(retval, "GetValue(Image.StretchProperty) should not have returned null");
            Assert.IsInstanceOfType<Stretch>(retval, "GetValue(Image.StretchProperty) is not of the correct type");
            Assert.AreEqual(Stretch.Uniform, retval, "GetValue(Image.StretchProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            Image widget = new Image ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: FrameworkElement.LanguageProperty.Image");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.Image");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.Image");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: FrameworkElement.WidthProperty.Image");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: FrameworkElement.HeightProperty.Image");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.Image");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.Image");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.Image");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.Image");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.Image");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.Image");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: FrameworkElement.MarginProperty.Image");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: FrameworkElement.StyleProperty.Image");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.Image");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: FrameworkElement.NameProperty.Image");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: FrameworkElement.TagProperty.Image");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: FrameworkElement.CursorProperty.Image");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: FrameworkElement.DataContextProperty.Image");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            Image widget = new Image ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: UIElement.AllowDropProperty.Image");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: UIElement.OpacityProperty.Image");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: UIElement.ClipProperty.Image");
            retval = UIElement.ClipProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: UIElement.RenderTransformProperty.Image");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: UIElement.EffectProperty.Image");
            retval = UIElement.EffectProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: UIElement.ProjectionProperty.Image");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: UIElement.OpacityMaskProperty.Image");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.Image");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.Image");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: UIElement.VisibilityProperty.Image");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.Image");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (Image)), "#metadata should not be null for: UIElement.CacheModeProperty.Image");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (Image)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_PropertyGetter_Image ()
        {
            Image widget = new Image ();

            Assert.AreEqual(Stretch.Uniform, widget.Stretch, "Stretch does not match the default value");
            Assert.IsNotNull(widget.Source, "Source should not have returned null");
            Assert.IsInstanceOfType<BitmapImage>(widget.Source, "Source is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            Image widget = new Image ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class CanvasTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Canvas ()
        {
            Canvas widget = new Canvas ();
            object retval;

            retval = widget.ReadLocalValue(Canvas.LeftProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Canvas.LeftProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Canvas.TopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Canvas.TopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Canvas.ZIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Canvas.ZIndexProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Panel ()
        {
            Canvas widget = new Canvas ();
            object retval;

            retval = widget.ReadLocalValue(Panel.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Panel.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Panel.IsItemsHostProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Panel.IsItemsHostProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            Canvas widget = new Canvas ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            Canvas widget = new Canvas ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Canvas ()
        {
            Canvas widget = new Canvas ();
            object retval;

            Assert.IsNotNull(Canvas.LeftProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: Canvas.LeftProperty.Canvas");
            retval = Canvas.LeftProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Canvas.LeftProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Canvas.LeftProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "Canvas.LeftProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Canvas.LeftProperty);
            Assert.IsNotNull(retval, "GetValue(Canvas.LeftProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Canvas.LeftProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(Canvas.LeftProperty) does not match the default value");
            Assert.IsNotNull(Canvas.TopProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: Canvas.TopProperty.Canvas");
            retval = Canvas.TopProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Canvas.TopProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Canvas.TopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "Canvas.TopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Canvas.TopProperty);
            Assert.IsNotNull(retval, "GetValue(Canvas.TopProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Canvas.TopProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(Canvas.TopProperty) does not match the default value");
            Assert.IsNotNull(Canvas.ZIndexProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: Canvas.ZIndexProperty.Canvas");
            retval = Canvas.ZIndexProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Canvas.ZIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Canvas.ZIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(0, retval, "Canvas.ZIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Canvas.ZIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Canvas.ZIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Canvas.ZIndexProperty) is not of the correct type");
            Assert.AreEqual(0, retval, "GetValue(Canvas.ZIndexProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Panel ()
        {
            Canvas widget = new Canvas ();
            object retval;

            Assert.IsNotNull(Panel.BackgroundProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: Panel.BackgroundProperty.Canvas");
            retval = Panel.BackgroundProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Panel.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Panel.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Panel.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Panel.IsItemsHostProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: Panel.IsItemsHostProperty.Canvas");
            retval = Panel.IsItemsHostProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Panel.IsItemsHostProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Panel.IsItemsHostProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Panel.IsItemsHostProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Panel.IsItemsHostProperty);
            Assert.IsNotNull(retval, "GetValue(Panel.IsItemsHostProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Panel.IsItemsHostProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Panel.IsItemsHostProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            Canvas widget = new Canvas ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: FrameworkElement.LanguageProperty.Canvas");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.Canvas");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.Canvas");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: FrameworkElement.WidthProperty.Canvas");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: FrameworkElement.HeightProperty.Canvas");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.Canvas");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.Canvas");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.Canvas");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.Canvas");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.Canvas");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.Canvas");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: FrameworkElement.MarginProperty.Canvas");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: FrameworkElement.StyleProperty.Canvas");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.Canvas");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: FrameworkElement.NameProperty.Canvas");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: FrameworkElement.TagProperty.Canvas");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: FrameworkElement.CursorProperty.Canvas");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: FrameworkElement.DataContextProperty.Canvas");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            Canvas widget = new Canvas ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: UIElement.AllowDropProperty.Canvas");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: UIElement.OpacityProperty.Canvas");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: UIElement.ClipProperty.Canvas");
            retval = UIElement.ClipProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: UIElement.RenderTransformProperty.Canvas");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: UIElement.EffectProperty.Canvas");
            retval = UIElement.EffectProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: UIElement.ProjectionProperty.Canvas");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: UIElement.OpacityMaskProperty.Canvas");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.Canvas");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.Canvas");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: UIElement.VisibilityProperty.Canvas");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.Canvas");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (Canvas)), "#metadata should not be null for: UIElement.CacheModeProperty.Canvas");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (Canvas)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_Canvas ()
        {
            Canvas widget = new Canvas ();

            Assert.IsNotNull(widget.Children, "Children should not have returned null");
            Assert.IsInstanceOfType<UIElementCollection>(widget.Children, "Children is not of the correct type");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.AreEqual(false, widget.IsItemsHost, "IsItemsHost does not match the default value");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            Canvas widget = new Canvas ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class TextBlockTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_TextBlock ()
        {
            TextBlock widget = new TextBlock ();
            object retval;

            retval = widget.ReadLocalValue(TextBlock.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBlock.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBlock.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBlock.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBlock.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBlock.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBlock.TextDecorationsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.TextDecorationsProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBlock.TextWrappingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.TextWrappingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBlock.TextTrimmingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.TextTrimmingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBlock.TextAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.TextAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBlock.TextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.TextProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBlock.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBlock.LineHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.LineHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBlock.LineStackingStrategyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBlock.LineStackingStrategyProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            TextBlock widget = new TextBlock ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            TextBlock widget = new TextBlock ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_GetValue_TextBlock ()
        {
            TextBlock widget = new TextBlock ();
            object retval;

            Assert.IsNotNull(TextBlock.FontSizeProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: TextBlock.FontSizeProperty.TextBlock");
            retval = TextBlock.FontSizeProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextBlock.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "TextBlock.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "TextBlock.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextBlock.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(TextBlock.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(TextBlock.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(TextBlock.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(TextBlock.FontFamilyProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: TextBlock.FontFamilyProperty.TextBlock");
            retval = TextBlock.FontFamilyProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextBlock.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "TextBlock.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "TextBlock.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextBlock.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(TextBlock.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(TextBlock.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(TextBlock.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(TextBlock.FontWeightProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: TextBlock.FontWeightProperty.TextBlock");
            retval = TextBlock.FontWeightProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextBlock.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "TextBlock.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextBlock.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextBlock.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(TextBlock.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(TextBlock.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextBlock.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(TextBlock.FontStyleProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: TextBlock.FontStyleProperty.TextBlock");
            retval = TextBlock.FontStyleProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextBlock.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "TextBlock.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextBlock.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextBlock.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(TextBlock.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(TextBlock.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextBlock.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(TextBlock.FontStretchProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: TextBlock.FontStretchProperty.TextBlock");
            retval = TextBlock.FontStretchProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextBlock.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "TextBlock.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "TextBlock.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextBlock.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(TextBlock.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(TextBlock.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(TextBlock.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(TextBlock.ForegroundProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: TextBlock.ForegroundProperty.TextBlock");
            retval = TextBlock.ForegroundProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextBlock.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "TextBlock.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(TextBlock.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(TextBlock.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(TextBlock.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(TextBlock.TextDecorationsProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: TextBlock.TextDecorationsProperty.TextBlock");
            retval = TextBlock.TextDecorationsProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for TextBlock.TextDecorationsProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(TextBlock.TextDecorationsProperty);
            Assert.IsNull(retval, "GetValue(TextBlock.TextDecorationsProperty) should have returned null");
            Assert.IsNotNull(TextBlock.TextWrappingProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: TextBlock.TextWrappingProperty.TextBlock");
            retval = TextBlock.TextWrappingProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextBlock.TextWrappingProperty should be non-null value");
            Assert.IsInstanceOfType<TextWrapping>(retval, "TextBlock.TextWrappingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(TextWrapping.NoWrap, retval, "TextBlock.TextWrappingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextBlock.TextWrappingProperty);
            Assert.IsNotNull(retval, "GetValue(TextBlock.TextWrappingProperty) should not have returned null");
            Assert.IsInstanceOfType<TextWrapping>(retval, "GetValue(TextBlock.TextWrappingProperty) is not of the correct type");
            Assert.AreEqual(TextWrapping.NoWrap, retval, "GetValue(TextBlock.TextWrappingProperty) does not match the default value");
            Assert.IsNotNull(TextBlock.TextTrimmingProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: TextBlock.TextTrimmingProperty.TextBlock");
            retval = TextBlock.TextTrimmingProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextBlock.TextTrimmingProperty should be non-null value");
            Assert.IsInstanceOfType<TextTrimming>(retval, "TextBlock.TextTrimmingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(TextTrimming.None, retval, "TextBlock.TextTrimmingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextBlock.TextTrimmingProperty);
            Assert.IsNotNull(retval, "GetValue(TextBlock.TextTrimmingProperty) should not have returned null");
            Assert.IsInstanceOfType<TextTrimming>(retval, "GetValue(TextBlock.TextTrimmingProperty) is not of the correct type");
            Assert.AreEqual(TextTrimming.None, retval, "GetValue(TextBlock.TextTrimmingProperty) does not match the default value");
            Assert.IsNotNull(TextBlock.TextAlignmentProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: TextBlock.TextAlignmentProperty.TextBlock");
            retval = TextBlock.TextAlignmentProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextBlock.TextAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<TextAlignment>(retval, "TextBlock.TextAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(TextAlignment.Left, retval, "TextBlock.TextAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextBlock.TextAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(TextBlock.TextAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<TextAlignment>(retval, "GetValue(TextBlock.TextAlignmentProperty) is not of the correct type");
            Assert.AreEqual(TextAlignment.Left, retval, "GetValue(TextBlock.TextAlignmentProperty) does not match the default value");
            Assert.IsNotNull(TextBlock.TextProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: TextBlock.TextProperty.TextBlock");
            retval = TextBlock.TextProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for TextBlock.TextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(TextBlock.TextProperty);
            Assert.IsNotNull(retval, "GetValue(TextBlock.TextProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(TextBlock.TextProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(TextBlock.TextProperty) does not match the default value");
            Assert.IsNotNull(TextBlock.PaddingProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: TextBlock.PaddingProperty.TextBlock");
            retval = TextBlock.PaddingProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextBlock.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "TextBlock.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "TextBlock.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextBlock.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(TextBlock.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(TextBlock.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(TextBlock.PaddingProperty) does not match the default value");
            Assert.IsNotNull(TextBlock.LineHeightProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: TextBlock.LineHeightProperty.TextBlock");
            retval = TextBlock.LineHeightProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextBlock.LineHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "TextBlock.LineHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "TextBlock.LineHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextBlock.LineHeightProperty);
            Assert.IsNotNull(retval, "GetValue(TextBlock.LineHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(TextBlock.LineHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(TextBlock.LineHeightProperty) does not match the default value");
            Assert.IsNotNull(TextBlock.LineStackingStrategyProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: TextBlock.LineStackingStrategyProperty.TextBlock");
            retval = TextBlock.LineStackingStrategyProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextBlock.LineStackingStrategyProperty should be non-null value");
            Assert.IsInstanceOfType<LineStackingStrategy>(retval, "TextBlock.LineStackingStrategyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(LineStackingStrategy.MaxHeight, retval, "TextBlock.LineStackingStrategyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextBlock.LineStackingStrategyProperty);
            Assert.IsNotNull(retval, "GetValue(TextBlock.LineStackingStrategyProperty) should not have returned null");
            Assert.IsInstanceOfType<LineStackingStrategy>(retval, "GetValue(TextBlock.LineStackingStrategyProperty) is not of the correct type");
            Assert.AreEqual(LineStackingStrategy.MaxHeight, retval, "GetValue(TextBlock.LineStackingStrategyProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            TextBlock widget = new TextBlock ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: FrameworkElement.LanguageProperty.TextBlock");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.TextBlock");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.TextBlock");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: FrameworkElement.WidthProperty.TextBlock");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: FrameworkElement.HeightProperty.TextBlock");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.TextBlock");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.TextBlock");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.TextBlock");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.TextBlock");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.TextBlock");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.TextBlock");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: FrameworkElement.MarginProperty.TextBlock");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: FrameworkElement.StyleProperty.TextBlock");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.TextBlock");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: FrameworkElement.NameProperty.TextBlock");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: FrameworkElement.TagProperty.TextBlock");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: FrameworkElement.CursorProperty.TextBlock");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: FrameworkElement.DataContextProperty.TextBlock");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            TextBlock widget = new TextBlock ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: UIElement.AllowDropProperty.TextBlock");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: UIElement.OpacityProperty.TextBlock");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: UIElement.ClipProperty.TextBlock");
            retval = UIElement.ClipProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: UIElement.RenderTransformProperty.TextBlock");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: UIElement.EffectProperty.TextBlock");
            retval = UIElement.EffectProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: UIElement.ProjectionProperty.TextBlock");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: UIElement.OpacityMaskProperty.TextBlock");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.TextBlock");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.TextBlock");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: UIElement.VisibilityProperty.TextBlock");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.TextBlock");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (TextBlock)), "#metadata should not be null for: UIElement.CacheModeProperty.TextBlock");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (TextBlock)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_TextBlock ()
        {
            TextBlock widget = new TextBlock ();

            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.AreEqual(TextWrapping.NoWrap, widget.TextWrapping, "TextWrapping does not match the default value");
            Assert.AreEqual(TextTrimming.None, widget.TextTrimming, "TextTrimming does not match the default value");
            Assert.AreEqual(TextAlignment.Left, widget.TextAlignment, "TextAlignment does not match the default value");
            Assert.IsNotNull(widget.Text, "Text should not have returned null");
            Assert.AreEqual("", widget.Text, "Text does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual((double) 0, widget.LineHeight, "LineHeight does not match the default value");
            Assert.AreEqual(LineStackingStrategy.MaxHeight, widget.LineStackingStrategy, "LineStackingStrategy does not match the default value");
            Assert.IsNull(widget.TextDecorations, "TextDecorations should have returned null");
            Assert.IsNotNull(widget.Inlines, "Inlines should not have returned null");
            Assert.IsInstanceOfType<InlineCollection>(widget.Inlines, "Inlines is not of the correct type");
            Assert.IsNull(widget.FontSource, "FontSource should have returned null");
            Assert.AreEqual((double) 0, widget.BaselineOffset, "BaselineOffset does not match the default value");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        public void Test_SetStringValue_TextBlock ()
        {
            TextBlock widget = new TextBlock ();
            object retval;

            widget.SetValue(TextBlock.TextProperty, "some text");
            retval = widget.GetValue(TextBlock.TextProperty);
            Assert.AreEqual("some text", retval, "GetValue(TextBlock.TextProperty) should have returned 'some text'");
            widget.SetValue(TextBlock.TextProperty, null);
            retval = widget.GetValue(TextBlock.TextProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(TextBlock.TextProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(TextBlock.TextProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(TextBlock.TextProperty) should have returned String.Empty");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            TextBlock widget = new TextBlock ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class MediaElementTest
    {
        [TestMethod]
        [MoonlightBug]
        public void Test_ReadLocalValue_MediaElement ()
        {
            MediaElement widget = new MediaElement ();
            object retval;

            retval = widget.ReadLocalValue(MediaElement.SourceProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.SourceProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MediaElement.StretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.StretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MediaElement.IsMutedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.IsMutedProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MediaElement.AutoPlayProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.AutoPlayProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MediaElement.VolumeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.VolumeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MediaElement.BalanceProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.BalanceProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MediaElement.NaturalVideoHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.NaturalVideoHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MediaElement.NaturalVideoWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.NaturalVideoWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MediaElement.NaturalDurationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.NaturalDurationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MediaElement.PositionProperty);
            Assert.IsNotNull(retval, "ReadLocalValue(MediaElement.PositionProperty) should not have returned null");
            Assert.IsInstanceOfType<TimeSpan>(retval, "ReadLocalValue(MediaElement.PositionProperty) is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "ReadLocalValue(MediaElement.PositionProperty) does not match the default value");
            retval = widget.ReadLocalValue(MediaElement.DownloadProgressProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.DownloadProgressProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MediaElement.BufferingProgressProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.BufferingProgressProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MediaElement.DownloadProgressOffsetProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.DownloadProgressOffsetProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MediaElement.CurrentStateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.CurrentStateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MediaElement.BufferingTimeProperty);
            Assert.IsNotNull(retval, "ReadLocalValue(MediaElement.BufferingTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<TimeSpan>(retval, "ReadLocalValue(MediaElement.BufferingTimeProperty) is not of the correct type");
            Assert.AreEqual("00:00:05", retval.ToString (), "ReadLocalValue(MediaElement.BufferingTimeProperty) does not match the default value");
            retval = widget.ReadLocalValue(MediaElement.CanSeekProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.CanSeekProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MediaElement.CanPauseProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.CanPauseProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MediaElement.AudioStreamCountProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.AudioStreamCountProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MediaElement.AudioStreamIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.AudioStreamIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MediaElement.RenderedFramesPerSecondProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.RenderedFramesPerSecondProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MediaElement.DroppedFramesPerSecondProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.DroppedFramesPerSecondProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MediaElement.AttributesProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MediaElement.AttributesProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            MediaElement widget = new MediaElement ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            MediaElement widget = new MediaElement ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_GetValue_MediaElement ()
        {
            MediaElement widget = new MediaElement ();
            object retval;

            Assert.IsNotNull(MediaElement.SourceProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.SourceProperty.MediaElement");
            retval = MediaElement.SourceProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for MediaElement.SourceProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(MediaElement.SourceProperty);
            Assert.IsNull(retval, "GetValue(MediaElement.SourceProperty) should have returned null");
            Assert.IsNotNull(MediaElement.StretchProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.StretchProperty.MediaElement");
            retval = MediaElement.StretchProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MediaElement.StretchProperty should be non-null value");
            Assert.IsInstanceOfType<Stretch>(retval, "MediaElement.StretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Stretch.Uniform, retval, "MediaElement.StretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MediaElement.StretchProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.StretchProperty) should not have returned null");
            Assert.IsInstanceOfType<Stretch>(retval, "GetValue(MediaElement.StretchProperty) is not of the correct type");
            Assert.AreEqual(Stretch.Uniform, retval, "GetValue(MediaElement.StretchProperty) does not match the default value");
            Assert.IsNotNull(MediaElement.IsMutedProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.IsMutedProperty.MediaElement");
            retval = MediaElement.IsMutedProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MediaElement.IsMutedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "MediaElement.IsMutedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "MediaElement.IsMutedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MediaElement.IsMutedProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.IsMutedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(MediaElement.IsMutedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(MediaElement.IsMutedProperty) does not match the default value");
            Assert.IsNotNull(MediaElement.AutoPlayProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.AutoPlayProperty.MediaElement");
            retval = MediaElement.AutoPlayProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MediaElement.AutoPlayProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "MediaElement.AutoPlayProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "MediaElement.AutoPlayProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MediaElement.AutoPlayProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.AutoPlayProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(MediaElement.AutoPlayProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(MediaElement.AutoPlayProperty) does not match the default value");
            Assert.IsNotNull(MediaElement.VolumeProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.VolumeProperty.MediaElement");
            retval = MediaElement.VolumeProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MediaElement.VolumeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "MediaElement.VolumeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0.5, retval, "MediaElement.VolumeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MediaElement.VolumeProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.VolumeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(MediaElement.VolumeProperty) is not of the correct type");
            Assert.AreEqual((double) 0.5, retval, "GetValue(MediaElement.VolumeProperty) does not match the default value");
            Assert.IsNotNull(MediaElement.BalanceProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.BalanceProperty.MediaElement");
            retval = MediaElement.BalanceProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MediaElement.BalanceProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "MediaElement.BalanceProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "MediaElement.BalanceProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MediaElement.BalanceProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.BalanceProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(MediaElement.BalanceProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(MediaElement.BalanceProperty) does not match the default value");
            Assert.IsNotNull(MediaElement.NaturalVideoHeightProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.NaturalVideoHeightProperty.MediaElement");
            retval = MediaElement.NaturalVideoHeightProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MediaElement.NaturalVideoHeightProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "MediaElement.NaturalVideoHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(0, retval, "MediaElement.NaturalVideoHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MediaElement.NaturalVideoHeightProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.NaturalVideoHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(MediaElement.NaturalVideoHeightProperty) is not of the correct type");
            Assert.AreEqual(0, retval, "GetValue(MediaElement.NaturalVideoHeightProperty) does not match the default value");
            Assert.IsNotNull(MediaElement.NaturalVideoWidthProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.NaturalVideoWidthProperty.MediaElement");
            retval = MediaElement.NaturalVideoWidthProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MediaElement.NaturalVideoWidthProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "MediaElement.NaturalVideoWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(0, retval, "MediaElement.NaturalVideoWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MediaElement.NaturalVideoWidthProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.NaturalVideoWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(MediaElement.NaturalVideoWidthProperty) is not of the correct type");
            Assert.AreEqual(0, retval, "GetValue(MediaElement.NaturalVideoWidthProperty) does not match the default value");
            Assert.IsNotNull(MediaElement.NaturalDurationProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.NaturalDurationProperty.MediaElement");
            retval = MediaElement.NaturalDurationProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MediaElement.NaturalDurationProperty should be non-null value");
            Assert.IsInstanceOfType<Duration>(retval, "MediaElement.NaturalDurationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Automatic", retval.ToString (), "MediaElement.NaturalDurationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MediaElement.NaturalDurationProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.NaturalDurationProperty) should not have returned null");
            Assert.IsInstanceOfType<Duration>(retval, "GetValue(MediaElement.NaturalDurationProperty) is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(MediaElement.NaturalDurationProperty) does not match the default value");
            Assert.IsNotNull(MediaElement.PositionProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.PositionProperty.MediaElement");
            retval = MediaElement.PositionProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MediaElement.PositionProperty should be non-null value");
            Assert.IsInstanceOfType<TimeSpan>(retval, "MediaElement.PositionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "MediaElement.PositionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MediaElement.PositionProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.PositionProperty) should not have returned null");
            Assert.IsInstanceOfType<TimeSpan>(retval, "GetValue(MediaElement.PositionProperty) is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "GetValue(MediaElement.PositionProperty) does not match the default value");
            Assert.IsNotNull(MediaElement.DownloadProgressProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.DownloadProgressProperty.MediaElement");
            retval = MediaElement.DownloadProgressProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MediaElement.DownloadProgressProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "MediaElement.DownloadProgressProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "MediaElement.DownloadProgressProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MediaElement.DownloadProgressProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.DownloadProgressProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(MediaElement.DownloadProgressProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(MediaElement.DownloadProgressProperty) does not match the default value");
            Assert.IsNotNull(MediaElement.BufferingProgressProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.BufferingProgressProperty.MediaElement");
            retval = MediaElement.BufferingProgressProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MediaElement.BufferingProgressProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "MediaElement.BufferingProgressProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "MediaElement.BufferingProgressProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MediaElement.BufferingProgressProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.BufferingProgressProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(MediaElement.BufferingProgressProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(MediaElement.BufferingProgressProperty) does not match the default value");
            Assert.IsNotNull(MediaElement.DownloadProgressOffsetProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.DownloadProgressOffsetProperty.MediaElement");
            retval = MediaElement.DownloadProgressOffsetProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MediaElement.DownloadProgressOffsetProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "MediaElement.DownloadProgressOffsetProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "MediaElement.DownloadProgressOffsetProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MediaElement.DownloadProgressOffsetProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.DownloadProgressOffsetProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(MediaElement.DownloadProgressOffsetProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(MediaElement.DownloadProgressOffsetProperty) does not match the default value");
            Assert.IsNotNull(MediaElement.CurrentStateProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.CurrentStateProperty.MediaElement");
            retval = MediaElement.CurrentStateProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MediaElement.CurrentStateProperty should be non-null value");
            Assert.IsInstanceOfType<MediaElementState>(retval, "MediaElement.CurrentStateProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(MediaElementState.Closed, retval, "MediaElement.CurrentStateProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MediaElement.CurrentStateProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.CurrentStateProperty) should not have returned null");
            Assert.IsInstanceOfType<MediaElementState>(retval, "GetValue(MediaElement.CurrentStateProperty) is not of the correct type");
            Assert.AreEqual(MediaElementState.Closed, retval, "GetValue(MediaElement.CurrentStateProperty) does not match the default value");
            Assert.IsNotNull(MediaElement.BufferingTimeProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.BufferingTimeProperty.MediaElement");
            retval = MediaElement.BufferingTimeProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MediaElement.BufferingTimeProperty should be non-null value");
            Assert.IsInstanceOfType<TimeSpan>(retval, "MediaElement.BufferingTimeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("00:00:00", retval.ToString (), "MediaElement.BufferingTimeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MediaElement.BufferingTimeProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.BufferingTimeProperty) should not have returned null");
            Assert.IsInstanceOfType<TimeSpan>(retval, "GetValue(MediaElement.BufferingTimeProperty) is not of the correct type");
            Assert.AreEqual("00:00:05", retval.ToString (), "GetValue(MediaElement.BufferingTimeProperty) does not match the default value");
            Assert.IsNotNull(MediaElement.CanSeekProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.CanSeekProperty.MediaElement");
            retval = MediaElement.CanSeekProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MediaElement.CanSeekProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "MediaElement.CanSeekProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "MediaElement.CanSeekProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MediaElement.CanSeekProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.CanSeekProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(MediaElement.CanSeekProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(MediaElement.CanSeekProperty) does not match the default value");
            Assert.IsNotNull(MediaElement.CanPauseProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.CanPauseProperty.MediaElement");
            retval = MediaElement.CanPauseProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MediaElement.CanPauseProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "MediaElement.CanPauseProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "MediaElement.CanPauseProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MediaElement.CanPauseProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.CanPauseProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(MediaElement.CanPauseProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(MediaElement.CanPauseProperty) does not match the default value");
            Assert.IsNotNull(MediaElement.AudioStreamCountProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.AudioStreamCountProperty.MediaElement");
            retval = MediaElement.AudioStreamCountProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MediaElement.AudioStreamCountProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "MediaElement.AudioStreamCountProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(0, retval, "MediaElement.AudioStreamCountProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MediaElement.AudioStreamCountProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.AudioStreamCountProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(MediaElement.AudioStreamCountProperty) is not of the correct type");
            Assert.AreEqual(0, retval, "GetValue(MediaElement.AudioStreamCountProperty) does not match the default value");
            Assert.IsNotNull(MediaElement.AudioStreamIndexProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.AudioStreamIndexProperty.MediaElement");
            retval = MediaElement.AudioStreamIndexProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for MediaElement.AudioStreamIndexProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(MediaElement.AudioStreamIndexProperty);
            Assert.IsNull(retval, "GetValue(MediaElement.AudioStreamIndexProperty) should have returned null");
            Assert.IsNotNull(MediaElement.RenderedFramesPerSecondProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.RenderedFramesPerSecondProperty.MediaElement");
            retval = MediaElement.RenderedFramesPerSecondProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MediaElement.RenderedFramesPerSecondProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "MediaElement.RenderedFramesPerSecondProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "MediaElement.RenderedFramesPerSecondProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MediaElement.RenderedFramesPerSecondProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.RenderedFramesPerSecondProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(MediaElement.RenderedFramesPerSecondProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(MediaElement.RenderedFramesPerSecondProperty) does not match the default value");
            Assert.IsNotNull(MediaElement.DroppedFramesPerSecondProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.DroppedFramesPerSecondProperty.MediaElement");
            retval = MediaElement.DroppedFramesPerSecondProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MediaElement.DroppedFramesPerSecondProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "MediaElement.DroppedFramesPerSecondProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "MediaElement.DroppedFramesPerSecondProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MediaElement.DroppedFramesPerSecondProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.DroppedFramesPerSecondProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(MediaElement.DroppedFramesPerSecondProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(MediaElement.DroppedFramesPerSecondProperty) does not match the default value");
            Assert.IsNotNull(MediaElement.AttributesProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: MediaElement.AttributesProperty.MediaElement");
            retval = MediaElement.AttributesProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for MediaElement.AttributesProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(MediaElement.AttributesProperty);
            Assert.IsNotNull(retval, "GetValue(MediaElement.AttributesProperty) should not have returned null");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            MediaElement widget = new MediaElement ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: FrameworkElement.LanguageProperty.MediaElement");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.MediaElement");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.MediaElement");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: FrameworkElement.WidthProperty.MediaElement");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: FrameworkElement.HeightProperty.MediaElement");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.MediaElement");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.MediaElement");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.MediaElement");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.MediaElement");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.MediaElement");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.MediaElement");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: FrameworkElement.MarginProperty.MediaElement");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: FrameworkElement.StyleProperty.MediaElement");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.MediaElement");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: FrameworkElement.NameProperty.MediaElement");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: FrameworkElement.TagProperty.MediaElement");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: FrameworkElement.CursorProperty.MediaElement");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: FrameworkElement.DataContextProperty.MediaElement");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            MediaElement widget = new MediaElement ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: UIElement.AllowDropProperty.MediaElement");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: UIElement.OpacityProperty.MediaElement");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: UIElement.ClipProperty.MediaElement");
            retval = UIElement.ClipProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: UIElement.RenderTransformProperty.MediaElement");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: UIElement.EffectProperty.MediaElement");
            retval = UIElement.EffectProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: UIElement.ProjectionProperty.MediaElement");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: UIElement.OpacityMaskProperty.MediaElement");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.MediaElement");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.MediaElement");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: UIElement.VisibilityProperty.MediaElement");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.MediaElement");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (MediaElement)), "#metadata should not be null for: UIElement.CacheModeProperty.MediaElement");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (MediaElement)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_MediaElement ()
        {
            MediaElement widget = new MediaElement ();

            Assert.IsNull(widget.Source, "Source should have returned null");
            Assert.AreEqual(Stretch.Uniform, widget.Stretch, "Stretch does not match the default value");
            Assert.AreEqual(false, widget.IsMuted, "IsMuted does not match the default value");
            Assert.AreEqual(true, widget.AutoPlay, "AutoPlay does not match the default value");
            Assert.AreEqual((double) 0.5, widget.Volume, "Volume does not match the default value");
            Assert.AreEqual((double) 0, widget.Balance, "Balance does not match the default value");
            Assert.AreEqual(0, widget.NaturalVideoHeight, "NaturalVideoHeight does not match the default value");
            Assert.AreEqual(0, widget.NaturalVideoWidth, "NaturalVideoWidth does not match the default value");
            Assert.AreEqual("00:00:00", widget.NaturalDuration.ToString (), "NaturalDuration does not match the default value");
            Assert.AreEqual("00:00:00", widget.Position.ToString (), "Position does not match the default value");
            Assert.AreEqual((double) 0, widget.DownloadProgress, "DownloadProgress does not match the default value");
            Assert.AreEqual((double) 0, widget.BufferingProgress, "BufferingProgress does not match the default value");
            Assert.AreEqual((double) 0, widget.DownloadProgressOffset, "DownloadProgressOffset does not match the default value");
            Assert.AreEqual(MediaElementState.Closed, widget.CurrentState, "CurrentState does not match the default value");
            Assert.AreEqual("00:00:05", widget.BufferingTime.ToString (), "BufferingTime does not match the default value");
            Assert.IsNotNull(widget.Markers, "Markers should not have returned null");
            Assert.IsInstanceOfType<TimelineMarkerCollection>(widget.Markers, "Markers is not of the correct type");
            Assert.AreEqual(false, widget.CanSeek, "CanSeek does not match the default value");
            Assert.AreEqual(false, widget.CanPause, "CanPause does not match the default value");
            Assert.AreEqual(0, widget.AudioStreamCount, "AudioStreamCount does not match the default value");
            Assert.IsNull(widget.AudioStreamIndex, "AudioStreamIndex should have returned null");
            Assert.AreEqual((double) 0, widget.RenderedFramesPerSecond, "RenderedFramesPerSecond does not match the default value");
            Assert.AreEqual((double) 0, widget.DroppedFramesPerSecond, "DroppedFramesPerSecond does not match the default value");
            Assert.IsNotNull(widget.Attributes, "Attributes should not have returned null");
            Assert.IsNotNull(widget.LicenseAcquirer, "LicenseAcquirer should not have returned null");
            Assert.AreEqual("System.Windows.Media.LicenseAcquirer", widget.LicenseAcquirer.ToString (), "LicenseAcquirer does not match the default value");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            MediaElement widget = new MediaElement ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class InkPresenterTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_InkPresenter ()
        {
            InkPresenter widget = new InkPresenter ();
            object retval;

            retval = widget.ReadLocalValue(InkPresenter.StrokesProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(InkPresenter.StrokesProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Canvas ()
        {
            InkPresenter widget = new InkPresenter ();
            object retval;

            retval = widget.ReadLocalValue(Canvas.LeftProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Canvas.LeftProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Canvas.TopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Canvas.TopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Canvas.ZIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Canvas.ZIndexProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Panel ()
        {
            InkPresenter widget = new InkPresenter ();
            object retval;

            retval = widget.ReadLocalValue(Panel.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Panel.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Panel.IsItemsHostProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Panel.IsItemsHostProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            InkPresenter widget = new InkPresenter ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            InkPresenter widget = new InkPresenter ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_InkPresenter ()
        {
            InkPresenter widget = new InkPresenter ();
            object retval;

            Assert.IsNotNull(InkPresenter.StrokesProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: InkPresenter.StrokesProperty.InkPresenter");
            retval = InkPresenter.StrokesProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for InkPresenter.StrokesProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(InkPresenter.StrokesProperty);
            Assert.IsNotNull(retval, "GetValue(InkPresenter.StrokesProperty) should not have returned null");
            Assert.IsInstanceOfType<StrokeCollection>(retval, "GetValue(InkPresenter.StrokesProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_GetValue_Canvas ()
        {
            InkPresenter widget = new InkPresenter ();
            object retval;

            Assert.IsNotNull(Canvas.LeftProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: Canvas.LeftProperty.InkPresenter");
            retval = Canvas.LeftProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Canvas.LeftProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Canvas.LeftProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "Canvas.LeftProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Canvas.LeftProperty);
            Assert.IsNotNull(retval, "GetValue(Canvas.LeftProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Canvas.LeftProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(Canvas.LeftProperty) does not match the default value");
            Assert.IsNotNull(Canvas.TopProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: Canvas.TopProperty.InkPresenter");
            retval = Canvas.TopProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Canvas.TopProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Canvas.TopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "Canvas.TopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Canvas.TopProperty);
            Assert.IsNotNull(retval, "GetValue(Canvas.TopProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Canvas.TopProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(Canvas.TopProperty) does not match the default value");
            Assert.IsNotNull(Canvas.ZIndexProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: Canvas.ZIndexProperty.InkPresenter");
            retval = Canvas.ZIndexProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Canvas.ZIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Canvas.ZIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(0, retval, "Canvas.ZIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Canvas.ZIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Canvas.ZIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Canvas.ZIndexProperty) is not of the correct type");
            Assert.AreEqual(0, retval, "GetValue(Canvas.ZIndexProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Panel ()
        {
            InkPresenter widget = new InkPresenter ();
            object retval;

            Assert.IsNotNull(Panel.BackgroundProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: Panel.BackgroundProperty.InkPresenter");
            retval = Panel.BackgroundProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Panel.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Panel.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Panel.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Panel.IsItemsHostProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: Panel.IsItemsHostProperty.InkPresenter");
            retval = Panel.IsItemsHostProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Panel.IsItemsHostProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Panel.IsItemsHostProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Panel.IsItemsHostProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Panel.IsItemsHostProperty);
            Assert.IsNotNull(retval, "GetValue(Panel.IsItemsHostProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Panel.IsItemsHostProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Panel.IsItemsHostProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            InkPresenter widget = new InkPresenter ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: FrameworkElement.LanguageProperty.InkPresenter");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.InkPresenter");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.InkPresenter");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: FrameworkElement.WidthProperty.InkPresenter");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: FrameworkElement.HeightProperty.InkPresenter");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.InkPresenter");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.InkPresenter");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.InkPresenter");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.InkPresenter");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.InkPresenter");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.InkPresenter");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: FrameworkElement.MarginProperty.InkPresenter");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: FrameworkElement.StyleProperty.InkPresenter");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.InkPresenter");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: FrameworkElement.NameProperty.InkPresenter");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: FrameworkElement.TagProperty.InkPresenter");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: FrameworkElement.CursorProperty.InkPresenter");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: FrameworkElement.DataContextProperty.InkPresenter");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            InkPresenter widget = new InkPresenter ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: UIElement.AllowDropProperty.InkPresenter");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: UIElement.OpacityProperty.InkPresenter");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: UIElement.ClipProperty.InkPresenter");
            retval = UIElement.ClipProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: UIElement.RenderTransformProperty.InkPresenter");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: UIElement.EffectProperty.InkPresenter");
            retval = UIElement.EffectProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: UIElement.ProjectionProperty.InkPresenter");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: UIElement.OpacityMaskProperty.InkPresenter");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.InkPresenter");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.InkPresenter");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: UIElement.VisibilityProperty.InkPresenter");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.InkPresenter");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (InkPresenter)), "#metadata should not be null for: UIElement.CacheModeProperty.InkPresenter");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (InkPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_InkPresenter ()
        {
            InkPresenter widget = new InkPresenter ();

            Assert.IsNotNull(widget.Strokes, "Strokes should not have returned null");
            Assert.IsInstanceOfType<StrokeCollection>(widget.Strokes, "Strokes is not of the correct type");
            Assert.IsNotNull(widget.Children, "Children should not have returned null");
            Assert.IsInstanceOfType<UIElementCollection>(widget.Children, "Children is not of the correct type");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.AreEqual(false, widget.IsItemsHost, "IsItemsHost does not match the default value");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            InkPresenter widget = new InkPresenter ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class MultiScaleImageTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_MultiScaleImage ()
        {
            MultiScaleImage widget = new MultiScaleImage ();
            object retval;

            retval = widget.ReadLocalValue(MultiScaleImage.SourceProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleImage.SourceProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MultiScaleImage.ViewportOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleImage.ViewportOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MultiScaleImage.ViewportWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleImage.ViewportWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MultiScaleImage.AspectRatioProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleImage.AspectRatioProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MultiScaleImage.UseSpringsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleImage.UseSpringsProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MultiScaleImage.IsDownloadingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleImage.IsDownloadingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MultiScaleImage.AllowDownloadingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleImage.AllowDownloadingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MultiScaleImage.BlurFactorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleImage.BlurFactorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MultiScaleImage.IsIdleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleImage.IsIdleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MultiScaleImage.SubImagesProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleImage.SubImagesProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            MultiScaleImage widget = new MultiScaleImage ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            MultiScaleImage widget = new MultiScaleImage ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_GetValue_MultiScaleImage ()
        {
            MultiScaleImage widget = new MultiScaleImage ();
            object retval;

            Assert.IsNotNull(MultiScaleImage.SourceProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: MultiScaleImage.SourceProperty.MultiScaleImage");
            retval = MultiScaleImage.SourceProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for MultiScaleImage.SourceProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(MultiScaleImage.SourceProperty);
            Assert.IsNull(retval, "GetValue(MultiScaleImage.SourceProperty) should have returned null");
            Assert.IsNotNull(MultiScaleImage.ViewportOriginProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: MultiScaleImage.ViewportOriginProperty.MultiScaleImage");
            retval = MultiScaleImage.ViewportOriginProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MultiScaleImage.ViewportOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "MultiScaleImage.ViewportOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "MultiScaleImage.ViewportOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MultiScaleImage.ViewportOriginProperty);
            Assert.IsNotNull(retval, "GetValue(MultiScaleImage.ViewportOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(MultiScaleImage.ViewportOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(MultiScaleImage.ViewportOriginProperty) does not match the default value");
            Assert.IsNotNull(MultiScaleImage.ViewportWidthProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: MultiScaleImage.ViewportWidthProperty.MultiScaleImage");
            retval = MultiScaleImage.ViewportWidthProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MultiScaleImage.ViewportWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "MultiScaleImage.ViewportWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "MultiScaleImage.ViewportWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MultiScaleImage.ViewportWidthProperty);
            Assert.IsNotNull(retval, "GetValue(MultiScaleImage.ViewportWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(MultiScaleImage.ViewportWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(MultiScaleImage.ViewportWidthProperty) does not match the default value");
            Assert.IsNotNull(MultiScaleImage.AspectRatioProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: MultiScaleImage.AspectRatioProperty.MultiScaleImage");
            retval = MultiScaleImage.AspectRatioProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MultiScaleImage.AspectRatioProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "MultiScaleImage.AspectRatioProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "MultiScaleImage.AspectRatioProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MultiScaleImage.AspectRatioProperty);
            Assert.IsNotNull(retval, "GetValue(MultiScaleImage.AspectRatioProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(MultiScaleImage.AspectRatioProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(MultiScaleImage.AspectRatioProperty) does not match the default value");
            Assert.IsNotNull(MultiScaleImage.UseSpringsProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: MultiScaleImage.UseSpringsProperty.MultiScaleImage");
            retval = MultiScaleImage.UseSpringsProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MultiScaleImage.UseSpringsProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "MultiScaleImage.UseSpringsProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "MultiScaleImage.UseSpringsProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MultiScaleImage.UseSpringsProperty);
            Assert.IsNotNull(retval, "GetValue(MultiScaleImage.UseSpringsProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(MultiScaleImage.UseSpringsProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(MultiScaleImage.UseSpringsProperty) does not match the default value");
            Assert.IsNotNull(MultiScaleImage.IsDownloadingProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: MultiScaleImage.IsDownloadingProperty.MultiScaleImage");
            retval = MultiScaleImage.IsDownloadingProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MultiScaleImage.IsDownloadingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "MultiScaleImage.IsDownloadingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "MultiScaleImage.IsDownloadingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MultiScaleImage.IsDownloadingProperty);
            Assert.IsNotNull(retval, "GetValue(MultiScaleImage.IsDownloadingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(MultiScaleImage.IsDownloadingProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(MultiScaleImage.IsDownloadingProperty) does not match the default value");
            Assert.IsNotNull(MultiScaleImage.AllowDownloadingProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: MultiScaleImage.AllowDownloadingProperty.MultiScaleImage");
            retval = MultiScaleImage.AllowDownloadingProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MultiScaleImage.AllowDownloadingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "MultiScaleImage.AllowDownloadingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "MultiScaleImage.AllowDownloadingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MultiScaleImage.AllowDownloadingProperty);
            Assert.IsNotNull(retval, "GetValue(MultiScaleImage.AllowDownloadingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(MultiScaleImage.AllowDownloadingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(MultiScaleImage.AllowDownloadingProperty) does not match the default value");
            Assert.IsNotNull(MultiScaleImage.BlurFactorProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: MultiScaleImage.BlurFactorProperty.MultiScaleImage");
            retval = MultiScaleImage.BlurFactorProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MultiScaleImage.BlurFactorProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "MultiScaleImage.BlurFactorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "MultiScaleImage.BlurFactorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MultiScaleImage.BlurFactorProperty);
            Assert.IsNotNull(retval, "GetValue(MultiScaleImage.BlurFactorProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(MultiScaleImage.BlurFactorProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(MultiScaleImage.BlurFactorProperty) does not match the default value");
            Assert.IsNotNull(MultiScaleImage.IsIdleProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: MultiScaleImage.IsIdleProperty.MultiScaleImage");
            retval = MultiScaleImage.IsIdleProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MultiScaleImage.IsIdleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "MultiScaleImage.IsIdleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "MultiScaleImage.IsIdleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MultiScaleImage.IsIdleProperty);
            Assert.IsNotNull(retval, "GetValue(MultiScaleImage.IsIdleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(MultiScaleImage.IsIdleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(MultiScaleImage.IsIdleProperty) does not match the default value");
            Assert.IsNotNull(MultiScaleImage.SubImagesProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: MultiScaleImage.SubImagesProperty.MultiScaleImage");
            retval = MultiScaleImage.SubImagesProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for MultiScaleImage.SubImagesProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(MultiScaleImage.SubImagesProperty);
            Assert.IsNotNull(retval, "GetValue(MultiScaleImage.SubImagesProperty) should not have returned null");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            MultiScaleImage widget = new MultiScaleImage ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: FrameworkElement.LanguageProperty.MultiScaleImage");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.MultiScaleImage");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.MultiScaleImage");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: FrameworkElement.WidthProperty.MultiScaleImage");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: FrameworkElement.HeightProperty.MultiScaleImage");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.MultiScaleImage");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.MultiScaleImage");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.MultiScaleImage");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.MultiScaleImage");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.MultiScaleImage");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.MultiScaleImage");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: FrameworkElement.MarginProperty.MultiScaleImage");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: FrameworkElement.StyleProperty.MultiScaleImage");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.MultiScaleImage");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: FrameworkElement.NameProperty.MultiScaleImage");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: FrameworkElement.TagProperty.MultiScaleImage");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: FrameworkElement.CursorProperty.MultiScaleImage");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: FrameworkElement.DataContextProperty.MultiScaleImage");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            MultiScaleImage widget = new MultiScaleImage ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: UIElement.AllowDropProperty.MultiScaleImage");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: UIElement.OpacityProperty.MultiScaleImage");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: UIElement.ClipProperty.MultiScaleImage");
            retval = UIElement.ClipProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: UIElement.RenderTransformProperty.MultiScaleImage");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: UIElement.EffectProperty.MultiScaleImage");
            retval = UIElement.EffectProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: UIElement.ProjectionProperty.MultiScaleImage");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: UIElement.OpacityMaskProperty.MultiScaleImage");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.MultiScaleImage");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.MultiScaleImage");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: UIElement.VisibilityProperty.MultiScaleImage");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.MultiScaleImage");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (MultiScaleImage)), "#metadata should not be null for: UIElement.CacheModeProperty.MultiScaleImage");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (MultiScaleImage)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_MultiScaleImage ()
        {
            MultiScaleImage widget = new MultiScaleImage ();

            Assert.IsNull(widget.Source, "Source should have returned null");
            Assert.AreEqual("0,0", widget.ViewportOrigin.ToString (), "ViewportOrigin does not match the default value");
            Assert.AreEqual((double) 1, widget.ViewportWidth, "ViewportWidth does not match the default value");
            Assert.AreEqual((double) 1, widget.AspectRatio, "AspectRatio does not match the default value");
            Assert.AreEqual(true, widget.UseSprings, "UseSprings does not match the default value");
            Assert.AreEqual(false, widget.IsDownloading, "IsDownloading does not match the default value");
            Assert.AreEqual(true, widget.AllowDownloading, "AllowDownloading does not match the default value");
            Assert.AreEqual((double) 1, widget.BlurFactor, "BlurFactor does not match the default value");
            Assert.AreEqual(true, widget.IsIdle, "IsIdle does not match the default value");
            Assert.IsNotNull(widget.SubImages, "SubImages should not have returned null");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            MultiScaleImage widget = new MultiScaleImage ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class MultiScaleSubImageTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_MultiScaleSubImage ()
        {
            MultiScaleSubImage widget = new MultiScaleSubImage ();
            object retval;

            retval = widget.ReadLocalValue(MultiScaleSubImage.ViewportOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleSubImage.ViewportOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MultiScaleSubImage.ViewportWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleSubImage.ViewportWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MultiScaleSubImage.AspectRatioProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleSubImage.AspectRatioProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MultiScaleSubImage.ZIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleSubImage.ZIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(MultiScaleSubImage.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(MultiScaleSubImage.OpacityProperty) should not have a value by default");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_GetValue_MultiScaleSubImage ()
        {
            MultiScaleSubImage widget = new MultiScaleSubImage ();
            object retval;

            Assert.IsNotNull(MultiScaleSubImage.ViewportOriginProperty.GetMetadata (typeof (MultiScaleSubImage)), "#metadata should not be null for: MultiScaleSubImage.ViewportOriginProperty.MultiScaleSubImage");
            retval = MultiScaleSubImage.ViewportOriginProperty.GetMetadata (typeof (MultiScaleSubImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MultiScaleSubImage.ViewportOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "MultiScaleSubImage.ViewportOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "MultiScaleSubImage.ViewportOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MultiScaleSubImage.ViewportOriginProperty);
            Assert.IsNotNull(retval, "GetValue(MultiScaleSubImage.ViewportOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(MultiScaleSubImage.ViewportOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(MultiScaleSubImage.ViewportOriginProperty) does not match the default value");
            Assert.IsNotNull(MultiScaleSubImage.ViewportWidthProperty.GetMetadata (typeof (MultiScaleSubImage)), "#metadata should not be null for: MultiScaleSubImage.ViewportWidthProperty.MultiScaleSubImage");
            retval = MultiScaleSubImage.ViewportWidthProperty.GetMetadata (typeof (MultiScaleSubImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MultiScaleSubImage.ViewportWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "MultiScaleSubImage.ViewportWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "MultiScaleSubImage.ViewportWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MultiScaleSubImage.ViewportWidthProperty);
            Assert.IsNotNull(retval, "GetValue(MultiScaleSubImage.ViewportWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(MultiScaleSubImage.ViewportWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(MultiScaleSubImage.ViewportWidthProperty) does not match the default value");
            Assert.IsNotNull(MultiScaleSubImage.AspectRatioProperty.GetMetadata (typeof (MultiScaleSubImage)), "#metadata should not be null for: MultiScaleSubImage.AspectRatioProperty.MultiScaleSubImage");
            retval = MultiScaleSubImage.AspectRatioProperty.GetMetadata (typeof (MultiScaleSubImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MultiScaleSubImage.AspectRatioProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "MultiScaleSubImage.AspectRatioProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "MultiScaleSubImage.AspectRatioProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MultiScaleSubImage.AspectRatioProperty);
            Assert.IsNotNull(retval, "GetValue(MultiScaleSubImage.AspectRatioProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(MultiScaleSubImage.AspectRatioProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(MultiScaleSubImage.AspectRatioProperty) does not match the default value");
            Assert.IsNotNull(MultiScaleSubImage.ZIndexProperty.GetMetadata (typeof (MultiScaleSubImage)), "#metadata should not be null for: MultiScaleSubImage.ZIndexProperty.MultiScaleSubImage");
            retval = MultiScaleSubImage.ZIndexProperty.GetMetadata (typeof (MultiScaleSubImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MultiScaleSubImage.ZIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "MultiScaleSubImage.ZIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(0, retval, "MultiScaleSubImage.ZIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MultiScaleSubImage.ZIndexProperty);
            Assert.IsNotNull(retval, "GetValue(MultiScaleSubImage.ZIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(MultiScaleSubImage.ZIndexProperty) is not of the correct type");
            Assert.AreEqual(0, retval, "GetValue(MultiScaleSubImage.ZIndexProperty) does not match the default value");
            Assert.IsNotNull(MultiScaleSubImage.OpacityProperty.GetMetadata (typeof (MultiScaleSubImage)), "#metadata should not be null for: MultiScaleSubImage.OpacityProperty.MultiScaleSubImage");
            retval = MultiScaleSubImage.OpacityProperty.GetMetadata (typeof (MultiScaleSubImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for MultiScaleSubImage.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "MultiScaleSubImage.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "MultiScaleSubImage.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(MultiScaleSubImage.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(MultiScaleSubImage.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(MultiScaleSubImage.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(MultiScaleSubImage.OpacityProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_MultiScaleSubImage ()
        {
            MultiScaleSubImage widget = new MultiScaleSubImage ();

            Assert.AreEqual("0,0", widget.ViewportOrigin.ToString (), "ViewportOrigin does not match the default value");
            Assert.AreEqual((double) 1, widget.ViewportWidth, "ViewportWidth does not match the default value");
            Assert.AreEqual((double) 1, widget.AspectRatio, "AspectRatio does not match the default value");
            Assert.AreEqual(0, widget.ZIndex, "ZIndex does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class StackPanelTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_StackPanel ()
        {
            StackPanel widget = new StackPanel ();
            object retval;

            retval = widget.ReadLocalValue(StackPanel.OrientationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(StackPanel.OrientationProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Panel ()
        {
            StackPanel widget = new StackPanel ();
            object retval;

            retval = widget.ReadLocalValue(Panel.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Panel.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Panel.IsItemsHostProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Panel.IsItemsHostProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            StackPanel widget = new StackPanel ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            StackPanel widget = new StackPanel ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_StackPanel ()
        {
            StackPanel widget = new StackPanel ();
            object retval;

            Assert.IsNotNull(StackPanel.OrientationProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: StackPanel.OrientationProperty.StackPanel");
            retval = StackPanel.OrientationProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for StackPanel.OrientationProperty should be non-null value");
            Assert.IsInstanceOfType<Orientation>(retval, "StackPanel.OrientationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Orientation.Vertical, retval, "StackPanel.OrientationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(StackPanel.OrientationProperty);
            Assert.IsNotNull(retval, "GetValue(StackPanel.OrientationProperty) should not have returned null");
            Assert.IsInstanceOfType<Orientation>(retval, "GetValue(StackPanel.OrientationProperty) is not of the correct type");
            Assert.AreEqual(Orientation.Vertical, retval, "GetValue(StackPanel.OrientationProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Panel ()
        {
            StackPanel widget = new StackPanel ();
            object retval;

            Assert.IsNotNull(Panel.BackgroundProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: Panel.BackgroundProperty.StackPanel");
            retval = Panel.BackgroundProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Panel.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Panel.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Panel.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Panel.IsItemsHostProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: Panel.IsItemsHostProperty.StackPanel");
            retval = Panel.IsItemsHostProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Panel.IsItemsHostProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Panel.IsItemsHostProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Panel.IsItemsHostProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Panel.IsItemsHostProperty);
            Assert.IsNotNull(retval, "GetValue(Panel.IsItemsHostProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Panel.IsItemsHostProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Panel.IsItemsHostProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            StackPanel widget = new StackPanel ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: FrameworkElement.LanguageProperty.StackPanel");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.StackPanel");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.StackPanel");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: FrameworkElement.WidthProperty.StackPanel");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: FrameworkElement.HeightProperty.StackPanel");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.StackPanel");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.StackPanel");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.StackPanel");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.StackPanel");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.StackPanel");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.StackPanel");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: FrameworkElement.MarginProperty.StackPanel");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: FrameworkElement.StyleProperty.StackPanel");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.StackPanel");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: FrameworkElement.NameProperty.StackPanel");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: FrameworkElement.TagProperty.StackPanel");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: FrameworkElement.CursorProperty.StackPanel");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: FrameworkElement.DataContextProperty.StackPanel");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            StackPanel widget = new StackPanel ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: UIElement.AllowDropProperty.StackPanel");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: UIElement.OpacityProperty.StackPanel");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: UIElement.ClipProperty.StackPanel");
            retval = UIElement.ClipProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: UIElement.RenderTransformProperty.StackPanel");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: UIElement.EffectProperty.StackPanel");
            retval = UIElement.EffectProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: UIElement.ProjectionProperty.StackPanel");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: UIElement.OpacityMaskProperty.StackPanel");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.StackPanel");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.StackPanel");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: UIElement.VisibilityProperty.StackPanel");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.StackPanel");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (StackPanel)), "#metadata should not be null for: UIElement.CacheModeProperty.StackPanel");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (StackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_StackPanel ()
        {
            StackPanel widget = new StackPanel ();

            Assert.AreEqual(Orientation.Vertical, widget.Orientation, "Orientation does not match the default value");
            Assert.IsNotNull(widget.Children, "Children should not have returned null");
            Assert.IsInstanceOfType<UIElementCollection>(widget.Children, "Children is not of the correct type");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.AreEqual(false, widget.IsItemsHost, "IsItemsHost does not match the default value");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            StackPanel widget = new StackPanel ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class TextBoxTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_TextBox ()
        {
            TextBox widget = new TextBox ();
            object retval;

            retval = widget.ReadLocalValue(TextBox.TextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBox.TextProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBox.MaxLengthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBox.MaxLengthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBox.IsReadOnlyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBox.IsReadOnlyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBox.AcceptsReturnProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBox.AcceptsReturnProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBox.SelectionBackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBox.SelectionBackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBox.SelectionForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBox.SelectionForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBox.TextAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBox.TextAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBox.TextWrappingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBox.TextWrappingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBox.CaretBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBox.CaretBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBox.InputScopeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBox.InputScopeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TextBox.WatermarkProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TextBox.WatermarkProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            TextBox widget = new TextBox ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            TextBox widget = new TextBox ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            TextBox widget = new TextBox ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_GetValue_TextBox ()
        {
            TextBox widget = new TextBox ();
            object retval;

            Assert.IsNotNull(TextBox.TextProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: TextBox.TextProperty.TextBox");
            retval = TextBox.TextProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextBox.TextProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "TextBox.TextProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "TextBox.TextProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextBox.TextProperty);
            Assert.IsNotNull(retval, "GetValue(TextBox.TextProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(TextBox.TextProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(TextBox.TextProperty) does not match the default value");
            Assert.IsNotNull(TextBox.MaxLengthProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: TextBox.MaxLengthProperty.TextBox");
            retval = TextBox.MaxLengthProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextBox.MaxLengthProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "TextBox.MaxLengthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(0, retval, "TextBox.MaxLengthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextBox.MaxLengthProperty);
            Assert.IsNotNull(retval, "GetValue(TextBox.MaxLengthProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(TextBox.MaxLengthProperty) is not of the correct type");
            Assert.AreEqual(0, retval, "GetValue(TextBox.MaxLengthProperty) does not match the default value");
            Assert.IsNotNull(TextBox.IsReadOnlyProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: TextBox.IsReadOnlyProperty.TextBox");
            retval = TextBox.IsReadOnlyProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextBox.IsReadOnlyProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "TextBox.IsReadOnlyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "TextBox.IsReadOnlyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextBox.IsReadOnlyProperty);
            Assert.IsNotNull(retval, "GetValue(TextBox.IsReadOnlyProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(TextBox.IsReadOnlyProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(TextBox.IsReadOnlyProperty) does not match the default value");
            Assert.IsNotNull(TextBox.AcceptsReturnProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: TextBox.AcceptsReturnProperty.TextBox");
            retval = TextBox.AcceptsReturnProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextBox.AcceptsReturnProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "TextBox.AcceptsReturnProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "TextBox.AcceptsReturnProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextBox.AcceptsReturnProperty);
            Assert.IsNotNull(retval, "GetValue(TextBox.AcceptsReturnProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(TextBox.AcceptsReturnProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(TextBox.AcceptsReturnProperty) does not match the default value");
            Assert.IsNotNull(TextBox.SelectionBackgroundProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: TextBox.SelectionBackgroundProperty.TextBox");
            retval = TextBox.SelectionBackgroundProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for TextBox.SelectionBackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(TextBox.SelectionBackgroundProperty);
            Assert.IsNull(retval, "GetValue(TextBox.SelectionBackgroundProperty) should have returned null");
            Assert.IsNotNull(TextBox.SelectionForegroundProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: TextBox.SelectionForegroundProperty.TextBox");
            retval = TextBox.SelectionForegroundProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for TextBox.SelectionForegroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(TextBox.SelectionForegroundProperty);
            Assert.IsNull(retval, "GetValue(TextBox.SelectionForegroundProperty) should have returned null");
            Assert.IsNotNull(TextBox.TextAlignmentProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: TextBox.TextAlignmentProperty.TextBox");
            retval = TextBox.TextAlignmentProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextBox.TextAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<TextAlignment>(retval, "TextBox.TextAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(TextAlignment.Left, retval, "TextBox.TextAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextBox.TextAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(TextBox.TextAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<TextAlignment>(retval, "GetValue(TextBox.TextAlignmentProperty) is not of the correct type");
            Assert.AreEqual(TextAlignment.Left, retval, "GetValue(TextBox.TextAlignmentProperty) does not match the default value");
            Assert.IsNotNull(TextBox.TextWrappingProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: TextBox.TextWrappingProperty.TextBox");
            retval = TextBox.TextWrappingProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TextBox.TextWrappingProperty should be non-null value");
            Assert.IsInstanceOfType<TextWrapping>(retval, "TextBox.TextWrappingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(TextWrapping.NoWrap, retval, "TextBox.TextWrappingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TextBox.TextWrappingProperty);
            Assert.IsNotNull(retval, "GetValue(TextBox.TextWrappingProperty) should not have returned null");
            Assert.IsInstanceOfType<TextWrapping>(retval, "GetValue(TextBox.TextWrappingProperty) is not of the correct type");
            Assert.AreEqual(TextWrapping.NoWrap, retval, "GetValue(TextBox.TextWrappingProperty) does not match the default value");
            Assert.IsNotNull(TextBox.CaretBrushProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: TextBox.CaretBrushProperty.TextBox");
            retval = TextBox.CaretBrushProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for TextBox.CaretBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(TextBox.CaretBrushProperty);
            Assert.IsNull(retval, "GetValue(TextBox.CaretBrushProperty) should have returned null");
            Assert.IsNotNull(TextBox.InputScopeProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: TextBox.InputScopeProperty.TextBox");
            retval = TextBox.InputScopeProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for TextBox.InputScopeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(TextBox.InputScopeProperty);
            Assert.IsNull(retval, "GetValue(TextBox.InputScopeProperty) should have returned null");
            Assert.IsNotNull(TextBox.WatermarkProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: TextBox.WatermarkProperty.TextBox");
            retval = TextBox.WatermarkProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for TextBox.WatermarkProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(TextBox.WatermarkProperty);
            Assert.IsNull(retval, "GetValue(TextBox.WatermarkProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            TextBox widget = new TextBox ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: Control.IsTabStopProperty.TextBox");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: Control.TabIndexProperty.TextBox");
            retval = Control.TabIndexProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: Control.TemplateProperty.TextBox");
            retval = Control.TemplateProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: Control.TabNavigationProperty.TextBox");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: Control.PaddingProperty.TextBox");
            retval = Control.PaddingProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.TextBox");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.TextBox");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: Control.BackgroundProperty.TextBox");
            retval = Control.BackgroundProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: Control.BorderBrushProperty.TextBox");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: Control.BorderThicknessProperty.TextBox");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: Control.FontSizeProperty.TextBox");
            retval = Control.FontSizeProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: Control.FontFamilyProperty.TextBox");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: Control.ForegroundProperty.TextBox");
            retval = Control.ForegroundProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: Control.FontWeightProperty.TextBox");
            retval = Control.FontWeightProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: Control.FontStyleProperty.TextBox");
            retval = Control.FontStyleProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: Control.FontStretchProperty.TextBox");
            retval = Control.FontStretchProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: Control.IsEnabledProperty.TextBox");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            TextBox widget = new TextBox ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: FrameworkElement.LanguageProperty.TextBox");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.TextBox");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.TextBox");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: FrameworkElement.WidthProperty.TextBox");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: FrameworkElement.HeightProperty.TextBox");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.TextBox");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.TextBox");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.TextBox");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.TextBox");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.TextBox");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.TextBox");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: FrameworkElement.MarginProperty.TextBox");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: FrameworkElement.StyleProperty.TextBox");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.TextBox");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: FrameworkElement.NameProperty.TextBox");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: FrameworkElement.TagProperty.TextBox");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: FrameworkElement.CursorProperty.TextBox");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: FrameworkElement.DataContextProperty.TextBox");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            TextBox widget = new TextBox ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: UIElement.AllowDropProperty.TextBox");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: UIElement.OpacityProperty.TextBox");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: UIElement.ClipProperty.TextBox");
            retval = UIElement.ClipProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: UIElement.RenderTransformProperty.TextBox");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: UIElement.EffectProperty.TextBox");
            retval = UIElement.EffectProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: UIElement.ProjectionProperty.TextBox");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: UIElement.OpacityMaskProperty.TextBox");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.TextBox");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.TextBox");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: UIElement.VisibilityProperty.TextBox");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.TextBox");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (TextBox)), "#metadata should not be null for: UIElement.CacheModeProperty.TextBox");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (TextBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_TextBox ()
        {
            TextBox widget = new TextBox ();

            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(false, widget.AcceptsReturn, "AcceptsReturn does not match the default value");
            Assert.IsNull(widget.SelectionBackground, "SelectionBackground should have returned null");
            Assert.IsNull(widget.SelectionForeground, "SelectionForeground should have returned null");
            Assert.AreEqual(TextAlignment.Left, widget.TextAlignment, "TextAlignment does not match the default value");
            Assert.AreEqual(TextWrapping.NoWrap, widget.TextWrapping, "TextWrapping does not match the default value");
            Assert.IsNull(widget.CaretBrush, "CaretBrush should have returned null");
            // exception generating test for InputScope
            // exception generating test for Watermark
            Assert.IsNull(widget.FontSource, "FontSource should have returned null");
            Assert.IsNotNull(widget.Text, "Text should not have returned null");
            Assert.AreEqual("", widget.Text, "Text does not match the default value");
            Assert.IsNotNull(widget.SelectedText, "SelectedText should not have returned null");
            Assert.AreEqual("", widget.SelectedText, "SelectedText does not match the default value");
            Assert.AreEqual(0, widget.SelectionLength, "SelectionLength does not match the default value");
            Assert.AreEqual(0, widget.SelectionStart, "SelectionStart does not match the default value");
            Assert.AreEqual(0, widget.MaxLength, "MaxLength does not match the default value");
            Assert.AreEqual(ScrollBarVisibility.Hidden, widget.HorizontalScrollBarVisibility, "HorizontalScrollBarVisibility does not match the default value");
            Assert.AreEqual(ScrollBarVisibility.Hidden, widget.VerticalScrollBarVisibility, "VerticalScrollBarVisibility does not match the default value");
            Assert.AreEqual((double) 0, widget.BaselineOffset, "BaselineOffset does not match the default value");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
	[MoonlightBug]
        public void Test_SetStringValue_TextBox ()
        {
            TextBox widget = new TextBox ();
            object retval;

            widget.SetValue(TextBox.TextProperty, "some text");
            retval = widget.GetValue(TextBox.TextProperty);
            Assert.AreEqual("some text", retval, "GetValue(TextBox.TextProperty) should have returned 'some text'");
            widget.SetValue(TextBox.TextProperty, null);
            retval = widget.GetValue(TextBox.TextProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(TextBox.TextProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(TextBox.TextProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(TextBox.TextProperty) should have returned String.Empty");
        }

        [TestMethod]
	[MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            TextBox widget = new TextBox ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class PasswordBoxTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_PasswordBox ()
        {
            PasswordBox widget = new PasswordBox ();
            object retval;

            retval = widget.ReadLocalValue(PasswordBox.PasswordProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PasswordBox.PasswordProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PasswordBox.MaxLengthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PasswordBox.MaxLengthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PasswordBox.SelectionBackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PasswordBox.SelectionBackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PasswordBox.SelectionForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PasswordBox.SelectionForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PasswordBox.CaretBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PasswordBox.CaretBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(PasswordBox.PasswordCharProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PasswordBox.PasswordCharProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            PasswordBox widget = new PasswordBox ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            PasswordBox widget = new PasswordBox ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            PasswordBox widget = new PasswordBox ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_PasswordBox ()
        {
            PasswordBox widget = new PasswordBox ();
            object retval;

            Assert.IsNotNull(PasswordBox.PasswordProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: PasswordBox.PasswordProperty.PasswordBox");
            retval = PasswordBox.PasswordProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PasswordBox.PasswordProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "PasswordBox.PasswordProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "PasswordBox.PasswordProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PasswordBox.PasswordProperty);
            Assert.IsNotNull(retval, "GetValue(PasswordBox.PasswordProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(PasswordBox.PasswordProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(PasswordBox.PasswordProperty) does not match the default value");
            Assert.IsNotNull(PasswordBox.MaxLengthProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: PasswordBox.MaxLengthProperty.PasswordBox");
            retval = PasswordBox.MaxLengthProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PasswordBox.MaxLengthProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "PasswordBox.MaxLengthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(0, retval, "PasswordBox.MaxLengthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PasswordBox.MaxLengthProperty);
            Assert.IsNotNull(retval, "GetValue(PasswordBox.MaxLengthProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(PasswordBox.MaxLengthProperty) is not of the correct type");
            Assert.AreEqual(0, retval, "GetValue(PasswordBox.MaxLengthProperty) does not match the default value");
            Assert.IsNotNull(PasswordBox.SelectionBackgroundProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: PasswordBox.SelectionBackgroundProperty.PasswordBox");
            retval = PasswordBox.SelectionBackgroundProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for PasswordBox.SelectionBackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(PasswordBox.SelectionBackgroundProperty);
            Assert.IsNull(retval, "GetValue(PasswordBox.SelectionBackgroundProperty) should have returned null");
            Assert.IsNotNull(PasswordBox.SelectionForegroundProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: PasswordBox.SelectionForegroundProperty.PasswordBox");
            retval = PasswordBox.SelectionForegroundProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for PasswordBox.SelectionForegroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(PasswordBox.SelectionForegroundProperty);
            Assert.IsNull(retval, "GetValue(PasswordBox.SelectionForegroundProperty) should have returned null");
            Assert.IsNotNull(PasswordBox.CaretBrushProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: PasswordBox.CaretBrushProperty.PasswordBox");
            retval = PasswordBox.CaretBrushProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for PasswordBox.CaretBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(PasswordBox.CaretBrushProperty);
            Assert.IsNull(retval, "GetValue(PasswordBox.CaretBrushProperty) should have returned null");
            Assert.IsNotNull(PasswordBox.PasswordCharProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: PasswordBox.PasswordCharProperty.PasswordBox");
            retval = PasswordBox.PasswordCharProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PasswordBox.PasswordCharProperty should be non-null value");
            Assert.IsInstanceOfType<char>(retval, "PasswordBox.PasswordCharProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("●", retval.ToString (), "PasswordBox.PasswordCharProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PasswordBox.PasswordCharProperty);
            Assert.IsNotNull(retval, "GetValue(PasswordBox.PasswordCharProperty) should not have returned null");
            Assert.IsInstanceOfType<char>(retval, "GetValue(PasswordBox.PasswordCharProperty) is not of the correct type");
            Assert.AreEqual("●", retval.ToString (), "GetValue(PasswordBox.PasswordCharProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            PasswordBox widget = new PasswordBox ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: Control.IsTabStopProperty.PasswordBox");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: Control.TabIndexProperty.PasswordBox");
            retval = Control.TabIndexProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: Control.TemplateProperty.PasswordBox");
            retval = Control.TemplateProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: Control.TabNavigationProperty.PasswordBox");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: Control.PaddingProperty.PasswordBox");
            retval = Control.PaddingProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.PasswordBox");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.PasswordBox");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: Control.BackgroundProperty.PasswordBox");
            retval = Control.BackgroundProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: Control.BorderBrushProperty.PasswordBox");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: Control.BorderThicknessProperty.PasswordBox");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: Control.FontSizeProperty.PasswordBox");
            retval = Control.FontSizeProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: Control.FontFamilyProperty.PasswordBox");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: Control.ForegroundProperty.PasswordBox");
            retval = Control.ForegroundProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: Control.FontWeightProperty.PasswordBox");
            retval = Control.FontWeightProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: Control.FontStyleProperty.PasswordBox");
            retval = Control.FontStyleProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: Control.FontStretchProperty.PasswordBox");
            retval = Control.FontStretchProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: Control.IsEnabledProperty.PasswordBox");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            PasswordBox widget = new PasswordBox ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: FrameworkElement.LanguageProperty.PasswordBox");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.PasswordBox");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.PasswordBox");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: FrameworkElement.WidthProperty.PasswordBox");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: FrameworkElement.HeightProperty.PasswordBox");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.PasswordBox");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.PasswordBox");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.PasswordBox");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.PasswordBox");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.PasswordBox");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.PasswordBox");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: FrameworkElement.MarginProperty.PasswordBox");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: FrameworkElement.StyleProperty.PasswordBox");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.PasswordBox");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: FrameworkElement.NameProperty.PasswordBox");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: FrameworkElement.TagProperty.PasswordBox");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: FrameworkElement.CursorProperty.PasswordBox");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: FrameworkElement.DataContextProperty.PasswordBox");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            PasswordBox widget = new PasswordBox ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: UIElement.AllowDropProperty.PasswordBox");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: UIElement.OpacityProperty.PasswordBox");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: UIElement.ClipProperty.PasswordBox");
            retval = UIElement.ClipProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: UIElement.RenderTransformProperty.PasswordBox");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: UIElement.EffectProperty.PasswordBox");
            retval = UIElement.EffectProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: UIElement.ProjectionProperty.PasswordBox");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: UIElement.OpacityMaskProperty.PasswordBox");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.PasswordBox");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.PasswordBox");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: UIElement.VisibilityProperty.PasswordBox");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.PasswordBox");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (PasswordBox)), "#metadata should not be null for: UIElement.CacheModeProperty.PasswordBox");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (PasswordBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_PasswordBox ()
        {
            PasswordBox widget = new PasswordBox ();

            Assert.IsNull(widget.SelectionBackground, "SelectionBackground should have returned null");
            Assert.IsNull(widget.SelectionForeground, "SelectionForeground should have returned null");
            Assert.IsNull(widget.CaretBrush, "CaretBrush should have returned null");
            Assert.IsNull(widget.FontSource, "FontSource should have returned null");
            Assert.IsNotNull(widget.Password, "Password should not have returned null");
            Assert.AreEqual("", widget.Password, "Password does not match the default value");
            Assert.AreEqual("●", widget.PasswordChar.ToString (), "PasswordChar does not match the default value");
            Assert.AreEqual(0, widget.MaxLength, "MaxLength does not match the default value");
            Assert.AreEqual((double) 0, widget.BaselineOffset, "BaselineOffset does not match the default value");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_PasswordBox ()
        {
            PasswordBox widget = new PasswordBox ();
            object retval;

            widget.SetValue(PasswordBox.PasswordProperty, "some text");
            retval = widget.GetValue(PasswordBox.PasswordProperty);
            Assert.AreEqual("some text", retval, "GetValue(PasswordBox.PasswordProperty) should have returned 'some text'");
            widget.SetValue(PasswordBox.PasswordProperty, null);
            retval = widget.GetValue(PasswordBox.PasswordProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(PasswordBox.PasswordProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(PasswordBox.PasswordProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(PasswordBox.PasswordProperty) should have returned String.Empty");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            PasswordBox widget = new PasswordBox ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class RowDefinitionTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_RowDefinition ()
        {
            RowDefinition widget = new RowDefinition ();
            object retval;

            retval = widget.ReadLocalValue(RowDefinition.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RowDefinition.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RowDefinition.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RowDefinition.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RowDefinition.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RowDefinition.MinHeightProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_RowDefinition ()
        {
            RowDefinition widget = new RowDefinition ();
            object retval;

            Assert.IsNotNull(RowDefinition.HeightProperty.GetMetadata (typeof (RowDefinition)), "#metadata should not be null for: RowDefinition.HeightProperty.RowDefinition");
            retval = RowDefinition.HeightProperty.GetMetadata (typeof (RowDefinition)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RowDefinition.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<GridLength>(retval, "RowDefinition.HeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("1*", retval.ToString (), "RowDefinition.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RowDefinition.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(RowDefinition.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<GridLength>(retval, "GetValue(RowDefinition.HeightProperty) is not of the correct type");
            Assert.AreEqual("1*", retval.ToString (), "GetValue(RowDefinition.HeightProperty) does not match the default value");
            Assert.IsNotNull(RowDefinition.MaxHeightProperty.GetMetadata (typeof (RowDefinition)), "#metadata should not be null for: RowDefinition.MaxHeightProperty.RowDefinition");
            retval = RowDefinition.MaxHeightProperty.GetMetadata (typeof (RowDefinition)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RowDefinition.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RowDefinition.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "RowDefinition.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RowDefinition.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(RowDefinition.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RowDefinition.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(RowDefinition.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(RowDefinition.MinHeightProperty.GetMetadata (typeof (RowDefinition)), "#metadata should not be null for: RowDefinition.MinHeightProperty.RowDefinition");
            retval = RowDefinition.MinHeightProperty.GetMetadata (typeof (RowDefinition)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RowDefinition.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RowDefinition.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "RowDefinition.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RowDefinition.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(RowDefinition.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RowDefinition.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(RowDefinition.MinHeightProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_RowDefinition ()
        {
            RowDefinition widget = new RowDefinition ();

            Assert.AreEqual("1*", widget.Height.ToString (), "Height does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class ColumnDefinitionTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ColumnDefinition ()
        {
            ColumnDefinition widget = new ColumnDefinition ();
            object retval;

            retval = widget.ReadLocalValue(ColumnDefinition.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColumnDefinition.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ColumnDefinition.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColumnDefinition.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ColumnDefinition.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ColumnDefinition.MinWidthProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ColumnDefinition ()
        {
            ColumnDefinition widget = new ColumnDefinition ();
            object retval;

            Assert.IsNotNull(ColumnDefinition.WidthProperty.GetMetadata (typeof (ColumnDefinition)), "#metadata should not be null for: ColumnDefinition.WidthProperty.ColumnDefinition");
            retval = ColumnDefinition.WidthProperty.GetMetadata (typeof (ColumnDefinition)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ColumnDefinition.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<GridLength>(retval, "ColumnDefinition.WidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("1*", retval.ToString (), "ColumnDefinition.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ColumnDefinition.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(ColumnDefinition.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<GridLength>(retval, "GetValue(ColumnDefinition.WidthProperty) is not of the correct type");
            Assert.AreEqual("1*", retval.ToString (), "GetValue(ColumnDefinition.WidthProperty) does not match the default value");
            Assert.IsNotNull(ColumnDefinition.MaxWidthProperty.GetMetadata (typeof (ColumnDefinition)), "#metadata should not be null for: ColumnDefinition.MaxWidthProperty.ColumnDefinition");
            retval = ColumnDefinition.MaxWidthProperty.GetMetadata (typeof (ColumnDefinition)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ColumnDefinition.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ColumnDefinition.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "ColumnDefinition.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ColumnDefinition.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(ColumnDefinition.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ColumnDefinition.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(ColumnDefinition.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(ColumnDefinition.MinWidthProperty.GetMetadata (typeof (ColumnDefinition)), "#metadata should not be null for: ColumnDefinition.MinWidthProperty.ColumnDefinition");
            retval = ColumnDefinition.MinWidthProperty.GetMetadata (typeof (ColumnDefinition)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ColumnDefinition.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ColumnDefinition.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "ColumnDefinition.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ColumnDefinition.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(ColumnDefinition.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ColumnDefinition.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(ColumnDefinition.MinWidthProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_ColumnDefinition ()
        {
            ColumnDefinition widget = new ColumnDefinition ();

            Assert.AreEqual("1*", widget.Width.ToString (), "Width does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class GridTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Grid ()
        {
            Grid widget = new Grid ();
            object retval;

            retval = widget.ReadLocalValue(Grid.ShowGridLinesProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Grid.ShowGridLinesProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Grid.RowProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Grid.RowProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Grid.ColumnProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Grid.ColumnProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Grid.RowSpanProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Grid.RowSpanProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Grid.ColumnSpanProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Grid.ColumnSpanProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Panel ()
        {
            Grid widget = new Grid ();
            object retval;

            retval = widget.ReadLocalValue(Panel.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Panel.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Panel.IsItemsHostProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Panel.IsItemsHostProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            Grid widget = new Grid ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            Grid widget = new Grid ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Grid ()
        {
            Grid widget = new Grid ();
            object retval;

            Assert.IsNotNull(Grid.ShowGridLinesProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: Grid.ShowGridLinesProperty.Grid");
            retval = Grid.ShowGridLinesProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Grid.ShowGridLinesProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Grid.ShowGridLinesProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Grid.ShowGridLinesProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Grid.ShowGridLinesProperty);
            Assert.IsNotNull(retval, "GetValue(Grid.ShowGridLinesProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Grid.ShowGridLinesProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Grid.ShowGridLinesProperty) does not match the default value");
            Assert.IsNotNull(Grid.RowProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: Grid.RowProperty.Grid");
            retval = Grid.RowProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Grid.RowProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Grid.RowProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(0, retval, "Grid.RowProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Grid.RowProperty);
            Assert.IsNotNull(retval, "GetValue(Grid.RowProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Grid.RowProperty) is not of the correct type");
            Assert.AreEqual(0, retval, "GetValue(Grid.RowProperty) does not match the default value");
            Assert.IsNotNull(Grid.ColumnProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: Grid.ColumnProperty.Grid");
            retval = Grid.ColumnProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Grid.ColumnProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Grid.ColumnProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(0, retval, "Grid.ColumnProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Grid.ColumnProperty);
            Assert.IsNotNull(retval, "GetValue(Grid.ColumnProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Grid.ColumnProperty) is not of the correct type");
            Assert.AreEqual(0, retval, "GetValue(Grid.ColumnProperty) does not match the default value");
            Assert.IsNotNull(Grid.RowSpanProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: Grid.RowSpanProperty.Grid");
            retval = Grid.RowSpanProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Grid.RowSpanProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Grid.RowSpanProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(1, retval, "Grid.RowSpanProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Grid.RowSpanProperty);
            Assert.IsNotNull(retval, "GetValue(Grid.RowSpanProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Grid.RowSpanProperty) is not of the correct type");
            Assert.AreEqual(1, retval, "GetValue(Grid.RowSpanProperty) does not match the default value");
            Assert.IsNotNull(Grid.ColumnSpanProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: Grid.ColumnSpanProperty.Grid");
            retval = Grid.ColumnSpanProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Grid.ColumnSpanProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Grid.ColumnSpanProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(1, retval, "Grid.ColumnSpanProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Grid.ColumnSpanProperty);
            Assert.IsNotNull(retval, "GetValue(Grid.ColumnSpanProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Grid.ColumnSpanProperty) is not of the correct type");
            Assert.AreEqual(1, retval, "GetValue(Grid.ColumnSpanProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Panel ()
        {
            Grid widget = new Grid ();
            object retval;

            Assert.IsNotNull(Panel.BackgroundProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: Panel.BackgroundProperty.Grid");
            retval = Panel.BackgroundProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Panel.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Panel.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Panel.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Panel.IsItemsHostProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: Panel.IsItemsHostProperty.Grid");
            retval = Panel.IsItemsHostProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Panel.IsItemsHostProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Panel.IsItemsHostProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Panel.IsItemsHostProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Panel.IsItemsHostProperty);
            Assert.IsNotNull(retval, "GetValue(Panel.IsItemsHostProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Panel.IsItemsHostProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Panel.IsItemsHostProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            Grid widget = new Grid ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: FrameworkElement.LanguageProperty.Grid");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.Grid");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.Grid");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: FrameworkElement.WidthProperty.Grid");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: FrameworkElement.HeightProperty.Grid");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.Grid");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.Grid");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.Grid");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.Grid");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.Grid");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.Grid");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: FrameworkElement.MarginProperty.Grid");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: FrameworkElement.StyleProperty.Grid");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.Grid");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: FrameworkElement.NameProperty.Grid");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: FrameworkElement.TagProperty.Grid");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: FrameworkElement.CursorProperty.Grid");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: FrameworkElement.DataContextProperty.Grid");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            Grid widget = new Grid ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: UIElement.AllowDropProperty.Grid");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: UIElement.OpacityProperty.Grid");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: UIElement.ClipProperty.Grid");
            retval = UIElement.ClipProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: UIElement.RenderTransformProperty.Grid");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: UIElement.EffectProperty.Grid");
            retval = UIElement.EffectProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: UIElement.ProjectionProperty.Grid");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: UIElement.OpacityMaskProperty.Grid");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.Grid");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.Grid");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: UIElement.VisibilityProperty.Grid");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.Grid");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (Grid)), "#metadata should not be null for: UIElement.CacheModeProperty.Grid");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (Grid)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_Grid ()
        {
            Grid widget = new Grid ();

            Assert.IsNotNull(widget.RowDefinitions, "RowDefinitions should not have returned null");
            Assert.IsInstanceOfType<RowDefinitionCollection>(widget.RowDefinitions, "RowDefinitions is not of the correct type");
            Assert.IsNotNull(widget.ColumnDefinitions, "ColumnDefinitions should not have returned null");
            Assert.IsInstanceOfType<ColumnDefinitionCollection>(widget.ColumnDefinitions, "ColumnDefinitions is not of the correct type");
            Assert.AreEqual(false, widget.ShowGridLines, "ShowGridLines does not match the default value");
            Assert.IsNotNull(widget.Children, "Children should not have returned null");
            Assert.IsInstanceOfType<UIElementCollection>(widget.Children, "Children is not of the correct type");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.AreEqual(false, widget.IsItemsHost, "IsItemsHost does not match the default value");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            Grid widget = new Grid ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class ControlTemplateTest
    {
        [TestMethod]
        public void Test_PropertyGetter_ControlTemplate ()
        {
            ControlTemplate widget = new ControlTemplate ();

            Assert.IsNotNull(widget.TargetType, "TargetType should have returned null");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class ItemsControlTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ItemsControl ()
        {
            ItemsControl widget = new ItemsControl ();
            object retval;

            retval = widget.ReadLocalValue(ItemsControl.ItemTemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.ItemTemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ItemsControl.ItemsPanelProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.ItemsPanelProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ItemsControl.DisplayMemberPathProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.DisplayMemberPathProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ItemsControl.ItemsSourceProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.ItemsSourceProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            ItemsControl widget = new ItemsControl ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            ItemsControl widget = new ItemsControl ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            ItemsControl widget = new ItemsControl ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ItemsControl ()
        {
            ItemsControl widget = new ItemsControl ();
            object retval;

            Assert.IsNotNull(ItemsControl.ItemTemplateProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: ItemsControl.ItemTemplateProperty.ItemsControl");
            retval = ItemsControl.ItemTemplateProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ItemsControl.ItemTemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ItemsControl.ItemTemplateProperty);
            Assert.IsNull(retval, "GetValue(ItemsControl.ItemTemplateProperty) should have returned null");
            Assert.IsNotNull(ItemsControl.ItemsPanelProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: ItemsControl.ItemsPanelProperty.ItemsControl");
            retval = ItemsControl.ItemsPanelProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ItemsControl.ItemsPanelProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ItemsControl.ItemsPanelProperty);
            Assert.IsNull(retval, "GetValue(ItemsControl.ItemsPanelProperty) should have returned null");
            Assert.IsNotNull(ItemsControl.DisplayMemberPathProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: ItemsControl.DisplayMemberPathProperty.ItemsControl");
            retval = ItemsControl.DisplayMemberPathProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ItemsControl.DisplayMemberPathProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ItemsControl.DisplayMemberPathProperty);
            Assert.IsNull(retval, "GetValue(ItemsControl.DisplayMemberPathProperty) should have returned null");
            Assert.IsNotNull(ItemsControl.ItemsSourceProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: ItemsControl.ItemsSourceProperty.ItemsControl");
            retval = ItemsControl.ItemsSourceProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ItemsControl.ItemsSourceProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ItemsControl.ItemsSourceProperty);
            Assert.IsNull(retval, "GetValue(ItemsControl.ItemsSourceProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            ItemsControl widget = new ItemsControl ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: Control.IsTabStopProperty.ItemsControl");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: Control.TabIndexProperty.ItemsControl");
            retval = Control.TabIndexProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: Control.TemplateProperty.ItemsControl");
            retval = Control.TemplateProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: Control.TabNavigationProperty.ItemsControl");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: Control.PaddingProperty.ItemsControl");
            retval = Control.PaddingProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.ItemsControl");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.ItemsControl");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: Control.BackgroundProperty.ItemsControl");
            retval = Control.BackgroundProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: Control.BorderBrushProperty.ItemsControl");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: Control.BorderThicknessProperty.ItemsControl");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: Control.FontSizeProperty.ItemsControl");
            retval = Control.FontSizeProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: Control.FontFamilyProperty.ItemsControl");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: Control.ForegroundProperty.ItemsControl");
            retval = Control.ForegroundProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: Control.FontWeightProperty.ItemsControl");
            retval = Control.FontWeightProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: Control.FontStyleProperty.ItemsControl");
            retval = Control.FontStyleProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: Control.FontStretchProperty.ItemsControl");
            retval = Control.FontStretchProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: Control.IsEnabledProperty.ItemsControl");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            ItemsControl widget = new ItemsControl ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: FrameworkElement.LanguageProperty.ItemsControl");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.ItemsControl");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.ItemsControl");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: FrameworkElement.WidthProperty.ItemsControl");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: FrameworkElement.HeightProperty.ItemsControl");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.ItemsControl");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.ItemsControl");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.ItemsControl");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.ItemsControl");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.ItemsControl");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.ItemsControl");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: FrameworkElement.MarginProperty.ItemsControl");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: FrameworkElement.StyleProperty.ItemsControl");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.ItemsControl");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: FrameworkElement.NameProperty.ItemsControl");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: FrameworkElement.TagProperty.ItemsControl");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: FrameworkElement.CursorProperty.ItemsControl");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: FrameworkElement.DataContextProperty.ItemsControl");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            ItemsControl widget = new ItemsControl ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: UIElement.AllowDropProperty.ItemsControl");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: UIElement.OpacityProperty.ItemsControl");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: UIElement.ClipProperty.ItemsControl");
            retval = UIElement.ClipProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: UIElement.RenderTransformProperty.ItemsControl");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: UIElement.EffectProperty.ItemsControl");
            retval = UIElement.EffectProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: UIElement.ProjectionProperty.ItemsControl");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: UIElement.OpacityMaskProperty.ItemsControl");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.ItemsControl");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.ItemsControl");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: UIElement.VisibilityProperty.ItemsControl");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.ItemsControl");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (ItemsControl)), "#metadata should not be null for: UIElement.CacheModeProperty.ItemsControl");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (ItemsControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_ItemsControl ()
        {
            ItemsControl widget = new ItemsControl ();

            Assert.IsNotNull(widget.Items, "Items should not have returned null");
            Assert.IsInstanceOfType<ItemCollection>(widget.Items, "Items is not of the correct type");
            Assert.IsNull(widget.ItemTemplate, "ItemTemplate should have returned null");
            Assert.IsNull(widget.ItemsPanel, "ItemsPanel should have returned null");
            Assert.IsNull(widget.DisplayMemberPath, "DisplayMemberPath should have returned null");
            Assert.IsNull(widget.ItemsSource, "ItemsSource should have returned null");
            Assert.IsNotNull(widget.ItemContainerGenerator, "ItemContainerGenerator should not have returned null");
            Assert.AreEqual("System.Windows.Controls.ItemContainerGenerator", widget.ItemContainerGenerator.ToString (), "ItemContainerGenerator does not match the default value");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        public void Test_SetStringValue_ItemsControl ()
        {
            ItemsControl widget = new ItemsControl ();
            object retval;

            widget.SetValue(ItemsControl.DisplayMemberPathProperty, "some text");
            retval = widget.GetValue(ItemsControl.DisplayMemberPathProperty);
            Assert.AreEqual("some text", retval, "GetValue(ItemsControl.DisplayMemberPathProperty) should have returned 'some text'");
            widget.SetValue(ItemsControl.DisplayMemberPathProperty, null);
            retval = widget.GetValue(ItemsControl.DisplayMemberPathProperty);
            Assert.IsNull(retval, "GetValue(ItemsControl.DisplayMemberPathProperty) should have returned null");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            ItemsControl widget = new ItemsControl ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class ViewboxTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Viewbox ()
        {
            Viewbox widget = new Viewbox ();
            object retval;

            retval = widget.ReadLocalValue(Viewbox.StretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Viewbox.StretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Viewbox.StretchDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Viewbox.StretchDirectionProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            Viewbox widget = new Viewbox ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            Viewbox widget = new Viewbox ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Viewbox ()
        {
            Viewbox widget = new Viewbox ();
            object retval;

            Assert.IsNotNull(Viewbox.StretchProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: Viewbox.StretchProperty.Viewbox");
            retval = Viewbox.StretchProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Viewbox.StretchProperty should be non-null value");
            Assert.IsInstanceOfType<Stretch>(retval, "Viewbox.StretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Stretch.Uniform, retval, "Viewbox.StretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Viewbox.StretchProperty);
            Assert.IsNotNull(retval, "GetValue(Viewbox.StretchProperty) should not have returned null");
            Assert.IsInstanceOfType<Stretch>(retval, "GetValue(Viewbox.StretchProperty) is not of the correct type");
            Assert.AreEqual(Stretch.Uniform, retval, "GetValue(Viewbox.StretchProperty) does not match the default value");
            Assert.IsNotNull(Viewbox.StretchDirectionProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: Viewbox.StretchDirectionProperty.Viewbox");
            retval = Viewbox.StretchDirectionProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Viewbox.StretchDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<StretchDirection>(retval, "Viewbox.StretchDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(StretchDirection.Both, retval, "Viewbox.StretchDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Viewbox.StretchDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(Viewbox.StretchDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<StretchDirection>(retval, "GetValue(Viewbox.StretchDirectionProperty) is not of the correct type");
            Assert.AreEqual(StretchDirection.Both, retval, "GetValue(Viewbox.StretchDirectionProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            Viewbox widget = new Viewbox ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: FrameworkElement.LanguageProperty.Viewbox");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.Viewbox");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.Viewbox");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: FrameworkElement.WidthProperty.Viewbox");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: FrameworkElement.HeightProperty.Viewbox");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.Viewbox");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.Viewbox");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.Viewbox");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.Viewbox");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.Viewbox");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.Viewbox");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: FrameworkElement.MarginProperty.Viewbox");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: FrameworkElement.StyleProperty.Viewbox");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.Viewbox");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: FrameworkElement.NameProperty.Viewbox");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: FrameworkElement.TagProperty.Viewbox");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: FrameworkElement.CursorProperty.Viewbox");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: FrameworkElement.DataContextProperty.Viewbox");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            Viewbox widget = new Viewbox ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: UIElement.AllowDropProperty.Viewbox");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: UIElement.OpacityProperty.Viewbox");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: UIElement.ClipProperty.Viewbox");
            retval = UIElement.ClipProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: UIElement.RenderTransformProperty.Viewbox");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: UIElement.EffectProperty.Viewbox");
            retval = UIElement.EffectProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: UIElement.ProjectionProperty.Viewbox");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: UIElement.OpacityMaskProperty.Viewbox");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.Viewbox");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.Viewbox");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: UIElement.VisibilityProperty.Viewbox");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.Viewbox");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (Viewbox)), "#metadata should not be null for: UIElement.CacheModeProperty.Viewbox");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (Viewbox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_Viewbox ()
        {
            Viewbox widget = new Viewbox ();

            Assert.IsNull(widget.Child, "Child should have returned null");
            Assert.AreEqual(Stretch.Uniform, widget.Stretch, "Stretch does not match the default value");
            Assert.AreEqual(StretchDirection.Both, widget.StretchDirection, "StretchDirection does not match the default value");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            Viewbox widget = new Viewbox ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class BorderTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Border ()
        {
            Border widget = new Border ();
            object retval;

            retval = widget.ReadLocalValue(Border.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Border.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Border.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Border.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Border.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Border.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Border.CornerRadiusProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Border.CornerRadiusProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Border.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Border.PaddingProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            Border widget = new Border ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            Border widget = new Border ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Border ()
        {
            Border widget = new Border ();
            object retval;

            Assert.IsNotNull(Border.BorderBrushProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: Border.BorderBrushProperty.Border");
            retval = Border.BorderBrushProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Border.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Border.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Border.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Border.BorderThicknessProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: Border.BorderThicknessProperty.Border");
            retval = Border.BorderThicknessProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Border.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Border.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Border.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Border.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Border.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Border.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Border.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Border.BackgroundProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: Border.BackgroundProperty.Border");
            retval = Border.BackgroundProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Border.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Border.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Border.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Border.CornerRadiusProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: Border.CornerRadiusProperty.Border");
            retval = Border.CornerRadiusProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Border.CornerRadiusProperty should be non-null value");
            Assert.IsInstanceOfType<CornerRadius>(retval, "Border.CornerRadiusProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Border.CornerRadiusProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Border.CornerRadiusProperty);
            Assert.IsNotNull(retval, "GetValue(Border.CornerRadiusProperty) should not have returned null");
            Assert.IsInstanceOfType<CornerRadius>(retval, "GetValue(Border.CornerRadiusProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Border.CornerRadiusProperty) does not match the default value");
            Assert.IsNotNull(Border.PaddingProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: Border.PaddingProperty.Border");
            retval = Border.PaddingProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Border.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Border.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Border.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Border.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Border.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Border.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Border.PaddingProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            Border widget = new Border ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: FrameworkElement.LanguageProperty.Border");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.Border");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.Border");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: FrameworkElement.WidthProperty.Border");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: FrameworkElement.HeightProperty.Border");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.Border");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.Border");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.Border");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.Border");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.Border");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.Border");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: FrameworkElement.MarginProperty.Border");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: FrameworkElement.StyleProperty.Border");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.Border");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: FrameworkElement.NameProperty.Border");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: FrameworkElement.TagProperty.Border");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: FrameworkElement.CursorProperty.Border");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: FrameworkElement.DataContextProperty.Border");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            Border widget = new Border ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: UIElement.AllowDropProperty.Border");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: UIElement.OpacityProperty.Border");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: UIElement.ClipProperty.Border");
            retval = UIElement.ClipProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: UIElement.RenderTransformProperty.Border");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: UIElement.EffectProperty.Border");
            retval = UIElement.EffectProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: UIElement.ProjectionProperty.Border");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: UIElement.OpacityMaskProperty.Border");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.Border");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.Border");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: UIElement.VisibilityProperty.Border");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.Border");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (Border)), "#metadata should not be null for: UIElement.CacheModeProperty.Border");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (Border)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_Border ()
        {
            Border widget = new Border ();

            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.AreEqual("0,0,0,0", widget.CornerRadius.ToString (), "CornerRadius does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.IsNull(widget.Child, "Child should have returned null");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            Border widget = new Border ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class ContentControlTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ContentControl ()
        {
            ContentControl widget = new ContentControl ();
            object retval;

            retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ContentControl.ContentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            ContentControl widget = new ContentControl ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            ContentControl widget = new ContentControl ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            ContentControl widget = new ContentControl ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ContentControl ()
        {
            ContentControl widget = new ContentControl ();
            object retval;

            Assert.IsNotNull(ContentControl.ContentTemplateProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: ContentControl.ContentTemplateProperty.ContentControl");
            retval = ContentControl.ContentTemplateProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentTemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentTemplateProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");
            Assert.IsNotNull(ContentControl.ContentProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: ContentControl.ContentProperty.ContentControl");
            retval = ContentControl.ContentProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            ContentControl widget = new ContentControl ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: Control.IsTabStopProperty.ContentControl");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: Control.TabIndexProperty.ContentControl");
            retval = Control.TabIndexProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: Control.TemplateProperty.ContentControl");
            retval = Control.TemplateProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: Control.TabNavigationProperty.ContentControl");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: Control.PaddingProperty.ContentControl");
            retval = Control.PaddingProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.ContentControl");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.ContentControl");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: Control.BackgroundProperty.ContentControl");
            retval = Control.BackgroundProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: Control.BorderBrushProperty.ContentControl");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: Control.BorderThicknessProperty.ContentControl");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: Control.FontSizeProperty.ContentControl");
            retval = Control.FontSizeProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: Control.FontFamilyProperty.ContentControl");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: Control.ForegroundProperty.ContentControl");
            retval = Control.ForegroundProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: Control.FontWeightProperty.ContentControl");
            retval = Control.FontWeightProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: Control.FontStyleProperty.ContentControl");
            retval = Control.FontStyleProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: Control.FontStretchProperty.ContentControl");
            retval = Control.FontStretchProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: Control.IsEnabledProperty.ContentControl");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            ContentControl widget = new ContentControl ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: FrameworkElement.LanguageProperty.ContentControl");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.ContentControl");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.ContentControl");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: FrameworkElement.WidthProperty.ContentControl");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: FrameworkElement.HeightProperty.ContentControl");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.ContentControl");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.ContentControl");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.ContentControl");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.ContentControl");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.ContentControl");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.ContentControl");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: FrameworkElement.MarginProperty.ContentControl");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: FrameworkElement.StyleProperty.ContentControl");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.ContentControl");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: FrameworkElement.NameProperty.ContentControl");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: FrameworkElement.TagProperty.ContentControl");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: FrameworkElement.CursorProperty.ContentControl");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: FrameworkElement.DataContextProperty.ContentControl");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            ContentControl widget = new ContentControl ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: UIElement.AllowDropProperty.ContentControl");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: UIElement.OpacityProperty.ContentControl");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: UIElement.ClipProperty.ContentControl");
            retval = UIElement.ClipProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: UIElement.RenderTransformProperty.ContentControl");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: UIElement.EffectProperty.ContentControl");
            retval = UIElement.EffectProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: UIElement.ProjectionProperty.ContentControl");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: UIElement.OpacityMaskProperty.ContentControl");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.ContentControl");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.ContentControl");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: UIElement.VisibilityProperty.ContentControl");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.ContentControl");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (ContentControl)), "#metadata should not be null for: UIElement.CacheModeProperty.ContentControl");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (ContentControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_ContentControl ()
        {
            ContentControl widget = new ContentControl ();

            Assert.IsNull(widget.Content, "Content should have returned null");
            Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            ContentControl widget = new ContentControl ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class ContentPresenterTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ContentPresenter ()
        {
            ContentPresenter widget = new ContentPresenter ();
            object retval;

            retval = widget.ReadLocalValue(ContentPresenter.ContentTemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentPresenter.ContentTemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ContentPresenter.ContentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentPresenter.ContentProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            ContentPresenter widget = new ContentPresenter ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            ContentPresenter widget = new ContentPresenter ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ContentPresenter ()
        {
            ContentPresenter widget = new ContentPresenter ();
            object retval;

            Assert.IsNotNull(ContentPresenter.ContentTemplateProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: ContentPresenter.ContentTemplateProperty.ContentPresenter");
            retval = ContentPresenter.ContentTemplateProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentPresenter.ContentTemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentPresenter.ContentTemplateProperty);
            Assert.IsNull(retval, "GetValue(ContentPresenter.ContentTemplateProperty) should have returned null");
            Assert.IsNotNull(ContentPresenter.ContentProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: ContentPresenter.ContentProperty.ContentPresenter");
            retval = ContentPresenter.ContentProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentPresenter.ContentProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentPresenter.ContentProperty);
            Assert.IsNull(retval, "GetValue(ContentPresenter.ContentProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            ContentPresenter widget = new ContentPresenter ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: FrameworkElement.LanguageProperty.ContentPresenter");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.ContentPresenter");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.ContentPresenter");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: FrameworkElement.WidthProperty.ContentPresenter");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: FrameworkElement.HeightProperty.ContentPresenter");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.ContentPresenter");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.ContentPresenter");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.ContentPresenter");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.ContentPresenter");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.ContentPresenter");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.ContentPresenter");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: FrameworkElement.MarginProperty.ContentPresenter");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: FrameworkElement.StyleProperty.ContentPresenter");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.ContentPresenter");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: FrameworkElement.NameProperty.ContentPresenter");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: FrameworkElement.TagProperty.ContentPresenter");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: FrameworkElement.CursorProperty.ContentPresenter");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: FrameworkElement.DataContextProperty.ContentPresenter");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            ContentPresenter widget = new ContentPresenter ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: UIElement.AllowDropProperty.ContentPresenter");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: UIElement.OpacityProperty.ContentPresenter");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: UIElement.ClipProperty.ContentPresenter");
            retval = UIElement.ClipProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: UIElement.RenderTransformProperty.ContentPresenter");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: UIElement.EffectProperty.ContentPresenter");
            retval = UIElement.EffectProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: UIElement.ProjectionProperty.ContentPresenter");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: UIElement.OpacityMaskProperty.ContentPresenter");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.ContentPresenter");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.ContentPresenter");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: UIElement.VisibilityProperty.ContentPresenter");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.ContentPresenter");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (ContentPresenter)), "#metadata should not be null for: UIElement.CacheModeProperty.ContentPresenter");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (ContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_ContentPresenter ()
        {
            ContentPresenter widget = new ContentPresenter ();

            Assert.IsNull(widget.Content, "Content should have returned null");
            Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            ContentPresenter widget = new ContentPresenter ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class ItemsPanelTemplateTest
    {
    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class ItemsPresenterTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            ItemsPresenter widget = new ItemsPresenter ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            ItemsPresenter widget = new ItemsPresenter ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            ItemsPresenter widget = new ItemsPresenter ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: FrameworkElement.LanguageProperty.ItemsPresenter");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.ItemsPresenter");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.ItemsPresenter");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: FrameworkElement.WidthProperty.ItemsPresenter");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: FrameworkElement.HeightProperty.ItemsPresenter");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.ItemsPresenter");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.ItemsPresenter");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.ItemsPresenter");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.ItemsPresenter");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.ItemsPresenter");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.ItemsPresenter");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: FrameworkElement.MarginProperty.ItemsPresenter");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: FrameworkElement.StyleProperty.ItemsPresenter");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.ItemsPresenter");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: FrameworkElement.NameProperty.ItemsPresenter");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: FrameworkElement.TagProperty.ItemsPresenter");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: FrameworkElement.CursorProperty.ItemsPresenter");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: FrameworkElement.DataContextProperty.ItemsPresenter");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            ItemsPresenter widget = new ItemsPresenter ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: UIElement.AllowDropProperty.ItemsPresenter");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: UIElement.OpacityProperty.ItemsPresenter");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: UIElement.ClipProperty.ItemsPresenter");
            retval = UIElement.ClipProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: UIElement.RenderTransformProperty.ItemsPresenter");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: UIElement.EffectProperty.ItemsPresenter");
            retval = UIElement.EffectProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: UIElement.ProjectionProperty.ItemsPresenter");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: UIElement.OpacityMaskProperty.ItemsPresenter");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.ItemsPresenter");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.ItemsPresenter");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: UIElement.VisibilityProperty.ItemsPresenter");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.ItemsPresenter");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (ItemsPresenter)), "#metadata should not be null for: UIElement.CacheModeProperty.ItemsPresenter");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (ItemsPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_ItemsPresenter ()
        {
            ItemsPresenter widget = new ItemsPresenter ();

            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            ItemsPresenter widget = new ItemsPresenter ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class WebBrowserTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            WebBrowser widget = new WebBrowser ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            WebBrowser widget = new WebBrowser ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            WebBrowser widget = new WebBrowser ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: FrameworkElement.LanguageProperty.WebBrowser");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.WebBrowser");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.WebBrowser");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: FrameworkElement.WidthProperty.WebBrowser");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: FrameworkElement.HeightProperty.WebBrowser");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.WebBrowser");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.WebBrowser");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.WebBrowser");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.WebBrowser");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.WebBrowser");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.WebBrowser");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: FrameworkElement.MarginProperty.WebBrowser");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: FrameworkElement.StyleProperty.WebBrowser");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.WebBrowser");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: FrameworkElement.NameProperty.WebBrowser");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: FrameworkElement.TagProperty.WebBrowser");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: FrameworkElement.CursorProperty.WebBrowser");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: FrameworkElement.DataContextProperty.WebBrowser");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            WebBrowser widget = new WebBrowser ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: UIElement.AllowDropProperty.WebBrowser");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: UIElement.OpacityProperty.WebBrowser");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: UIElement.ClipProperty.WebBrowser");
            retval = UIElement.ClipProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: UIElement.RenderTransformProperty.WebBrowser");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: UIElement.EffectProperty.WebBrowser");
            retval = UIElement.EffectProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: UIElement.ProjectionProperty.WebBrowser");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: UIElement.OpacityMaskProperty.WebBrowser");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.WebBrowser");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.WebBrowser");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: UIElement.VisibilityProperty.WebBrowser");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.WebBrowser");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (WebBrowser)), "#metadata should not be null for: UIElement.CacheModeProperty.WebBrowser");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (WebBrowser)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_PropertyGetter_WebBrowser ()
        {
            WebBrowser widget = new WebBrowser ();

            Assert.IsNotNull(widget.Source, "Source should not have returned null");
            Assert.AreEqual("", widget.Source.ToString (), "Source does not match the default value");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            WebBrowser widget = new WebBrowser ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class WebBrowserBrushTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_WebBrowserBrush ()
        {
            WebBrowserBrush widget = new WebBrowserBrush ();
            object retval;

            retval = widget.ReadLocalValue(WebBrowserBrush.SourceNameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(WebBrowserBrush.SourceNameProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_TileBrush ()
        {
            WebBrowserBrush widget = new WebBrowserBrush ();
            object retval;

            retval = widget.ReadLocalValue(TileBrush.AlignmentXProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TileBrush.AlignmentXProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TileBrush.AlignmentYProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TileBrush.AlignmentYProperty) should not have a value by default");
            retval = widget.ReadLocalValue(TileBrush.StretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(TileBrush.StretchProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Brush ()
        {
            WebBrowserBrush widget = new WebBrowserBrush ();
            object retval;

            retval = widget.ReadLocalValue(Brush.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Brush.TransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.TransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Brush.RelativeTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Brush.RelativeTransformProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_WebBrowserBrush ()
        {
            WebBrowserBrush widget = new WebBrowserBrush ();
            object retval;

            Assert.IsNotNull(WebBrowserBrush.SourceNameProperty.GetMetadata (typeof (WebBrowserBrush)), "#metadata should not be null for: WebBrowserBrush.SourceNameProperty.WebBrowserBrush");
            retval = WebBrowserBrush.SourceNameProperty.GetMetadata (typeof (WebBrowserBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for WebBrowserBrush.SourceNameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "WebBrowserBrush.SourceNameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "WebBrowserBrush.SourceNameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(WebBrowserBrush.SourceNameProperty);
            Assert.IsNotNull(retval, "GetValue(WebBrowserBrush.SourceNameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(WebBrowserBrush.SourceNameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(WebBrowserBrush.SourceNameProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_TileBrush ()
        {
            WebBrowserBrush widget = new WebBrowserBrush ();
            object retval;

            Assert.IsNotNull(TileBrush.AlignmentXProperty.GetMetadata (typeof (WebBrowserBrush)), "#metadata should not be null for: TileBrush.AlignmentXProperty.WebBrowserBrush");
            retval = TileBrush.AlignmentXProperty.GetMetadata (typeof (WebBrowserBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TileBrush.AlignmentXProperty should be non-null value");
            Assert.IsInstanceOfType<AlignmentX>(retval, "TileBrush.AlignmentXProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(AlignmentX.Center, retval, "TileBrush.AlignmentXProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TileBrush.AlignmentXProperty);
            Assert.IsNotNull(retval, "GetValue(TileBrush.AlignmentXProperty) should not have returned null");
            Assert.IsInstanceOfType<AlignmentX>(retval, "GetValue(TileBrush.AlignmentXProperty) is not of the correct type");
            Assert.AreEqual(AlignmentX.Center, retval, "GetValue(TileBrush.AlignmentXProperty) does not match the default value");
            Assert.IsNotNull(TileBrush.AlignmentYProperty.GetMetadata (typeof (WebBrowserBrush)), "#metadata should not be null for: TileBrush.AlignmentYProperty.WebBrowserBrush");
            retval = TileBrush.AlignmentYProperty.GetMetadata (typeof (WebBrowserBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TileBrush.AlignmentYProperty should be non-null value");
            Assert.IsInstanceOfType<AlignmentY>(retval, "TileBrush.AlignmentYProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(AlignmentY.Center, retval, "TileBrush.AlignmentYProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TileBrush.AlignmentYProperty);
            Assert.IsNotNull(retval, "GetValue(TileBrush.AlignmentYProperty) should not have returned null");
            Assert.IsInstanceOfType<AlignmentY>(retval, "GetValue(TileBrush.AlignmentYProperty) is not of the correct type");
            Assert.AreEqual(AlignmentY.Center, retval, "GetValue(TileBrush.AlignmentYProperty) does not match the default value");
            Assert.IsNotNull(TileBrush.StretchProperty.GetMetadata (typeof (WebBrowserBrush)), "#metadata should not be null for: TileBrush.StretchProperty.WebBrowserBrush");
            retval = TileBrush.StretchProperty.GetMetadata (typeof (WebBrowserBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for TileBrush.StretchProperty should be non-null value");
            Assert.IsInstanceOfType<Stretch>(retval, "TileBrush.StretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Stretch.Fill, retval, "TileBrush.StretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(TileBrush.StretchProperty);
            Assert.IsNotNull(retval, "GetValue(TileBrush.StretchProperty) should not have returned null");
            Assert.IsInstanceOfType<Stretch>(retval, "GetValue(TileBrush.StretchProperty) is not of the correct type");
            Assert.AreEqual(Stretch.Fill, retval, "GetValue(TileBrush.StretchProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Brush ()
        {
            WebBrowserBrush widget = new WebBrowserBrush ();
            object retval;

            Assert.IsNotNull(Brush.OpacityProperty.GetMetadata (typeof (WebBrowserBrush)), "#metadata should not be null for: Brush.OpacityProperty.WebBrowserBrush");
            retval = Brush.OpacityProperty.GetMetadata (typeof (WebBrowserBrush)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Brush.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Brush.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "Brush.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Brush.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Brush.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(Brush.OpacityProperty) does not match the default value");
            Assert.IsNotNull(Brush.TransformProperty.GetMetadata (typeof (WebBrowserBrush)), "#metadata should not be null for: Brush.TransformProperty.WebBrowserBrush");
            retval = Brush.TransformProperty.GetMetadata (typeof (WebBrowserBrush)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Brush.TransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Brush.TransformProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.TransformProperty) should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(retval, "GetValue(Brush.TransformProperty) is not of the correct type");
            Assert.IsNotNull(Brush.RelativeTransformProperty.GetMetadata (typeof (WebBrowserBrush)), "#metadata should not be null for: Brush.RelativeTransformProperty.WebBrowserBrush");
            retval = Brush.RelativeTransformProperty.GetMetadata (typeof (WebBrowserBrush)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Brush.RelativeTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Brush.RelativeTransformProperty);
            Assert.IsNotNull(retval, "GetValue(Brush.RelativeTransformProperty) should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(retval, "GetValue(Brush.RelativeTransformProperty) is not of the correct type");
        }

        [TestMethod]
        public void Test_PropertyGetter_WebBrowserBrush ()
        {
            WebBrowserBrush widget = new WebBrowserBrush ();

            Assert.IsNotNull(widget.SourceName, "SourceName should not have returned null");
            Assert.AreEqual("", widget.SourceName, "SourceName does not match the default value");
            Assert.AreEqual(AlignmentX.Center, widget.AlignmentX, "AlignmentX does not match the default value");
            Assert.AreEqual(AlignmentY.Center, widget.AlignmentY, "AlignmentY does not match the default value");
            Assert.AreEqual(Stretch.Fill, widget.Stretch, "Stretch does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNotNull(widget.Transform, "Transform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.Transform, "Transform is not of the correct type");
            Assert.IsNotNull(widget.RelativeTransform, "RelativeTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RelativeTransform, "RelativeTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_WebBrowserBrush ()
        {
            WebBrowserBrush widget = new WebBrowserBrush ();
            object retval;

            widget.SetValue(WebBrowserBrush.SourceNameProperty, "some text");
            retval = widget.GetValue(WebBrowserBrush.SourceNameProperty);
            Assert.AreEqual("some text", retval, "GetValue(WebBrowserBrush.SourceNameProperty) should have returned 'some text'");
            widget.SetValue(WebBrowserBrush.SourceNameProperty, null);
            retval = widget.GetValue(WebBrowserBrush.SourceNameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(WebBrowserBrush.SourceNameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(WebBrowserBrush.SourceNameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(WebBrowserBrush.SourceNameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Media.Imaging
{
    [TestClass]
    public partial class BitmapImageTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_BitmapImage ()
        {
            BitmapImage widget = new BitmapImage ();
            object retval;

            retval = widget.ReadLocalValue(BitmapImage.CreateOptionsProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(BitmapImage.CreateOptionsProperty) should not have a value by default");
            retval = widget.ReadLocalValue(BitmapImage.UriSourceProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(BitmapImage.UriSourceProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_BitmapSource ()
        {
            BitmapImage widget = new BitmapImage ();
            object retval;

            retval = widget.ReadLocalValue(BitmapSource.PixelWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(BitmapSource.PixelWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(BitmapSource.PixelHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(BitmapSource.PixelHeightProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_BitmapImage ()
        {
            BitmapImage widget = new BitmapImage ();
            object retval;

            Assert.IsNotNull(BitmapImage.CreateOptionsProperty.GetMetadata (typeof (BitmapImage)), "#metadata should not be null for: BitmapImage.CreateOptionsProperty.BitmapImage");
            retval = BitmapImage.CreateOptionsProperty.GetMetadata (typeof (BitmapImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for BitmapImage.CreateOptionsProperty should be non-null value");
            Assert.IsInstanceOfType<BitmapCreateOptions>(retval, "BitmapImage.CreateOptionsProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(BitmapCreateOptions.DelayCreation, retval, "BitmapImage.CreateOptionsProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(BitmapImage.CreateOptionsProperty);
            Assert.IsNotNull(retval, "GetValue(BitmapImage.CreateOptionsProperty) should not have returned null");
            Assert.IsInstanceOfType<BitmapCreateOptions>(retval, "GetValue(BitmapImage.CreateOptionsProperty) is not of the correct type");
            Assert.AreEqual(BitmapCreateOptions.DelayCreation, retval, "GetValue(BitmapImage.CreateOptionsProperty) does not match the default value");
            Assert.IsNotNull(BitmapImage.UriSourceProperty.GetMetadata (typeof (BitmapImage)), "#metadata should not be null for: BitmapImage.UriSourceProperty.BitmapImage");
            retval = BitmapImage.UriSourceProperty.GetMetadata (typeof (BitmapImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for BitmapImage.UriSourceProperty should be non-null value");
            Assert.IsInstanceOfType<Uri>(retval, "BitmapImage.UriSourceProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval.ToString (), "BitmapImage.UriSourceProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(BitmapImage.UriSourceProperty);
            Assert.IsNotNull(retval, "GetValue(BitmapImage.UriSourceProperty) should not have returned null");
            Assert.IsInstanceOfType<Uri>(retval, "GetValue(BitmapImage.UriSourceProperty) is not of the correct type");
            Assert.AreEqual("", retval.ToString (), "GetValue(BitmapImage.UriSourceProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_BitmapSource ()
        {
            BitmapImage widget = new BitmapImage ();
            object retval;

            Assert.IsNotNull(BitmapSource.PixelWidthProperty.GetMetadata (typeof (BitmapImage)), "#metadata should not be null for: BitmapSource.PixelWidthProperty.BitmapImage");
            retval = BitmapSource.PixelWidthProperty.GetMetadata (typeof (BitmapImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for BitmapSource.PixelWidthProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "BitmapSource.PixelWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(0, retval, "BitmapSource.PixelWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(BitmapSource.PixelWidthProperty);
            Assert.IsNotNull(retval, "GetValue(BitmapSource.PixelWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(BitmapSource.PixelWidthProperty) is not of the correct type");
            Assert.AreEqual(0, retval, "GetValue(BitmapSource.PixelWidthProperty) does not match the default value");
            Assert.IsNotNull(BitmapSource.PixelHeightProperty.GetMetadata (typeof (BitmapImage)), "#metadata should not be null for: BitmapSource.PixelHeightProperty.BitmapImage");
            retval = BitmapSource.PixelHeightProperty.GetMetadata (typeof (BitmapImage)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for BitmapSource.PixelHeightProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "BitmapSource.PixelHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(0, retval, "BitmapSource.PixelHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(BitmapSource.PixelHeightProperty);
            Assert.IsNotNull(retval, "GetValue(BitmapSource.PixelHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(BitmapSource.PixelHeightProperty) is not of the correct type");
            Assert.AreEqual(0, retval, "GetValue(BitmapSource.PixelHeightProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_BitmapImage ()
        {
            BitmapImage widget = new BitmapImage ();

            Assert.AreEqual(BitmapCreateOptions.DelayCreation, widget.CreateOptions, "CreateOptions does not match the default value");
            Assert.IsNotNull(widget.UriSource, "UriSource should not have returned null");
            Assert.AreEqual("", widget.UriSource.ToString (), "UriSource does not match the default value");
            Assert.AreEqual(0, widget.PixelHeight, "PixelHeight does not match the default value");
            Assert.AreEqual(0, widget.PixelWidth, "PixelWidth does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Controls.Primitives
{
    [TestClass]
    public partial class PopupTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Popup ()
        {
            Popup widget = new Popup ();
            object retval;

            retval = widget.ReadLocalValue(Popup.ChildProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Popup.ChildProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Popup.IsOpenProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Popup.IsOpenProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Popup.HorizontalOffsetProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Popup.HorizontalOffsetProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Popup.VerticalOffsetProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Popup.VerticalOffsetProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            Popup widget = new Popup ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            Popup widget = new Popup ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Popup ()
        {
            Popup widget = new Popup ();
            object retval;

            Assert.IsNotNull(Popup.ChildProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: Popup.ChildProperty.Popup");
            retval = Popup.ChildProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Popup.ChildProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Popup.ChildProperty);
            Assert.IsNull(retval, "GetValue(Popup.ChildProperty) should have returned null");
            Assert.IsNotNull(Popup.IsOpenProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: Popup.IsOpenProperty.Popup");
            retval = Popup.IsOpenProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Popup.IsOpenProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Popup.IsOpenProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Popup.IsOpenProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Popup.IsOpenProperty);
            Assert.IsNotNull(retval, "GetValue(Popup.IsOpenProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Popup.IsOpenProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Popup.IsOpenProperty) does not match the default value");
            Assert.IsNotNull(Popup.HorizontalOffsetProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: Popup.HorizontalOffsetProperty.Popup");
            retval = Popup.HorizontalOffsetProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Popup.HorizontalOffsetProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Popup.HorizontalOffsetProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "Popup.HorizontalOffsetProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Popup.HorizontalOffsetProperty);
            Assert.IsNotNull(retval, "GetValue(Popup.HorizontalOffsetProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Popup.HorizontalOffsetProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(Popup.HorizontalOffsetProperty) does not match the default value");
            Assert.IsNotNull(Popup.VerticalOffsetProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: Popup.VerticalOffsetProperty.Popup");
            retval = Popup.VerticalOffsetProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Popup.VerticalOffsetProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Popup.VerticalOffsetProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "Popup.VerticalOffsetProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Popup.VerticalOffsetProperty);
            Assert.IsNotNull(retval, "GetValue(Popup.VerticalOffsetProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Popup.VerticalOffsetProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(Popup.VerticalOffsetProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            Popup widget = new Popup ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: FrameworkElement.LanguageProperty.Popup");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.Popup");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.Popup");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: FrameworkElement.WidthProperty.Popup");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: FrameworkElement.HeightProperty.Popup");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.Popup");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.Popup");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.Popup");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.Popup");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.Popup");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.Popup");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: FrameworkElement.MarginProperty.Popup");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: FrameworkElement.StyleProperty.Popup");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.Popup");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: FrameworkElement.NameProperty.Popup");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: FrameworkElement.TagProperty.Popup");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: FrameworkElement.CursorProperty.Popup");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: FrameworkElement.DataContextProperty.Popup");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            Popup widget = new Popup ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: UIElement.AllowDropProperty.Popup");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: UIElement.OpacityProperty.Popup");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: UIElement.ClipProperty.Popup");
            retval = UIElement.ClipProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: UIElement.RenderTransformProperty.Popup");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: UIElement.EffectProperty.Popup");
            retval = UIElement.EffectProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: UIElement.ProjectionProperty.Popup");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: UIElement.OpacityMaskProperty.Popup");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.Popup");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.Popup");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: UIElement.VisibilityProperty.Popup");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.Popup");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (Popup)), "#metadata should not be null for: UIElement.CacheModeProperty.Popup");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (Popup)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_Popup ()
        {
            Popup widget = new Popup ();

            Assert.IsNull(widget.Child, "Child should have returned null");
            Assert.AreEqual(false, widget.IsOpen, "IsOpen does not match the default value");
            Assert.AreEqual((double) 0, widget.HorizontalOffset, "HorizontalOffset does not match the default value");
            Assert.AreEqual((double) 0, widget.VerticalOffset, "VerticalOffset does not match the default value");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            Popup widget = new Popup ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Media.Effects
{
    [TestClass]
    public partial class PixelShaderTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_PixelShader ()
        {
            PixelShader widget = new PixelShader ();
            object retval;

            retval = widget.ReadLocalValue(PixelShader.UriSourceProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PixelShader.UriSourceProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_PixelShader ()
        {
            PixelShader widget = new PixelShader ();
            object retval;

            Assert.IsNotNull(PixelShader.UriSourceProperty.GetMetadata (typeof (PixelShader)), "#metadata should not be null for: PixelShader.UriSourceProperty.PixelShader");
            retval = PixelShader.UriSourceProperty.GetMetadata (typeof (PixelShader)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PixelShader.UriSourceProperty should be non-null value");
            Assert.IsInstanceOfType<Uri>(retval, "PixelShader.UriSourceProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval.ToString (), "PixelShader.UriSourceProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PixelShader.UriSourceProperty);
            Assert.IsNotNull(retval, "GetValue(PixelShader.UriSourceProperty) should not have returned null");
            Assert.IsInstanceOfType<Uri>(retval, "GetValue(PixelShader.UriSourceProperty) is not of the correct type");
            Assert.AreEqual("", retval.ToString (), "GetValue(PixelShader.UriSourceProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_PixelShader ()
        {
            PixelShader widget = new PixelShader ();

            Assert.IsNotNull(widget.UriSource, "UriSource should not have returned null");
            Assert.AreEqual("", widget.UriSource.ToString (), "UriSource does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Effects
{
    [TestClass]
    public partial class BlurEffectTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_BlurEffect ()
        {
            BlurEffect widget = new BlurEffect ();
            object retval;

            retval = widget.ReadLocalValue(BlurEffect.RadiusProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(BlurEffect.RadiusProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_BlurEffect ()
        {
            BlurEffect widget = new BlurEffect ();
            object retval;

            Assert.IsNotNull(BlurEffect.RadiusProperty.GetMetadata (typeof (BlurEffect)), "#metadata should not be null for: BlurEffect.RadiusProperty.BlurEffect");
            retval = BlurEffect.RadiusProperty.GetMetadata (typeof (BlurEffect)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for BlurEffect.RadiusProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "BlurEffect.RadiusProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 5, retval, "BlurEffect.RadiusProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(BlurEffect.RadiusProperty);
            Assert.IsNotNull(retval, "GetValue(BlurEffect.RadiusProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(BlurEffect.RadiusProperty) is not of the correct type");
            Assert.AreEqual((double) 5, retval, "GetValue(BlurEffect.RadiusProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_BlurEffect ()
        {
            BlurEffect widget = new BlurEffect ();

            Assert.AreEqual((double) 5, widget.Radius, "Radius does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Media.Effects
{
    [TestClass]
    public partial class DropShadowEffectTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_DropShadowEffect ()
        {
            DropShadowEffect widget = new DropShadowEffect ();
            object retval;

            retval = widget.ReadLocalValue(DropShadowEffect.ColorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DropShadowEffect.ColorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(DropShadowEffect.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DropShadowEffect.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(DropShadowEffect.DirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DropShadowEffect.DirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(DropShadowEffect.BlurRadiusProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DropShadowEffect.BlurRadiusProperty) should not have a value by default");
            retval = widget.ReadLocalValue(DropShadowEffect.ShadowDepthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DropShadowEffect.ShadowDepthProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_DropShadowEffect ()
        {
            DropShadowEffect widget = new DropShadowEffect ();
            object retval;

            Assert.IsNotNull(DropShadowEffect.ColorProperty.GetMetadata (typeof (DropShadowEffect)), "#metadata should not be null for: DropShadowEffect.ColorProperty.DropShadowEffect");
            retval = DropShadowEffect.ColorProperty.GetMetadata (typeof (DropShadowEffect)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for DropShadowEffect.ColorProperty should be non-null value");
            Assert.IsInstanceOfType<Color>(retval, "DropShadowEffect.ColorProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("#FF000000", retval.ToString (), "DropShadowEffect.ColorProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(DropShadowEffect.ColorProperty);
            Assert.IsNotNull(retval, "GetValue(DropShadowEffect.ColorProperty) should not have returned null");
            Assert.IsInstanceOfType<Color>(retval, "GetValue(DropShadowEffect.ColorProperty) is not of the correct type");
            Assert.AreEqual("#FF000000", retval.ToString (), "GetValue(DropShadowEffect.ColorProperty) does not match the default value");
            Assert.IsNotNull(DropShadowEffect.OpacityProperty.GetMetadata (typeof (DropShadowEffect)), "#metadata should not be null for: DropShadowEffect.OpacityProperty.DropShadowEffect");
            retval = DropShadowEffect.OpacityProperty.GetMetadata (typeof (DropShadowEffect)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for DropShadowEffect.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "DropShadowEffect.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "DropShadowEffect.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(DropShadowEffect.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(DropShadowEffect.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(DropShadowEffect.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(DropShadowEffect.OpacityProperty) does not match the default value");
            Assert.IsNotNull(DropShadowEffect.DirectionProperty.GetMetadata (typeof (DropShadowEffect)), "#metadata should not be null for: DropShadowEffect.DirectionProperty.DropShadowEffect");
            retval = DropShadowEffect.DirectionProperty.GetMetadata (typeof (DropShadowEffect)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for DropShadowEffect.DirectionProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "DropShadowEffect.DirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 315, retval, "DropShadowEffect.DirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(DropShadowEffect.DirectionProperty);
            Assert.IsNotNull(retval, "GetValue(DropShadowEffect.DirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(DropShadowEffect.DirectionProperty) is not of the correct type");
            Assert.AreEqual((double) 315, retval, "GetValue(DropShadowEffect.DirectionProperty) does not match the default value");
            Assert.IsNotNull(DropShadowEffect.BlurRadiusProperty.GetMetadata (typeof (DropShadowEffect)), "#metadata should not be null for: DropShadowEffect.BlurRadiusProperty.DropShadowEffect");
            retval = DropShadowEffect.BlurRadiusProperty.GetMetadata (typeof (DropShadowEffect)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for DropShadowEffect.BlurRadiusProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "DropShadowEffect.BlurRadiusProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 5, retval, "DropShadowEffect.BlurRadiusProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(DropShadowEffect.BlurRadiusProperty);
            Assert.IsNotNull(retval, "GetValue(DropShadowEffect.BlurRadiusProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(DropShadowEffect.BlurRadiusProperty) is not of the correct type");
            Assert.AreEqual((double) 5, retval, "GetValue(DropShadowEffect.BlurRadiusProperty) does not match the default value");
            Assert.IsNotNull(DropShadowEffect.ShadowDepthProperty.GetMetadata (typeof (DropShadowEffect)), "#metadata should not be null for: DropShadowEffect.ShadowDepthProperty.DropShadowEffect");
            retval = DropShadowEffect.ShadowDepthProperty.GetMetadata (typeof (DropShadowEffect)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for DropShadowEffect.ShadowDepthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "DropShadowEffect.ShadowDepthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 5, retval, "DropShadowEffect.ShadowDepthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(DropShadowEffect.ShadowDepthProperty);
            Assert.IsNotNull(retval, "GetValue(DropShadowEffect.ShadowDepthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(DropShadowEffect.ShadowDepthProperty) is not of the correct type");
            Assert.AreEqual((double) 5, retval, "GetValue(DropShadowEffect.ShadowDepthProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_DropShadowEffect ()
        {
            DropShadowEffect widget = new DropShadowEffect ();

            Assert.AreEqual("#FF000000", widget.Color.ToString (), "Color does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.AreEqual((double) 315, widget.Direction, "Direction does not match the default value");
            Assert.AreEqual((double) 5, widget.BlurRadius, "BlurRadius does not match the default value");
            Assert.AreEqual((double) 5, widget.ShadowDepth, "ShadowDepth does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Printing
{
    [TestClass]
    public partial class PrintDocumentTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_PrintDocument ()
        {
            PrintDocument widget = new PrintDocument ();
            object retval;

            retval = widget.ReadLocalValue(PrintDocument.PrintedPageCountProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(PrintDocument.PrintedPageCountProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_PrintDocument ()
        {
            PrintDocument widget = new PrintDocument ();
            object retval;

            Assert.IsNotNull(PrintDocument.PrintedPageCountProperty.GetMetadata (typeof (PrintDocument)), "#metadata should not be null for: PrintDocument.PrintedPageCountProperty.PrintDocument");
            retval = PrintDocument.PrintedPageCountProperty.GetMetadata (typeof (PrintDocument)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for PrintDocument.PrintedPageCountProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "PrintDocument.PrintedPageCountProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(0, retval, "PrintDocument.PrintedPageCountProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(PrintDocument.PrintedPageCountProperty);
            Assert.IsNotNull(retval, "GetValue(PrintDocument.PrintedPageCountProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(PrintDocument.PrintedPageCountProperty) is not of the correct type");
            Assert.AreEqual(0, retval, "GetValue(PrintDocument.PrintedPageCountProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_PrintDocument ()
        {
            PrintDocument widget = new PrintDocument ();

            Assert.AreEqual(0, widget.PrintedPageCount, "PrintedPageCount does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class UserControlTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_UserControl ()
        {
            UserControl widget = new UserControl ();
            object retval;

            retval = widget.ReadLocalValue(UserControl.ContentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UserControl.ContentProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            UserControl widget = new UserControl ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            UserControl widget = new UserControl ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            UserControl widget = new UserControl ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_UserControl ()
        {
            UserControl widget = new UserControl ();
            object retval;

            Assert.IsNotNull(UserControl.ContentProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: UserControl.ContentProperty.UserControl");
            retval = UserControl.ContentProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UserControl.ContentProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UserControl.ContentProperty);
            Assert.IsNull(retval, "GetValue(UserControl.ContentProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            UserControl widget = new UserControl ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: Control.IsTabStopProperty.UserControl");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: Control.TabIndexProperty.UserControl");
            retval = Control.TabIndexProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: Control.TemplateProperty.UserControl");
            retval = Control.TemplateProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: Control.TabNavigationProperty.UserControl");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: Control.PaddingProperty.UserControl");
            retval = Control.PaddingProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.UserControl");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.UserControl");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: Control.BackgroundProperty.UserControl");
            retval = Control.BackgroundProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: Control.BorderBrushProperty.UserControl");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: Control.BorderThicknessProperty.UserControl");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: Control.FontSizeProperty.UserControl");
            retval = Control.FontSizeProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: Control.FontFamilyProperty.UserControl");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: Control.ForegroundProperty.UserControl");
            retval = Control.ForegroundProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: Control.FontWeightProperty.UserControl");
            retval = Control.FontWeightProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: Control.FontStyleProperty.UserControl");
            retval = Control.FontStyleProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: Control.FontStretchProperty.UserControl");
            retval = Control.FontStretchProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: Control.IsEnabledProperty.UserControl");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            UserControl widget = new UserControl ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: FrameworkElement.LanguageProperty.UserControl");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.UserControl");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.UserControl");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: FrameworkElement.WidthProperty.UserControl");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: FrameworkElement.HeightProperty.UserControl");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.UserControl");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.UserControl");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.UserControl");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.UserControl");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.UserControl");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.UserControl");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: FrameworkElement.MarginProperty.UserControl");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: FrameworkElement.StyleProperty.UserControl");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.UserControl");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: FrameworkElement.NameProperty.UserControl");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: FrameworkElement.TagProperty.UserControl");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: FrameworkElement.CursorProperty.UserControl");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: FrameworkElement.DataContextProperty.UserControl");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            UserControl widget = new UserControl ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: UIElement.AllowDropProperty.UserControl");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: UIElement.OpacityProperty.UserControl");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: UIElement.ClipProperty.UserControl");
            retval = UIElement.ClipProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: UIElement.RenderTransformProperty.UserControl");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: UIElement.EffectProperty.UserControl");
            retval = UIElement.EffectProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: UIElement.ProjectionProperty.UserControl");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: UIElement.OpacityMaskProperty.UserControl");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.UserControl");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.UserControl");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: UIElement.VisibilityProperty.UserControl");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.UserControl");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (UserControl)), "#metadata should not be null for: UIElement.CacheModeProperty.UserControl");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (UserControl)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_UserControl ()
        {
            UserControl widget = new UserControl ();

            Assert.IsNull(widget.Content, "Content should have returned null");
            Assert.AreEqual(false, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            UserControl widget = new UserControl ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class ButtonTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ButtonBase ()
        {
            Button widget = new Button ();
            object retval;

            retval = widget.ReadLocalValue(ButtonBase.ClickModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.ClickModeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.IsFocusedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsFocusedProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.IsMouseOverProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsMouseOverProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.IsPressedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsPressedProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.CommandProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.CommandProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.CommandParameterProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.CommandParameterProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ContentControl ()
        {
            Button widget = new Button ();
            object retval;

            retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ContentControl.ContentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            Button widget = new Button ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            Button widget = new Button ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            Button widget = new Button ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ButtonBase ()
        {
            Button widget = new Button ();
            object retval;

            Assert.IsNotNull(ButtonBase.ClickModeProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: ButtonBase.ClickModeProperty.Button");
            retval = ButtonBase.ClickModeProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.ClickModeProperty should be non-null value");
            Assert.IsInstanceOfType<ClickMode>(retval, "ButtonBase.ClickModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(ClickMode.Release, retval, "ButtonBase.ClickModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.ClickModeProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.ClickModeProperty) should not have returned null");
            Assert.IsInstanceOfType<ClickMode>(retval, "GetValue(ButtonBase.ClickModeProperty) is not of the correct type");
            Assert.AreEqual(ClickMode.Release, retval, "GetValue(ButtonBase.ClickModeProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.IsFocusedProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: ButtonBase.IsFocusedProperty.Button");
            retval = ButtonBase.IsFocusedProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.IsFocusedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ButtonBase.IsFocusedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ButtonBase.IsFocusedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.IsFocusedProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.IsFocusedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ButtonBase.IsFocusedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsFocusedProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.IsMouseOverProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: ButtonBase.IsMouseOverProperty.Button");
            retval = ButtonBase.IsMouseOverProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.IsMouseOverProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ButtonBase.IsMouseOverProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ButtonBase.IsMouseOverProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.IsMouseOverProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.IsMouseOverProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ButtonBase.IsMouseOverProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsMouseOverProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.IsPressedProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: ButtonBase.IsPressedProperty.Button");
            retval = ButtonBase.IsPressedProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.IsPressedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ButtonBase.IsPressedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ButtonBase.IsPressedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.IsPressedProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.IsPressedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ButtonBase.IsPressedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsPressedProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.CommandProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: ButtonBase.CommandProperty.Button");
            retval = ButtonBase.CommandProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ButtonBase.CommandProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ButtonBase.CommandProperty);
            Assert.IsNull(retval, "GetValue(ButtonBase.CommandProperty) should have returned null");
            Assert.IsNotNull(ButtonBase.CommandParameterProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: ButtonBase.CommandParameterProperty.Button");
            retval = ButtonBase.CommandParameterProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ButtonBase.CommandParameterProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ButtonBase.CommandParameterProperty);
            Assert.IsNull(retval, "GetValue(ButtonBase.CommandParameterProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_ContentControl ()
        {
            Button widget = new Button ();
            object retval;

            Assert.IsNotNull(ContentControl.ContentTemplateProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: ContentControl.ContentTemplateProperty.Button");
            retval = ContentControl.ContentTemplateProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentTemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentTemplateProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");
            Assert.IsNotNull(ContentControl.ContentProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: ContentControl.ContentProperty.Button");
            retval = ContentControl.ContentProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            Button widget = new Button ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: Control.IsTabStopProperty.Button");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: Control.TabIndexProperty.Button");
            retval = Control.TabIndexProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: Control.TemplateProperty.Button");
            retval = Control.TemplateProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: Control.TabNavigationProperty.Button");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: Control.PaddingProperty.Button");
            retval = Control.PaddingProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.Button");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.Button");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: Control.BackgroundProperty.Button");
            retval = Control.BackgroundProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: Control.BorderBrushProperty.Button");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: Control.BorderThicknessProperty.Button");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: Control.FontSizeProperty.Button");
            retval = Control.FontSizeProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: Control.FontFamilyProperty.Button");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: Control.ForegroundProperty.Button");
            retval = Control.ForegroundProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: Control.FontWeightProperty.Button");
            retval = Control.FontWeightProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: Control.FontStyleProperty.Button");
            retval = Control.FontStyleProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: Control.FontStretchProperty.Button");
            retval = Control.FontStretchProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: Control.IsEnabledProperty.Button");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            Button widget = new Button ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: FrameworkElement.LanguageProperty.Button");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.Button");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.Button");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: FrameworkElement.WidthProperty.Button");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: FrameworkElement.HeightProperty.Button");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.Button");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.Button");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.Button");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.Button");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.Button");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.Button");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: FrameworkElement.MarginProperty.Button");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: FrameworkElement.StyleProperty.Button");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.Button");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: FrameworkElement.NameProperty.Button");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: FrameworkElement.TagProperty.Button");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: FrameworkElement.CursorProperty.Button");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: FrameworkElement.DataContextProperty.Button");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            Button widget = new Button ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: UIElement.AllowDropProperty.Button");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: UIElement.OpacityProperty.Button");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: UIElement.ClipProperty.Button");
            retval = UIElement.ClipProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: UIElement.RenderTransformProperty.Button");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: UIElement.EffectProperty.Button");
            retval = UIElement.EffectProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: UIElement.ProjectionProperty.Button");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: UIElement.OpacityMaskProperty.Button");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.Button");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.Button");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: UIElement.VisibilityProperty.Button");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.Button");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (Button)), "#metadata should not be null for: UIElement.CacheModeProperty.Button");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (Button)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_Button ()
        {
            Button widget = new Button ();

            Assert.AreEqual(ClickMode.Release, widget.ClickMode, "ClickMode does not match the default value");
            Assert.AreEqual(false, widget.IsFocused, "IsFocused does not match the default value");
            Assert.AreEqual(false, widget.IsMouseOver, "IsMouseOver does not match the default value");
            Assert.AreEqual(false, widget.IsPressed, "IsPressed does not match the default value");
            Assert.IsNull(widget.Command, "Command should have returned null");
            Assert.IsNull(widget.CommandParameter, "CommandParameter should have returned null");
            Assert.IsNull(widget.Content, "Content should have returned null");
            Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            Button widget = new Button ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls.Primitives
{
    [TestClass]
    public partial class ToggleButtonTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ToggleButton ()
        {
            ToggleButton widget = new ToggleButton ();
            object retval;

            retval = widget.ReadLocalValue(ToggleButton.IsCheckedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToggleButton.IsCheckedProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ToggleButton.IsThreeStateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToggleButton.IsThreeStateProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ButtonBase ()
        {
            ToggleButton widget = new ToggleButton ();
            object retval;

            retval = widget.ReadLocalValue(ButtonBase.ClickModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.ClickModeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.IsFocusedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsFocusedProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.IsMouseOverProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsMouseOverProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.IsPressedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsPressedProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.CommandProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.CommandProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.CommandParameterProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.CommandParameterProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ContentControl ()
        {
            ToggleButton widget = new ToggleButton ();
            object retval;

            retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ContentControl.ContentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            ToggleButton widget = new ToggleButton ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            ToggleButton widget = new ToggleButton ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            ToggleButton widget = new ToggleButton ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ToggleButton ()
        {
            ToggleButton widget = new ToggleButton ();
            object retval;

            Assert.IsNotNull(ToggleButton.IsCheckedProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: ToggleButton.IsCheckedProperty.ToggleButton");
            retval = ToggleButton.IsCheckedProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ToggleButton.IsCheckedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ToggleButton.IsCheckedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ToggleButton.IsCheckedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ToggleButton.IsCheckedProperty);
            Assert.IsNotNull(retval, "GetValue(ToggleButton.IsCheckedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ToggleButton.IsCheckedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ToggleButton.IsCheckedProperty) does not match the default value");
            Assert.IsNotNull(ToggleButton.IsThreeStateProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: ToggleButton.IsThreeStateProperty.ToggleButton");
            retval = ToggleButton.IsThreeStateProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ToggleButton.IsThreeStateProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ToggleButton.IsThreeStateProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ToggleButton.IsThreeStateProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ToggleButton.IsThreeStateProperty);
            Assert.IsNotNull(retval, "GetValue(ToggleButton.IsThreeStateProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ToggleButton.IsThreeStateProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ToggleButton.IsThreeStateProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_ButtonBase ()
        {
            ToggleButton widget = new ToggleButton ();
            object retval;

            Assert.IsNotNull(ButtonBase.ClickModeProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: ButtonBase.ClickModeProperty.ToggleButton");
            retval = ButtonBase.ClickModeProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.ClickModeProperty should be non-null value");
            Assert.IsInstanceOfType<ClickMode>(retval, "ButtonBase.ClickModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(ClickMode.Release, retval, "ButtonBase.ClickModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.ClickModeProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.ClickModeProperty) should not have returned null");
            Assert.IsInstanceOfType<ClickMode>(retval, "GetValue(ButtonBase.ClickModeProperty) is not of the correct type");
            Assert.AreEqual(ClickMode.Release, retval, "GetValue(ButtonBase.ClickModeProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.IsFocusedProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: ButtonBase.IsFocusedProperty.ToggleButton");
            retval = ButtonBase.IsFocusedProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.IsFocusedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ButtonBase.IsFocusedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ButtonBase.IsFocusedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.IsFocusedProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.IsFocusedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ButtonBase.IsFocusedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsFocusedProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.IsMouseOverProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: ButtonBase.IsMouseOverProperty.ToggleButton");
            retval = ButtonBase.IsMouseOverProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.IsMouseOverProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ButtonBase.IsMouseOverProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ButtonBase.IsMouseOverProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.IsMouseOverProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.IsMouseOverProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ButtonBase.IsMouseOverProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsMouseOverProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.IsPressedProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: ButtonBase.IsPressedProperty.ToggleButton");
            retval = ButtonBase.IsPressedProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.IsPressedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ButtonBase.IsPressedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ButtonBase.IsPressedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.IsPressedProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.IsPressedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ButtonBase.IsPressedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsPressedProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.CommandProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: ButtonBase.CommandProperty.ToggleButton");
            retval = ButtonBase.CommandProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ButtonBase.CommandProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ButtonBase.CommandProperty);
            Assert.IsNull(retval, "GetValue(ButtonBase.CommandProperty) should have returned null");
            Assert.IsNotNull(ButtonBase.CommandParameterProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: ButtonBase.CommandParameterProperty.ToggleButton");
            retval = ButtonBase.CommandParameterProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ButtonBase.CommandParameterProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ButtonBase.CommandParameterProperty);
            Assert.IsNull(retval, "GetValue(ButtonBase.CommandParameterProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_ContentControl ()
        {
            ToggleButton widget = new ToggleButton ();
            object retval;

            Assert.IsNotNull(ContentControl.ContentTemplateProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: ContentControl.ContentTemplateProperty.ToggleButton");
            retval = ContentControl.ContentTemplateProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentTemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentTemplateProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");
            Assert.IsNotNull(ContentControl.ContentProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: ContentControl.ContentProperty.ToggleButton");
            retval = ContentControl.ContentProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            ToggleButton widget = new ToggleButton ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: Control.IsTabStopProperty.ToggleButton");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: Control.TabIndexProperty.ToggleButton");
            retval = Control.TabIndexProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: Control.TemplateProperty.ToggleButton");
            retval = Control.TemplateProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: Control.TabNavigationProperty.ToggleButton");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: Control.PaddingProperty.ToggleButton");
            retval = Control.PaddingProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.ToggleButton");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.ToggleButton");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: Control.BackgroundProperty.ToggleButton");
            retval = Control.BackgroundProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: Control.BorderBrushProperty.ToggleButton");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: Control.BorderThicknessProperty.ToggleButton");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: Control.FontSizeProperty.ToggleButton");
            retval = Control.FontSizeProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: Control.FontFamilyProperty.ToggleButton");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: Control.ForegroundProperty.ToggleButton");
            retval = Control.ForegroundProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: Control.FontWeightProperty.ToggleButton");
            retval = Control.FontWeightProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: Control.FontStyleProperty.ToggleButton");
            retval = Control.FontStyleProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: Control.FontStretchProperty.ToggleButton");
            retval = Control.FontStretchProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: Control.IsEnabledProperty.ToggleButton");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            ToggleButton widget = new ToggleButton ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: FrameworkElement.LanguageProperty.ToggleButton");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.ToggleButton");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.ToggleButton");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: FrameworkElement.WidthProperty.ToggleButton");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: FrameworkElement.HeightProperty.ToggleButton");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.ToggleButton");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.ToggleButton");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.ToggleButton");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.ToggleButton");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.ToggleButton");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.ToggleButton");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: FrameworkElement.MarginProperty.ToggleButton");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: FrameworkElement.StyleProperty.ToggleButton");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.ToggleButton");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: FrameworkElement.NameProperty.ToggleButton");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: FrameworkElement.TagProperty.ToggleButton");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: FrameworkElement.CursorProperty.ToggleButton");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: FrameworkElement.DataContextProperty.ToggleButton");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            ToggleButton widget = new ToggleButton ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: UIElement.AllowDropProperty.ToggleButton");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: UIElement.OpacityProperty.ToggleButton");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: UIElement.ClipProperty.ToggleButton");
            retval = UIElement.ClipProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: UIElement.RenderTransformProperty.ToggleButton");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: UIElement.EffectProperty.ToggleButton");
            retval = UIElement.EffectProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: UIElement.ProjectionProperty.ToggleButton");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: UIElement.OpacityMaskProperty.ToggleButton");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.ToggleButton");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.ToggleButton");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: UIElement.VisibilityProperty.ToggleButton");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.ToggleButton");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (ToggleButton)), "#metadata should not be null for: UIElement.CacheModeProperty.ToggleButton");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (ToggleButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_ToggleButton ()
        {
            ToggleButton widget = new ToggleButton ();

            Assert.AreEqual(false, widget.IsChecked, "IsChecked does not match the default value");
            Assert.AreEqual(false, widget.IsThreeState, "IsThreeState does not match the default value");
            Assert.AreEqual(ClickMode.Release, widget.ClickMode, "ClickMode does not match the default value");
            Assert.AreEqual(false, widget.IsFocused, "IsFocused does not match the default value");
            Assert.AreEqual(false, widget.IsMouseOver, "IsMouseOver does not match the default value");
            Assert.AreEqual(false, widget.IsPressed, "IsPressed does not match the default value");
            Assert.IsNull(widget.Command, "Command should have returned null");
            Assert.IsNull(widget.CommandParameter, "CommandParameter should have returned null");
            Assert.IsNull(widget.Content, "Content should have returned null");
            Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            ToggleButton widget = new ToggleButton ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class CheckBoxTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ToggleButton ()
        {
            CheckBox widget = new CheckBox ();
            object retval;

            retval = widget.ReadLocalValue(ToggleButton.IsCheckedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToggleButton.IsCheckedProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ToggleButton.IsThreeStateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToggleButton.IsThreeStateProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ButtonBase ()
        {
            CheckBox widget = new CheckBox ();
            object retval;

            retval = widget.ReadLocalValue(ButtonBase.ClickModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.ClickModeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.IsFocusedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsFocusedProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.IsMouseOverProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsMouseOverProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.IsPressedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsPressedProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.CommandProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.CommandProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.CommandParameterProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.CommandParameterProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ContentControl ()
        {
            CheckBox widget = new CheckBox ();
            object retval;

            retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ContentControl.ContentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            CheckBox widget = new CheckBox ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            CheckBox widget = new CheckBox ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            CheckBox widget = new CheckBox ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ToggleButton ()
        {
            CheckBox widget = new CheckBox ();
            object retval;

            Assert.IsNotNull(ToggleButton.IsCheckedProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: ToggleButton.IsCheckedProperty.CheckBox");
            retval = ToggleButton.IsCheckedProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ToggleButton.IsCheckedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ToggleButton.IsCheckedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ToggleButton.IsCheckedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ToggleButton.IsCheckedProperty);
            Assert.IsNotNull(retval, "GetValue(ToggleButton.IsCheckedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ToggleButton.IsCheckedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ToggleButton.IsCheckedProperty) does not match the default value");
            Assert.IsNotNull(ToggleButton.IsThreeStateProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: ToggleButton.IsThreeStateProperty.CheckBox");
            retval = ToggleButton.IsThreeStateProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ToggleButton.IsThreeStateProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ToggleButton.IsThreeStateProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ToggleButton.IsThreeStateProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ToggleButton.IsThreeStateProperty);
            Assert.IsNotNull(retval, "GetValue(ToggleButton.IsThreeStateProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ToggleButton.IsThreeStateProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ToggleButton.IsThreeStateProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_ButtonBase ()
        {
            CheckBox widget = new CheckBox ();
            object retval;

            Assert.IsNotNull(ButtonBase.ClickModeProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: ButtonBase.ClickModeProperty.CheckBox");
            retval = ButtonBase.ClickModeProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.ClickModeProperty should be non-null value");
            Assert.IsInstanceOfType<ClickMode>(retval, "ButtonBase.ClickModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(ClickMode.Release, retval, "ButtonBase.ClickModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.ClickModeProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.ClickModeProperty) should not have returned null");
            Assert.IsInstanceOfType<ClickMode>(retval, "GetValue(ButtonBase.ClickModeProperty) is not of the correct type");
            Assert.AreEqual(ClickMode.Release, retval, "GetValue(ButtonBase.ClickModeProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.IsFocusedProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: ButtonBase.IsFocusedProperty.CheckBox");
            retval = ButtonBase.IsFocusedProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.IsFocusedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ButtonBase.IsFocusedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ButtonBase.IsFocusedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.IsFocusedProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.IsFocusedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ButtonBase.IsFocusedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsFocusedProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.IsMouseOverProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: ButtonBase.IsMouseOverProperty.CheckBox");
            retval = ButtonBase.IsMouseOverProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.IsMouseOverProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ButtonBase.IsMouseOverProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ButtonBase.IsMouseOverProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.IsMouseOverProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.IsMouseOverProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ButtonBase.IsMouseOverProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsMouseOverProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.IsPressedProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: ButtonBase.IsPressedProperty.CheckBox");
            retval = ButtonBase.IsPressedProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.IsPressedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ButtonBase.IsPressedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ButtonBase.IsPressedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.IsPressedProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.IsPressedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ButtonBase.IsPressedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsPressedProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.CommandProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: ButtonBase.CommandProperty.CheckBox");
            retval = ButtonBase.CommandProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ButtonBase.CommandProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ButtonBase.CommandProperty);
            Assert.IsNull(retval, "GetValue(ButtonBase.CommandProperty) should have returned null");
            Assert.IsNotNull(ButtonBase.CommandParameterProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: ButtonBase.CommandParameterProperty.CheckBox");
            retval = ButtonBase.CommandParameterProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ButtonBase.CommandParameterProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ButtonBase.CommandParameterProperty);
            Assert.IsNull(retval, "GetValue(ButtonBase.CommandParameterProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_ContentControl ()
        {
            CheckBox widget = new CheckBox ();
            object retval;

            Assert.IsNotNull(ContentControl.ContentTemplateProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: ContentControl.ContentTemplateProperty.CheckBox");
            retval = ContentControl.ContentTemplateProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentTemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentTemplateProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");
            Assert.IsNotNull(ContentControl.ContentProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: ContentControl.ContentProperty.CheckBox");
            retval = ContentControl.ContentProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            CheckBox widget = new CheckBox ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: Control.IsTabStopProperty.CheckBox");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: Control.TabIndexProperty.CheckBox");
            retval = Control.TabIndexProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: Control.TemplateProperty.CheckBox");
            retval = Control.TemplateProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: Control.TabNavigationProperty.CheckBox");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: Control.PaddingProperty.CheckBox");
            retval = Control.PaddingProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.CheckBox");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.CheckBox");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: Control.BackgroundProperty.CheckBox");
            retval = Control.BackgroundProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: Control.BorderBrushProperty.CheckBox");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: Control.BorderThicknessProperty.CheckBox");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: Control.FontSizeProperty.CheckBox");
            retval = Control.FontSizeProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: Control.FontFamilyProperty.CheckBox");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: Control.ForegroundProperty.CheckBox");
            retval = Control.ForegroundProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: Control.FontWeightProperty.CheckBox");
            retval = Control.FontWeightProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: Control.FontStyleProperty.CheckBox");
            retval = Control.FontStyleProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: Control.FontStretchProperty.CheckBox");
            retval = Control.FontStretchProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: Control.IsEnabledProperty.CheckBox");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            CheckBox widget = new CheckBox ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: FrameworkElement.LanguageProperty.CheckBox");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.CheckBox");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.CheckBox");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: FrameworkElement.WidthProperty.CheckBox");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: FrameworkElement.HeightProperty.CheckBox");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.CheckBox");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.CheckBox");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.CheckBox");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.CheckBox");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.CheckBox");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.CheckBox");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: FrameworkElement.MarginProperty.CheckBox");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: FrameworkElement.StyleProperty.CheckBox");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.CheckBox");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: FrameworkElement.NameProperty.CheckBox");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: FrameworkElement.TagProperty.CheckBox");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: FrameworkElement.CursorProperty.CheckBox");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: FrameworkElement.DataContextProperty.CheckBox");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            CheckBox widget = new CheckBox ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: UIElement.AllowDropProperty.CheckBox");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: UIElement.OpacityProperty.CheckBox");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: UIElement.ClipProperty.CheckBox");
            retval = UIElement.ClipProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: UIElement.RenderTransformProperty.CheckBox");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: UIElement.EffectProperty.CheckBox");
            retval = UIElement.EffectProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: UIElement.ProjectionProperty.CheckBox");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: UIElement.OpacityMaskProperty.CheckBox");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.CheckBox");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.CheckBox");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: UIElement.VisibilityProperty.CheckBox");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.CheckBox");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (CheckBox)), "#metadata should not be null for: UIElement.CacheModeProperty.CheckBox");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (CheckBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_CheckBox ()
        {
            CheckBox widget = new CheckBox ();

            Assert.AreEqual(false, widget.IsChecked, "IsChecked does not match the default value");
            Assert.AreEqual(false, widget.IsThreeState, "IsThreeState does not match the default value");
            Assert.AreEqual(ClickMode.Release, widget.ClickMode, "ClickMode does not match the default value");
            Assert.AreEqual(false, widget.IsFocused, "IsFocused does not match the default value");
            Assert.AreEqual(false, widget.IsMouseOver, "IsMouseOver does not match the default value");
            Assert.AreEqual(false, widget.IsPressed, "IsPressed does not match the default value");
            Assert.IsNull(widget.Command, "Command should have returned null");
            Assert.IsNull(widget.CommandParameter, "CommandParameter should have returned null");
            Assert.IsNull(widget.Content, "Content should have returned null");
            Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            CheckBox widget = new CheckBox ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class ComboBoxTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ComboBox ()
        {
            ComboBox widget = new ComboBox ();
            object retval;

            retval = widget.ReadLocalValue(ComboBox.IsDropDownOpenProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ComboBox.IsDropDownOpenProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ComboBox.IsSelectionActiveProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ComboBox.IsSelectionActiveProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ComboBox.ItemContainerStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ComboBox.ItemContainerStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ComboBox.MaxDropDownHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ComboBox.MaxDropDownHeightProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Selector ()
        {
            ComboBox widget = new ComboBox ();
            object retval;

            retval = widget.ReadLocalValue(Selector.SelectedIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Selector.SelectedIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Selector.SelectedValueProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Selector.SelectedValueProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Selector.SelectedValuePathProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Selector.SelectedValuePathProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Selector.SelectedItemProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Selector.SelectedItemProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Selector.IsSynchronizedWithCurrentItemProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Selector.IsSynchronizedWithCurrentItemProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ItemsControl ()
        {
            ComboBox widget = new ComboBox ();
            object retval;

            retval = widget.ReadLocalValue(ItemsControl.ItemTemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.ItemTemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ItemsControl.ItemsPanelProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.ItemsPanelProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ItemsControl.DisplayMemberPathProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.DisplayMemberPathProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ItemsControl.ItemsSourceProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.ItemsSourceProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            ComboBox widget = new ComboBox ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            ComboBox widget = new ComboBox ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            ComboBox widget = new ComboBox ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ComboBox ()
        {
            ComboBox widget = new ComboBox ();
            object retval;

            Assert.IsNotNull(ComboBox.IsDropDownOpenProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: ComboBox.IsDropDownOpenProperty.ComboBox");
            retval = ComboBox.IsDropDownOpenProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ComboBox.IsDropDownOpenProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ComboBox.IsDropDownOpenProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ComboBox.IsDropDownOpenProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ComboBox.IsDropDownOpenProperty);
            Assert.IsNotNull(retval, "GetValue(ComboBox.IsDropDownOpenProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ComboBox.IsDropDownOpenProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ComboBox.IsDropDownOpenProperty) does not match the default value");
            Assert.IsNotNull(ComboBox.IsSelectionActiveProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: ComboBox.IsSelectionActiveProperty.ComboBox");
            retval = ComboBox.IsSelectionActiveProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ComboBox.IsSelectionActiveProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ComboBox.IsSelectionActiveProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ComboBox.IsSelectionActiveProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ComboBox.IsSelectionActiveProperty);
            Assert.IsNotNull(retval, "GetValue(ComboBox.IsSelectionActiveProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ComboBox.IsSelectionActiveProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ComboBox.IsSelectionActiveProperty) does not match the default value");
            Assert.IsNotNull(ComboBox.ItemContainerStyleProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: ComboBox.ItemContainerStyleProperty.ComboBox");
            retval = ComboBox.ItemContainerStyleProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ComboBox.ItemContainerStyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ComboBox.ItemContainerStyleProperty);
            Assert.IsNull(retval, "GetValue(ComboBox.ItemContainerStyleProperty) should have returned null");
            Assert.IsNotNull(ComboBox.MaxDropDownHeightProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: ComboBox.MaxDropDownHeightProperty.ComboBox");
            retval = ComboBox.MaxDropDownHeightProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ComboBox.MaxDropDownHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ComboBox.MaxDropDownHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "ComboBox.MaxDropDownHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ComboBox.MaxDropDownHeightProperty);
            Assert.IsNotNull(retval, "GetValue(ComboBox.MaxDropDownHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ComboBox.MaxDropDownHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(ComboBox.MaxDropDownHeightProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Selector ()
        {
            ComboBox widget = new ComboBox ();
            object retval;

            Assert.IsNotNull(Selector.SelectedIndexProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Selector.SelectedIndexProperty.ComboBox");
            retval = Selector.SelectedIndexProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Selector.SelectedIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Selector.SelectedIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(-1, retval, "Selector.SelectedIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Selector.SelectedIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Selector.SelectedIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Selector.SelectedIndexProperty) is not of the correct type");
            Assert.AreEqual(-1, retval, "GetValue(Selector.SelectedIndexProperty) does not match the default value");
            Assert.IsNotNull(Selector.SelectedValueProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Selector.SelectedValueProperty.ComboBox");
            retval = Selector.SelectedValueProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Selector.SelectedValueProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Selector.SelectedValueProperty);
            Assert.IsNull(retval, "GetValue(Selector.SelectedValueProperty) should have returned null");
            Assert.IsNotNull(Selector.SelectedValuePathProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Selector.SelectedValuePathProperty.ComboBox");
            retval = Selector.SelectedValuePathProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Selector.SelectedValuePathProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "Selector.SelectedValuePathProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "Selector.SelectedValuePathProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Selector.SelectedValuePathProperty);
            Assert.IsNotNull(retval, "GetValue(Selector.SelectedValuePathProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(Selector.SelectedValuePathProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(Selector.SelectedValuePathProperty) does not match the default value");
            Assert.IsNotNull(Selector.SelectedItemProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Selector.SelectedItemProperty.ComboBox");
            retval = Selector.SelectedItemProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Selector.SelectedItemProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Selector.SelectedItemProperty);
            Assert.IsNull(retval, "GetValue(Selector.SelectedItemProperty) should have returned null");
            Assert.IsNotNull(Selector.IsSynchronizedWithCurrentItemProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Selector.IsSynchronizedWithCurrentItemProperty.ComboBox");
            retval = Selector.IsSynchronizedWithCurrentItemProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Selector.IsSynchronizedWithCurrentItemProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Selector.IsSynchronizedWithCurrentItemProperty);
            Assert.IsNull(retval, "GetValue(Selector.IsSynchronizedWithCurrentItemProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_ItemsControl ()
        {
            ComboBox widget = new ComboBox ();
            object retval;

            Assert.IsNotNull(ItemsControl.ItemTemplateProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: ItemsControl.ItemTemplateProperty.ComboBox");
            retval = ItemsControl.ItemTemplateProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ItemsControl.ItemTemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ItemsControl.ItemTemplateProperty);
            Assert.IsNull(retval, "GetValue(ItemsControl.ItemTemplateProperty) should have returned null");
            Assert.IsNotNull(ItemsControl.ItemsPanelProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: ItemsControl.ItemsPanelProperty.ComboBox");
            retval = ItemsControl.ItemsPanelProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ItemsControl.ItemsPanelProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ItemsControl.ItemsPanelProperty);
            Assert.IsNull(retval, "GetValue(ItemsControl.ItemsPanelProperty) should have returned null");
            Assert.IsNotNull(ItemsControl.DisplayMemberPathProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: ItemsControl.DisplayMemberPathProperty.ComboBox");
            retval = ItemsControl.DisplayMemberPathProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ItemsControl.DisplayMemberPathProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ItemsControl.DisplayMemberPathProperty);
            Assert.IsNull(retval, "GetValue(ItemsControl.DisplayMemberPathProperty) should have returned null");
            Assert.IsNotNull(ItemsControl.ItemsSourceProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: ItemsControl.ItemsSourceProperty.ComboBox");
            retval = ItemsControl.ItemsSourceProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ItemsControl.ItemsSourceProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ItemsControl.ItemsSourceProperty);
            Assert.IsNull(retval, "GetValue(ItemsControl.ItemsSourceProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            ComboBox widget = new ComboBox ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Control.IsTabStopProperty.ComboBox");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Control.TabIndexProperty.ComboBox");
            retval = Control.TabIndexProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Control.TemplateProperty.ComboBox");
            retval = Control.TemplateProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Control.TabNavigationProperty.ComboBox");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Control.PaddingProperty.ComboBox");
            retval = Control.PaddingProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.ComboBox");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.ComboBox");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Control.BackgroundProperty.ComboBox");
            retval = Control.BackgroundProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Control.BorderBrushProperty.ComboBox");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Control.BorderThicknessProperty.ComboBox");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Control.FontSizeProperty.ComboBox");
            retval = Control.FontSizeProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Control.FontFamilyProperty.ComboBox");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Control.ForegroundProperty.ComboBox");
            retval = Control.ForegroundProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Control.FontWeightProperty.ComboBox");
            retval = Control.FontWeightProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Control.FontStyleProperty.ComboBox");
            retval = Control.FontStyleProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Control.FontStretchProperty.ComboBox");
            retval = Control.FontStretchProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: Control.IsEnabledProperty.ComboBox");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            ComboBox widget = new ComboBox ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: FrameworkElement.LanguageProperty.ComboBox");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.ComboBox");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.ComboBox");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: FrameworkElement.WidthProperty.ComboBox");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: FrameworkElement.HeightProperty.ComboBox");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.ComboBox");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.ComboBox");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.ComboBox");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.ComboBox");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.ComboBox");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.ComboBox");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: FrameworkElement.MarginProperty.ComboBox");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: FrameworkElement.StyleProperty.ComboBox");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.ComboBox");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: FrameworkElement.NameProperty.ComboBox");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: FrameworkElement.TagProperty.ComboBox");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: FrameworkElement.CursorProperty.ComboBox");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: FrameworkElement.DataContextProperty.ComboBox");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            ComboBox widget = new ComboBox ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: UIElement.AllowDropProperty.ComboBox");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: UIElement.OpacityProperty.ComboBox");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: UIElement.ClipProperty.ComboBox");
            retval = UIElement.ClipProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: UIElement.RenderTransformProperty.ComboBox");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: UIElement.EffectProperty.ComboBox");
            retval = UIElement.EffectProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: UIElement.ProjectionProperty.ComboBox");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: UIElement.OpacityMaskProperty.ComboBox");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.ComboBox");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.ComboBox");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: UIElement.VisibilityProperty.ComboBox");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.ComboBox");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (ComboBox)), "#metadata should not be null for: UIElement.CacheModeProperty.ComboBox");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (ComboBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_ComboBox ()
        {
            ComboBox widget = new ComboBox ();

            Assert.AreEqual(false, widget.IsEditable, "IsEditable does not match the default value");
            Assert.AreEqual(false, widget.IsDropDownOpen, "IsDropDownOpen does not match the default value");
            Assert.AreEqual(false, widget.IsSelectionBoxHighlighted, "IsSelectionBoxHighlighted does not match the default value");
            Assert.IsNull(widget.ItemContainerStyle, "ItemContainerStyle should have returned null");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxDropDownHeight), "MaxDropDownHeight does not match the default value");
            Assert.IsNull(widget.SelectionBoxItem, "SelectionBoxItem should have returned null");
            Assert.IsNull(widget.SelectionBoxItemTemplate, "SelectionBoxItemTemplate should have returned null");
            Assert.AreEqual(-1, widget.SelectedIndex, "SelectedIndex does not match the default value");
            Assert.IsNull(widget.SelectedValue, "SelectedValue should have returned null");
            Assert.IsNotNull(widget.SelectedValuePath, "SelectedValuePath should not have returned null");
            Assert.AreEqual("", widget.SelectedValuePath, "SelectedValuePath does not match the default value");
            Assert.IsNull(widget.SelectedItem, "SelectedItem should have returned null");
            Assert.IsNull(widget.IsSynchronizedWithCurrentItem, "IsSynchronizedWithCurrentItem should have returned null");
            Assert.IsNotNull(widget.Items, "Items should not have returned null");
            Assert.IsInstanceOfType<ItemCollection>(widget.Items, "Items is not of the correct type");
            Assert.IsNull(widget.ItemTemplate, "ItemTemplate should have returned null");
            Assert.IsNull(widget.ItemsPanel, "ItemsPanel should have returned null");
            Assert.IsNull(widget.DisplayMemberPath, "DisplayMemberPath should have returned null");
            Assert.IsNull(widget.ItemsSource, "ItemsSource should have returned null");
            Assert.IsNotNull(widget.ItemContainerGenerator, "ItemContainerGenerator should not have returned null");
            Assert.AreEqual("System.Windows.Controls.ItemContainerGenerator", widget.ItemContainerGenerator.ToString (), "ItemContainerGenerator does not match the default value");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        public void Test_SetStringValue_Selector ()
        {
            ComboBox widget = new ComboBox ();
            object retval;

            widget.SetValue(Selector.SelectedValuePathProperty, "some text");
            retval = widget.GetValue(Selector.SelectedValuePathProperty);
            Assert.AreEqual("some text", retval, "GetValue(Selector.SelectedValuePathProperty) should have returned 'some text'");
            widget.SetValue(Selector.SelectedValuePathProperty, null);
            retval = widget.GetValue(Selector.SelectedValuePathProperty);
            Assert.IsNull(retval, "GetValue(Selector.SelectedValuePathProperty) should have returned null");
        }

        [TestMethod]
        public void Test_SetStringValue_ItemsControl ()
        {
            ComboBox widget = new ComboBox ();
            object retval;

            widget.SetValue(ItemsControl.DisplayMemberPathProperty, "some text");
            retval = widget.GetValue(ItemsControl.DisplayMemberPathProperty);
            Assert.AreEqual("some text", retval, "GetValue(ItemsControl.DisplayMemberPathProperty) should have returned 'some text'");
            widget.SetValue(ItemsControl.DisplayMemberPathProperty, null);
            retval = widget.GetValue(ItemsControl.DisplayMemberPathProperty);
            Assert.IsNull(retval, "GetValue(ItemsControl.DisplayMemberPathProperty) should have returned null");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            ComboBox widget = new ComboBox ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class ListBoxItemTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ListBoxItem ()
        {
            ListBoxItem widget = new ListBoxItem ();
            object retval;

            retval = widget.ReadLocalValue(ListBoxItem.IsSelectedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ListBoxItem.IsSelectedProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ContentControl ()
        {
            ListBoxItem widget = new ListBoxItem ();
            object retval;

            retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ContentControl.ContentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            ListBoxItem widget = new ListBoxItem ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            ListBoxItem widget = new ListBoxItem ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            ListBoxItem widget = new ListBoxItem ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ListBoxItem ()
        {
            ListBoxItem widget = new ListBoxItem ();
            object retval;

            Assert.IsNotNull(ListBoxItem.IsSelectedProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: ListBoxItem.IsSelectedProperty.ListBoxItem");
            retval = ListBoxItem.IsSelectedProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ListBoxItem.IsSelectedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ListBoxItem.IsSelectedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ListBoxItem.IsSelectedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ListBoxItem.IsSelectedProperty);
            Assert.IsNotNull(retval, "GetValue(ListBoxItem.IsSelectedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ListBoxItem.IsSelectedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ListBoxItem.IsSelectedProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_ContentControl ()
        {
            ListBoxItem widget = new ListBoxItem ();
            object retval;

            Assert.IsNotNull(ContentControl.ContentTemplateProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: ContentControl.ContentTemplateProperty.ListBoxItem");
            retval = ContentControl.ContentTemplateProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentTemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentTemplateProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");
            Assert.IsNotNull(ContentControl.ContentProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: ContentControl.ContentProperty.ListBoxItem");
            retval = ContentControl.ContentProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            ListBoxItem widget = new ListBoxItem ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: Control.IsTabStopProperty.ListBoxItem");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: Control.TabIndexProperty.ListBoxItem");
            retval = Control.TabIndexProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: Control.TemplateProperty.ListBoxItem");
            retval = Control.TemplateProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: Control.TabNavigationProperty.ListBoxItem");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: Control.PaddingProperty.ListBoxItem");
            retval = Control.PaddingProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.ListBoxItem");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.ListBoxItem");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: Control.BackgroundProperty.ListBoxItem");
            retval = Control.BackgroundProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: Control.BorderBrushProperty.ListBoxItem");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: Control.BorderThicknessProperty.ListBoxItem");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: Control.FontSizeProperty.ListBoxItem");
            retval = Control.FontSizeProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: Control.FontFamilyProperty.ListBoxItem");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: Control.ForegroundProperty.ListBoxItem");
            retval = Control.ForegroundProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: Control.FontWeightProperty.ListBoxItem");
            retval = Control.FontWeightProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: Control.FontStyleProperty.ListBoxItem");
            retval = Control.FontStyleProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: Control.FontStretchProperty.ListBoxItem");
            retval = Control.FontStretchProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: Control.IsEnabledProperty.ListBoxItem");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            ListBoxItem widget = new ListBoxItem ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: FrameworkElement.LanguageProperty.ListBoxItem");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.ListBoxItem");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.ListBoxItem");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: FrameworkElement.WidthProperty.ListBoxItem");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: FrameworkElement.HeightProperty.ListBoxItem");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.ListBoxItem");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.ListBoxItem");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.ListBoxItem");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.ListBoxItem");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.ListBoxItem");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.ListBoxItem");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: FrameworkElement.MarginProperty.ListBoxItem");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: FrameworkElement.StyleProperty.ListBoxItem");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.ListBoxItem");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: FrameworkElement.NameProperty.ListBoxItem");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: FrameworkElement.TagProperty.ListBoxItem");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: FrameworkElement.CursorProperty.ListBoxItem");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: FrameworkElement.DataContextProperty.ListBoxItem");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            ListBoxItem widget = new ListBoxItem ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: UIElement.AllowDropProperty.ListBoxItem");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: UIElement.OpacityProperty.ListBoxItem");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: UIElement.ClipProperty.ListBoxItem");
            retval = UIElement.ClipProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: UIElement.RenderTransformProperty.ListBoxItem");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: UIElement.EffectProperty.ListBoxItem");
            retval = UIElement.EffectProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: UIElement.ProjectionProperty.ListBoxItem");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: UIElement.OpacityMaskProperty.ListBoxItem");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.ListBoxItem");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.ListBoxItem");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: UIElement.VisibilityProperty.ListBoxItem");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.ListBoxItem");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (ListBoxItem)), "#metadata should not be null for: UIElement.CacheModeProperty.ListBoxItem");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (ListBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_ListBoxItem ()
        {
            ListBoxItem widget = new ListBoxItem ();

            Assert.AreEqual(false, widget.IsSelected, "IsSelected does not match the default value");
            Assert.IsNull(widget.Content, "Content should have returned null");
            Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            ListBoxItem widget = new ListBoxItem ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class ComboBoxItemTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ListBoxItem ()
        {
            ComboBoxItem widget = new ComboBoxItem ();
            object retval;

            retval = widget.ReadLocalValue(ListBoxItem.IsSelectedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ListBoxItem.IsSelectedProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ContentControl ()
        {
            ComboBoxItem widget = new ComboBoxItem ();
            object retval;

            retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ContentControl.ContentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            ComboBoxItem widget = new ComboBoxItem ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            ComboBoxItem widget = new ComboBoxItem ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            ComboBoxItem widget = new ComboBoxItem ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ListBoxItem ()
        {
            ComboBoxItem widget = new ComboBoxItem ();
            object retval;

            Assert.IsNotNull(ListBoxItem.IsSelectedProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: ListBoxItem.IsSelectedProperty.ComboBoxItem");
            retval = ListBoxItem.IsSelectedProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ListBoxItem.IsSelectedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ListBoxItem.IsSelectedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ListBoxItem.IsSelectedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ListBoxItem.IsSelectedProperty);
            Assert.IsNotNull(retval, "GetValue(ListBoxItem.IsSelectedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ListBoxItem.IsSelectedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ListBoxItem.IsSelectedProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_ContentControl ()
        {
            ComboBoxItem widget = new ComboBoxItem ();
            object retval;

            Assert.IsNotNull(ContentControl.ContentTemplateProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: ContentControl.ContentTemplateProperty.ComboBoxItem");
            retval = ContentControl.ContentTemplateProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentTemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentTemplateProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");
            Assert.IsNotNull(ContentControl.ContentProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: ContentControl.ContentProperty.ComboBoxItem");
            retval = ContentControl.ContentProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            ComboBoxItem widget = new ComboBoxItem ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: Control.IsTabStopProperty.ComboBoxItem");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: Control.TabIndexProperty.ComboBoxItem");
            retval = Control.TabIndexProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: Control.TemplateProperty.ComboBoxItem");
            retval = Control.TemplateProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: Control.TabNavigationProperty.ComboBoxItem");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: Control.PaddingProperty.ComboBoxItem");
            retval = Control.PaddingProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.ComboBoxItem");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.ComboBoxItem");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: Control.BackgroundProperty.ComboBoxItem");
            retval = Control.BackgroundProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: Control.BorderBrushProperty.ComboBoxItem");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: Control.BorderThicknessProperty.ComboBoxItem");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: Control.FontSizeProperty.ComboBoxItem");
            retval = Control.FontSizeProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: Control.FontFamilyProperty.ComboBoxItem");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: Control.ForegroundProperty.ComboBoxItem");
            retval = Control.ForegroundProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: Control.FontWeightProperty.ComboBoxItem");
            retval = Control.FontWeightProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: Control.FontStyleProperty.ComboBoxItem");
            retval = Control.FontStyleProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: Control.FontStretchProperty.ComboBoxItem");
            retval = Control.FontStretchProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: Control.IsEnabledProperty.ComboBoxItem");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            ComboBoxItem widget = new ComboBoxItem ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: FrameworkElement.LanguageProperty.ComboBoxItem");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.ComboBoxItem");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.ComboBoxItem");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: FrameworkElement.WidthProperty.ComboBoxItem");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: FrameworkElement.HeightProperty.ComboBoxItem");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.ComboBoxItem");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.ComboBoxItem");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.ComboBoxItem");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.ComboBoxItem");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.ComboBoxItem");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.ComboBoxItem");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: FrameworkElement.MarginProperty.ComboBoxItem");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: FrameworkElement.StyleProperty.ComboBoxItem");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.ComboBoxItem");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: FrameworkElement.NameProperty.ComboBoxItem");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: FrameworkElement.TagProperty.ComboBoxItem");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: FrameworkElement.CursorProperty.ComboBoxItem");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: FrameworkElement.DataContextProperty.ComboBoxItem");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            ComboBoxItem widget = new ComboBoxItem ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: UIElement.AllowDropProperty.ComboBoxItem");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: UIElement.OpacityProperty.ComboBoxItem");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: UIElement.ClipProperty.ComboBoxItem");
            retval = UIElement.ClipProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: UIElement.RenderTransformProperty.ComboBoxItem");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: UIElement.EffectProperty.ComboBoxItem");
            retval = UIElement.EffectProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: UIElement.ProjectionProperty.ComboBoxItem");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: UIElement.OpacityMaskProperty.ComboBoxItem");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.ComboBoxItem");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.ComboBoxItem");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: UIElement.VisibilityProperty.ComboBoxItem");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.ComboBoxItem");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (ComboBoxItem)), "#metadata should not be null for: UIElement.CacheModeProperty.ComboBoxItem");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (ComboBoxItem)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_ComboBoxItem ()
        {
            ComboBoxItem widget = new ComboBoxItem ();

            Assert.AreEqual(false, widget.IsSelected, "IsSelected does not match the default value");
            Assert.IsNull(widget.Content, "Content should have returned null");
            Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            ComboBoxItem widget = new ComboBoxItem ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class HyperlinkButtonTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_HyperlinkButton ()
        {
            HyperlinkButton widget = new HyperlinkButton ();
            object retval;

            retval = widget.ReadLocalValue(HyperlinkButton.NavigateUriProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(HyperlinkButton.NavigateUriProperty) should not have a value by default");
            retval = widget.ReadLocalValue(HyperlinkButton.TargetNameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(HyperlinkButton.TargetNameProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ButtonBase ()
        {
            HyperlinkButton widget = new HyperlinkButton ();
            object retval;

            retval = widget.ReadLocalValue(ButtonBase.ClickModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.ClickModeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.IsFocusedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsFocusedProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.IsMouseOverProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsMouseOverProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.IsPressedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsPressedProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.CommandProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.CommandProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.CommandParameterProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.CommandParameterProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ContentControl ()
        {
            HyperlinkButton widget = new HyperlinkButton ();
            object retval;

            retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ContentControl.ContentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            HyperlinkButton widget = new HyperlinkButton ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            HyperlinkButton widget = new HyperlinkButton ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            HyperlinkButton widget = new HyperlinkButton ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_HyperlinkButton ()
        {
            HyperlinkButton widget = new HyperlinkButton ();
            object retval;

            Assert.IsNotNull(HyperlinkButton.NavigateUriProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: HyperlinkButton.NavigateUriProperty.HyperlinkButton");
            retval = HyperlinkButton.NavigateUriProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for HyperlinkButton.NavigateUriProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(HyperlinkButton.NavigateUriProperty);
            Assert.IsNull(retval, "GetValue(HyperlinkButton.NavigateUriProperty) should have returned null");
            Assert.IsNotNull(HyperlinkButton.TargetNameProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: HyperlinkButton.TargetNameProperty.HyperlinkButton");
            retval = HyperlinkButton.TargetNameProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for HyperlinkButton.TargetNameProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(HyperlinkButton.TargetNameProperty);
            Assert.IsNull(retval, "GetValue(HyperlinkButton.TargetNameProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_ButtonBase ()
        {
            HyperlinkButton widget = new HyperlinkButton ();
            object retval;

            Assert.IsNotNull(ButtonBase.ClickModeProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: ButtonBase.ClickModeProperty.HyperlinkButton");
            retval = ButtonBase.ClickModeProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.ClickModeProperty should be non-null value");
            Assert.IsInstanceOfType<ClickMode>(retval, "ButtonBase.ClickModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(ClickMode.Release, retval, "ButtonBase.ClickModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.ClickModeProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.ClickModeProperty) should not have returned null");
            Assert.IsInstanceOfType<ClickMode>(retval, "GetValue(ButtonBase.ClickModeProperty) is not of the correct type");
            Assert.AreEqual(ClickMode.Release, retval, "GetValue(ButtonBase.ClickModeProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.IsFocusedProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: ButtonBase.IsFocusedProperty.HyperlinkButton");
            retval = ButtonBase.IsFocusedProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.IsFocusedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ButtonBase.IsFocusedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ButtonBase.IsFocusedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.IsFocusedProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.IsFocusedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ButtonBase.IsFocusedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsFocusedProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.IsMouseOverProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: ButtonBase.IsMouseOverProperty.HyperlinkButton");
            retval = ButtonBase.IsMouseOverProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.IsMouseOverProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ButtonBase.IsMouseOverProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ButtonBase.IsMouseOverProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.IsMouseOverProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.IsMouseOverProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ButtonBase.IsMouseOverProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsMouseOverProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.IsPressedProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: ButtonBase.IsPressedProperty.HyperlinkButton");
            retval = ButtonBase.IsPressedProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.IsPressedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ButtonBase.IsPressedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ButtonBase.IsPressedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.IsPressedProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.IsPressedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ButtonBase.IsPressedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsPressedProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.CommandProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: ButtonBase.CommandProperty.HyperlinkButton");
            retval = ButtonBase.CommandProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ButtonBase.CommandProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ButtonBase.CommandProperty);
            Assert.IsNull(retval, "GetValue(ButtonBase.CommandProperty) should have returned null");
            Assert.IsNotNull(ButtonBase.CommandParameterProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: ButtonBase.CommandParameterProperty.HyperlinkButton");
            retval = ButtonBase.CommandParameterProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ButtonBase.CommandParameterProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ButtonBase.CommandParameterProperty);
            Assert.IsNull(retval, "GetValue(ButtonBase.CommandParameterProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_ContentControl ()
        {
            HyperlinkButton widget = new HyperlinkButton ();
            object retval;

            Assert.IsNotNull(ContentControl.ContentTemplateProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: ContentControl.ContentTemplateProperty.HyperlinkButton");
            retval = ContentControl.ContentTemplateProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentTemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentTemplateProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");
            Assert.IsNotNull(ContentControl.ContentProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: ContentControl.ContentProperty.HyperlinkButton");
            retval = ContentControl.ContentProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            HyperlinkButton widget = new HyperlinkButton ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: Control.IsTabStopProperty.HyperlinkButton");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: Control.TabIndexProperty.HyperlinkButton");
            retval = Control.TabIndexProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: Control.TemplateProperty.HyperlinkButton");
            retval = Control.TemplateProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: Control.TabNavigationProperty.HyperlinkButton");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: Control.PaddingProperty.HyperlinkButton");
            retval = Control.PaddingProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.HyperlinkButton");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.HyperlinkButton");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: Control.BackgroundProperty.HyperlinkButton");
            retval = Control.BackgroundProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: Control.BorderBrushProperty.HyperlinkButton");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: Control.BorderThicknessProperty.HyperlinkButton");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: Control.FontSizeProperty.HyperlinkButton");
            retval = Control.FontSizeProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: Control.FontFamilyProperty.HyperlinkButton");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: Control.ForegroundProperty.HyperlinkButton");
            retval = Control.ForegroundProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: Control.FontWeightProperty.HyperlinkButton");
            retval = Control.FontWeightProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: Control.FontStyleProperty.HyperlinkButton");
            retval = Control.FontStyleProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: Control.FontStretchProperty.HyperlinkButton");
            retval = Control.FontStretchProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: Control.IsEnabledProperty.HyperlinkButton");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            HyperlinkButton widget = new HyperlinkButton ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: FrameworkElement.LanguageProperty.HyperlinkButton");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.HyperlinkButton");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.HyperlinkButton");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: FrameworkElement.WidthProperty.HyperlinkButton");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: FrameworkElement.HeightProperty.HyperlinkButton");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.HyperlinkButton");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.HyperlinkButton");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.HyperlinkButton");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.HyperlinkButton");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.HyperlinkButton");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.HyperlinkButton");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: FrameworkElement.MarginProperty.HyperlinkButton");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: FrameworkElement.StyleProperty.HyperlinkButton");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.HyperlinkButton");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: FrameworkElement.NameProperty.HyperlinkButton");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: FrameworkElement.TagProperty.HyperlinkButton");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: FrameworkElement.CursorProperty.HyperlinkButton");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: FrameworkElement.DataContextProperty.HyperlinkButton");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            HyperlinkButton widget = new HyperlinkButton ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: UIElement.AllowDropProperty.HyperlinkButton");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: UIElement.OpacityProperty.HyperlinkButton");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: UIElement.ClipProperty.HyperlinkButton");
            retval = UIElement.ClipProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: UIElement.RenderTransformProperty.HyperlinkButton");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: UIElement.EffectProperty.HyperlinkButton");
            retval = UIElement.EffectProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: UIElement.ProjectionProperty.HyperlinkButton");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: UIElement.OpacityMaskProperty.HyperlinkButton");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.HyperlinkButton");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.HyperlinkButton");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: UIElement.VisibilityProperty.HyperlinkButton");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.HyperlinkButton");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (HyperlinkButton)), "#metadata should not be null for: UIElement.CacheModeProperty.HyperlinkButton");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (HyperlinkButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_HyperlinkButton ()
        {
            HyperlinkButton widget = new HyperlinkButton ();

            Assert.IsNull(widget.NavigateUri, "NavigateUri should have returned null");
            Assert.IsNull(widget.TargetName, "TargetName should have returned null");
            Assert.AreEqual(ClickMode.Release, widget.ClickMode, "ClickMode does not match the default value");
            Assert.AreEqual(false, widget.IsFocused, "IsFocused does not match the default value");
            Assert.AreEqual(false, widget.IsMouseOver, "IsMouseOver does not match the default value");
            Assert.AreEqual(false, widget.IsPressed, "IsPressed does not match the default value");
            Assert.IsNull(widget.Command, "Command should have returned null");
            Assert.IsNull(widget.CommandParameter, "CommandParameter should have returned null");
            Assert.IsNull(widget.Content, "Content should have returned null");
            Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        public void Test_SetStringValue_HyperlinkButton ()
        {
            HyperlinkButton widget = new HyperlinkButton ();
            object retval;

            widget.SetValue(HyperlinkButton.TargetNameProperty, "some text");
            retval = widget.GetValue(HyperlinkButton.TargetNameProperty);
            Assert.AreEqual("some text", retval, "GetValue(HyperlinkButton.TargetNameProperty) should have returned 'some text'");
            widget.SetValue(HyperlinkButton.TargetNameProperty, null);
            retval = widget.GetValue(HyperlinkButton.TargetNameProperty);
            Assert.IsNull(retval, "GetValue(HyperlinkButton.TargetNameProperty) should have returned null");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            HyperlinkButton widget = new HyperlinkButton ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class ListBoxTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ListBox ()
        {
            ListBox widget = new ListBox ();
            object retval;

            retval = widget.ReadLocalValue(ListBox.IsSelectionActiveProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ListBox.IsSelectionActiveProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ListBox.ItemContainerStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ListBox.ItemContainerStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ListBox.SelectionModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ListBox.SelectionModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Selector ()
        {
            ListBox widget = new ListBox ();
            object retval;

            retval = widget.ReadLocalValue(Selector.SelectedIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Selector.SelectedIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Selector.SelectedValueProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Selector.SelectedValueProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Selector.SelectedValuePathProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Selector.SelectedValuePathProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Selector.SelectedItemProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Selector.SelectedItemProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Selector.IsSynchronizedWithCurrentItemProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Selector.IsSynchronizedWithCurrentItemProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ItemsControl ()
        {
            ListBox widget = new ListBox ();
            object retval;

            retval = widget.ReadLocalValue(ItemsControl.ItemTemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.ItemTemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ItemsControl.ItemsPanelProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.ItemsPanelProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ItemsControl.DisplayMemberPathProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.DisplayMemberPathProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ItemsControl.ItemsSourceProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ItemsControl.ItemsSourceProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            ListBox widget = new ListBox ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            ListBox widget = new ListBox ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            ListBox widget = new ListBox ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ListBox ()
        {
            ListBox widget = new ListBox ();
            object retval;

            Assert.IsNotNull(ListBox.IsSelectionActiveProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: ListBox.IsSelectionActiveProperty.ListBox");
            retval = ListBox.IsSelectionActiveProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ListBox.IsSelectionActiveProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ListBox.IsSelectionActiveProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ListBox.IsSelectionActiveProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ListBox.IsSelectionActiveProperty);
            Assert.IsNotNull(retval, "GetValue(ListBox.IsSelectionActiveProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ListBox.IsSelectionActiveProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ListBox.IsSelectionActiveProperty) does not match the default value");
            Assert.IsNotNull(ListBox.ItemContainerStyleProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: ListBox.ItemContainerStyleProperty.ListBox");
            retval = ListBox.ItemContainerStyleProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ListBox.ItemContainerStyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ListBox.ItemContainerStyleProperty);
            Assert.IsNull(retval, "GetValue(ListBox.ItemContainerStyleProperty) should have returned null");
            Assert.IsNotNull(ListBox.SelectionModeProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: ListBox.SelectionModeProperty.ListBox");
            retval = ListBox.SelectionModeProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ListBox.SelectionModeProperty should be non-null value");
            Assert.IsInstanceOfType<SelectionMode>(retval, "ListBox.SelectionModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(SelectionMode.Single, retval, "ListBox.SelectionModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ListBox.SelectionModeProperty);
            Assert.IsNotNull(retval, "GetValue(ListBox.SelectionModeProperty) should not have returned null");
            Assert.IsInstanceOfType<SelectionMode>(retval, "GetValue(ListBox.SelectionModeProperty) is not of the correct type");
            Assert.AreEqual(SelectionMode.Single, retval, "GetValue(ListBox.SelectionModeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Selector ()
        {
            ListBox widget = new ListBox ();
            object retval;

            Assert.IsNotNull(Selector.SelectedIndexProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Selector.SelectedIndexProperty.ListBox");
            retval = Selector.SelectedIndexProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Selector.SelectedIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Selector.SelectedIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(-1, retval, "Selector.SelectedIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Selector.SelectedIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Selector.SelectedIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Selector.SelectedIndexProperty) is not of the correct type");
            Assert.AreEqual(-1, retval, "GetValue(Selector.SelectedIndexProperty) does not match the default value");
            Assert.IsNotNull(Selector.SelectedValueProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Selector.SelectedValueProperty.ListBox");
            retval = Selector.SelectedValueProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Selector.SelectedValueProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Selector.SelectedValueProperty);
            Assert.IsNull(retval, "GetValue(Selector.SelectedValueProperty) should have returned null");
            Assert.IsNotNull(Selector.SelectedValuePathProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Selector.SelectedValuePathProperty.ListBox");
            retval = Selector.SelectedValuePathProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Selector.SelectedValuePathProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "Selector.SelectedValuePathProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "Selector.SelectedValuePathProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Selector.SelectedValuePathProperty);
            Assert.IsNotNull(retval, "GetValue(Selector.SelectedValuePathProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(Selector.SelectedValuePathProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(Selector.SelectedValuePathProperty) does not match the default value");
            Assert.IsNotNull(Selector.SelectedItemProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Selector.SelectedItemProperty.ListBox");
            retval = Selector.SelectedItemProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Selector.SelectedItemProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Selector.SelectedItemProperty);
            Assert.IsNull(retval, "GetValue(Selector.SelectedItemProperty) should have returned null");
            Assert.IsNotNull(Selector.IsSynchronizedWithCurrentItemProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Selector.IsSynchronizedWithCurrentItemProperty.ListBox");
            retval = Selector.IsSynchronizedWithCurrentItemProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Selector.IsSynchronizedWithCurrentItemProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Selector.IsSynchronizedWithCurrentItemProperty);
            Assert.IsNull(retval, "GetValue(Selector.IsSynchronizedWithCurrentItemProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_ItemsControl ()
        {
            ListBox widget = new ListBox ();
            object retval;

            Assert.IsNotNull(ItemsControl.ItemTemplateProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: ItemsControl.ItemTemplateProperty.ListBox");
            retval = ItemsControl.ItemTemplateProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ItemsControl.ItemTemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ItemsControl.ItemTemplateProperty);
            Assert.IsNull(retval, "GetValue(ItemsControl.ItemTemplateProperty) should have returned null");
            Assert.IsNotNull(ItemsControl.ItemsPanelProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: ItemsControl.ItemsPanelProperty.ListBox");
            retval = ItemsControl.ItemsPanelProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ItemsControl.ItemsPanelProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ItemsControl.ItemsPanelProperty);
            Assert.IsNull(retval, "GetValue(ItemsControl.ItemsPanelProperty) should have returned null");
            Assert.IsNotNull(ItemsControl.DisplayMemberPathProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: ItemsControl.DisplayMemberPathProperty.ListBox");
            retval = ItemsControl.DisplayMemberPathProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ItemsControl.DisplayMemberPathProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ItemsControl.DisplayMemberPathProperty);
            Assert.IsNull(retval, "GetValue(ItemsControl.DisplayMemberPathProperty) should have returned null");
            Assert.IsNotNull(ItemsControl.ItemsSourceProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: ItemsControl.ItemsSourceProperty.ListBox");
            retval = ItemsControl.ItemsSourceProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ItemsControl.ItemsSourceProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ItemsControl.ItemsSourceProperty);
            Assert.IsNull(retval, "GetValue(ItemsControl.ItemsSourceProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            ListBox widget = new ListBox ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Control.IsTabStopProperty.ListBox");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Control.TabIndexProperty.ListBox");
            retval = Control.TabIndexProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Control.TemplateProperty.ListBox");
            retval = Control.TemplateProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Control.TabNavigationProperty.ListBox");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Control.PaddingProperty.ListBox");
            retval = Control.PaddingProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.ListBox");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.ListBox");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Control.BackgroundProperty.ListBox");
            retval = Control.BackgroundProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Control.BorderBrushProperty.ListBox");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Control.BorderThicknessProperty.ListBox");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Control.FontSizeProperty.ListBox");
            retval = Control.FontSizeProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Control.FontFamilyProperty.ListBox");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Control.ForegroundProperty.ListBox");
            retval = Control.ForegroundProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Control.FontWeightProperty.ListBox");
            retval = Control.FontWeightProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Control.FontStyleProperty.ListBox");
            retval = Control.FontStyleProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Control.FontStretchProperty.ListBox");
            retval = Control.FontStretchProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: Control.IsEnabledProperty.ListBox");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            ListBox widget = new ListBox ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: FrameworkElement.LanguageProperty.ListBox");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.ListBox");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.ListBox");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: FrameworkElement.WidthProperty.ListBox");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: FrameworkElement.HeightProperty.ListBox");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.ListBox");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.ListBox");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.ListBox");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.ListBox");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.ListBox");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.ListBox");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: FrameworkElement.MarginProperty.ListBox");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: FrameworkElement.StyleProperty.ListBox");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.ListBox");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: FrameworkElement.NameProperty.ListBox");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: FrameworkElement.TagProperty.ListBox");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: FrameworkElement.CursorProperty.ListBox");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: FrameworkElement.DataContextProperty.ListBox");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            ListBox widget = new ListBox ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: UIElement.AllowDropProperty.ListBox");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: UIElement.OpacityProperty.ListBox");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: UIElement.ClipProperty.ListBox");
            retval = UIElement.ClipProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: UIElement.RenderTransformProperty.ListBox");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: UIElement.EffectProperty.ListBox");
            retval = UIElement.EffectProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: UIElement.ProjectionProperty.ListBox");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: UIElement.OpacityMaskProperty.ListBox");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.ListBox");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.ListBox");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: UIElement.VisibilityProperty.ListBox");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.ListBox");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (ListBox)), "#metadata should not be null for: UIElement.CacheModeProperty.ListBox");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (ListBox)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_ListBox ()
        {
            ListBox widget = new ListBox ();

            Assert.IsNull(widget.ItemContainerStyle, "ItemContainerStyle should have returned null");
            Assert.AreEqual(SelectionMode.Single, widget.SelectionMode, "SelectionMode does not match the default value");
            Assert.IsNotNull(widget.SelectedItems, "SelectedItems should not have returned null");
            Assert.AreEqual(-1, widget.SelectedIndex, "SelectedIndex does not match the default value");
            Assert.IsNull(widget.SelectedValue, "SelectedValue should have returned null");
            Assert.IsNotNull(widget.SelectedValuePath, "SelectedValuePath should not have returned null");
            Assert.AreEqual("", widget.SelectedValuePath, "SelectedValuePath does not match the default value");
            Assert.IsNull(widget.SelectedItem, "SelectedItem should have returned null");
            Assert.IsNull(widget.IsSynchronizedWithCurrentItem, "IsSynchronizedWithCurrentItem should have returned null");
            Assert.IsNotNull(widget.Items, "Items should not have returned null");
            Assert.IsInstanceOfType<ItemCollection>(widget.Items, "Items is not of the correct type");
            Assert.IsNull(widget.ItemTemplate, "ItemTemplate should have returned null");
            Assert.IsNull(widget.ItemsPanel, "ItemsPanel should have returned null");
            Assert.IsNull(widget.DisplayMemberPath, "DisplayMemberPath should have returned null");
            Assert.IsNull(widget.ItemsSource, "ItemsSource should have returned null");
            Assert.IsNotNull(widget.ItemContainerGenerator, "ItemContainerGenerator should not have returned null");
            Assert.AreEqual("System.Windows.Controls.ItemContainerGenerator", widget.ItemContainerGenerator.ToString (), "ItemContainerGenerator does not match the default value");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        public void Test_SetStringValue_Selector ()
        {
            ListBox widget = new ListBox ();
            object retval;

            widget.SetValue(Selector.SelectedValuePathProperty, "some text");
            retval = widget.GetValue(Selector.SelectedValuePathProperty);
            Assert.AreEqual("some text", retval, "GetValue(Selector.SelectedValuePathProperty) should have returned 'some text'");
            widget.SetValue(Selector.SelectedValuePathProperty, null);
            retval = widget.GetValue(Selector.SelectedValuePathProperty);
            Assert.IsNull(retval, "GetValue(Selector.SelectedValuePathProperty) should have returned null");
        }

        [TestMethod]
        public void Test_SetStringValue_ItemsControl ()
        {
            ListBox widget = new ListBox ();
            object retval;

            widget.SetValue(ItemsControl.DisplayMemberPathProperty, "some text");
            retval = widget.GetValue(ItemsControl.DisplayMemberPathProperty);
            Assert.AreEqual("some text", retval, "GetValue(ItemsControl.DisplayMemberPathProperty) should have returned 'some text'");
            widget.SetValue(ItemsControl.DisplayMemberPathProperty, null);
            retval = widget.GetValue(ItemsControl.DisplayMemberPathProperty);
            Assert.IsNull(retval, "GetValue(ItemsControl.DisplayMemberPathProperty) should have returned null");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            ListBox widget = new ListBox ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls.Primitives
{
    [TestClass]
    public partial class RepeatButtonTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_RepeatButton ()
        {
            RepeatButton widget = new RepeatButton ();
            object retval;

            retval = widget.ReadLocalValue(RepeatButton.DelayProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RepeatButton.DelayProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RepeatButton.IntervalProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RepeatButton.IntervalProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ButtonBase ()
        {
            RepeatButton widget = new RepeatButton ();
            object retval;

            retval = widget.ReadLocalValue(ButtonBase.ClickModeProperty);
            Assert.IsNotNull(retval, "ReadLocalValue(ButtonBase.ClickModeProperty) should not have returned null");
            Assert.IsInstanceOfType<ClickMode>(retval, "ReadLocalValue(ButtonBase.ClickModeProperty) is not of the correct type");
            Assert.AreEqual(ClickMode.Press, retval, "ReadLocalValue(ButtonBase.ClickModeProperty) does not match the default value");
            retval = widget.ReadLocalValue(ButtonBase.IsFocusedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsFocusedProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.IsMouseOverProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsMouseOverProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.IsPressedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsPressedProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.CommandProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.CommandProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.CommandParameterProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.CommandParameterProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ContentControl ()
        {
            RepeatButton widget = new RepeatButton ();
            object retval;

            retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ContentControl.ContentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            RepeatButton widget = new RepeatButton ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            RepeatButton widget = new RepeatButton ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            RepeatButton widget = new RepeatButton ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_RepeatButton ()
        {
            RepeatButton widget = new RepeatButton ();
            object retval;

            Assert.IsNotNull(RepeatButton.DelayProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: RepeatButton.DelayProperty.RepeatButton");
            retval = RepeatButton.DelayProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RepeatButton.DelayProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "RepeatButton.DelayProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(500, retval, "RepeatButton.DelayProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RepeatButton.DelayProperty);
            Assert.IsNotNull(retval, "GetValue(RepeatButton.DelayProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(RepeatButton.DelayProperty) is not of the correct type");
            Assert.AreEqual(500, retval, "GetValue(RepeatButton.DelayProperty) does not match the default value");
            Assert.IsNotNull(RepeatButton.IntervalProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: RepeatButton.IntervalProperty.RepeatButton");
            retval = RepeatButton.IntervalProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RepeatButton.IntervalProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "RepeatButton.IntervalProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(33, retval, "RepeatButton.IntervalProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RepeatButton.IntervalProperty);
            Assert.IsNotNull(retval, "GetValue(RepeatButton.IntervalProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(RepeatButton.IntervalProperty) is not of the correct type");
            Assert.AreEqual(33, retval, "GetValue(RepeatButton.IntervalProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_ButtonBase ()
        {
            RepeatButton widget = new RepeatButton ();
            object retval;

            Assert.IsNotNull(ButtonBase.ClickModeProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: ButtonBase.ClickModeProperty.RepeatButton");
            retval = ButtonBase.ClickModeProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.ClickModeProperty should be non-null value");
            Assert.IsInstanceOfType<ClickMode>(retval, "ButtonBase.ClickModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(ClickMode.Release, retval, "ButtonBase.ClickModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.ClickModeProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.ClickModeProperty) should not have returned null");
            Assert.IsInstanceOfType<ClickMode>(retval, "GetValue(ButtonBase.ClickModeProperty) is not of the correct type");
            Assert.AreEqual(ClickMode.Press, retval, "GetValue(ButtonBase.ClickModeProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.IsFocusedProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: ButtonBase.IsFocusedProperty.RepeatButton");
            retval = ButtonBase.IsFocusedProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.IsFocusedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ButtonBase.IsFocusedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ButtonBase.IsFocusedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.IsFocusedProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.IsFocusedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ButtonBase.IsFocusedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsFocusedProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.IsMouseOverProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: ButtonBase.IsMouseOverProperty.RepeatButton");
            retval = ButtonBase.IsMouseOverProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.IsMouseOverProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ButtonBase.IsMouseOverProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ButtonBase.IsMouseOverProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.IsMouseOverProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.IsMouseOverProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ButtonBase.IsMouseOverProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsMouseOverProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.IsPressedProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: ButtonBase.IsPressedProperty.RepeatButton");
            retval = ButtonBase.IsPressedProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.IsPressedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ButtonBase.IsPressedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ButtonBase.IsPressedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.IsPressedProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.IsPressedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ButtonBase.IsPressedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsPressedProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.CommandProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: ButtonBase.CommandProperty.RepeatButton");
            retval = ButtonBase.CommandProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ButtonBase.CommandProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ButtonBase.CommandProperty);
            Assert.IsNull(retval, "GetValue(ButtonBase.CommandProperty) should have returned null");
            Assert.IsNotNull(ButtonBase.CommandParameterProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: ButtonBase.CommandParameterProperty.RepeatButton");
            retval = ButtonBase.CommandParameterProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ButtonBase.CommandParameterProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ButtonBase.CommandParameterProperty);
            Assert.IsNull(retval, "GetValue(ButtonBase.CommandParameterProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_ContentControl ()
        {
            RepeatButton widget = new RepeatButton ();
            object retval;

            Assert.IsNotNull(ContentControl.ContentTemplateProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: ContentControl.ContentTemplateProperty.RepeatButton");
            retval = ContentControl.ContentTemplateProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentTemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentTemplateProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");
            Assert.IsNotNull(ContentControl.ContentProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: ContentControl.ContentProperty.RepeatButton");
            retval = ContentControl.ContentProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            RepeatButton widget = new RepeatButton ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: Control.IsTabStopProperty.RepeatButton");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: Control.TabIndexProperty.RepeatButton");
            retval = Control.TabIndexProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: Control.TemplateProperty.RepeatButton");
            retval = Control.TemplateProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: Control.TabNavigationProperty.RepeatButton");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: Control.PaddingProperty.RepeatButton");
            retval = Control.PaddingProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.RepeatButton");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.RepeatButton");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: Control.BackgroundProperty.RepeatButton");
            retval = Control.BackgroundProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: Control.BorderBrushProperty.RepeatButton");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: Control.BorderThicknessProperty.RepeatButton");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: Control.FontSizeProperty.RepeatButton");
            retval = Control.FontSizeProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: Control.FontFamilyProperty.RepeatButton");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: Control.ForegroundProperty.RepeatButton");
            retval = Control.ForegroundProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: Control.FontWeightProperty.RepeatButton");
            retval = Control.FontWeightProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: Control.FontStyleProperty.RepeatButton");
            retval = Control.FontStyleProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: Control.FontStretchProperty.RepeatButton");
            retval = Control.FontStretchProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: Control.IsEnabledProperty.RepeatButton");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            RepeatButton widget = new RepeatButton ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: FrameworkElement.LanguageProperty.RepeatButton");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.RepeatButton");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.RepeatButton");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: FrameworkElement.WidthProperty.RepeatButton");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: FrameworkElement.HeightProperty.RepeatButton");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.RepeatButton");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.RepeatButton");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.RepeatButton");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.RepeatButton");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.RepeatButton");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.RepeatButton");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: FrameworkElement.MarginProperty.RepeatButton");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: FrameworkElement.StyleProperty.RepeatButton");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.RepeatButton");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: FrameworkElement.NameProperty.RepeatButton");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: FrameworkElement.TagProperty.RepeatButton");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: FrameworkElement.CursorProperty.RepeatButton");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: FrameworkElement.DataContextProperty.RepeatButton");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            RepeatButton widget = new RepeatButton ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: UIElement.AllowDropProperty.RepeatButton");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: UIElement.OpacityProperty.RepeatButton");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: UIElement.ClipProperty.RepeatButton");
            retval = UIElement.ClipProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: UIElement.RenderTransformProperty.RepeatButton");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: UIElement.EffectProperty.RepeatButton");
            retval = UIElement.EffectProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: UIElement.ProjectionProperty.RepeatButton");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: UIElement.OpacityMaskProperty.RepeatButton");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.RepeatButton");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.RepeatButton");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: UIElement.VisibilityProperty.RepeatButton");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.RepeatButton");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (RepeatButton)), "#metadata should not be null for: UIElement.CacheModeProperty.RepeatButton");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (RepeatButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_RepeatButton ()
        {
            RepeatButton widget = new RepeatButton ();

            Assert.AreEqual(500, widget.Delay, "Delay does not match the default value");
            Assert.AreEqual(33, widget.Interval, "Interval does not match the default value");
            Assert.AreEqual(ClickMode.Press, widget.ClickMode, "ClickMode does not match the default value");
            Assert.AreEqual(false, widget.IsFocused, "IsFocused does not match the default value");
            Assert.AreEqual(false, widget.IsMouseOver, "IsMouseOver does not match the default value");
            Assert.AreEqual(false, widget.IsPressed, "IsPressed does not match the default value");
            Assert.IsNull(widget.Command, "Command should have returned null");
            Assert.IsNull(widget.CommandParameter, "CommandParameter should have returned null");
            Assert.IsNull(widget.Content, "Content should have returned null");
            Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            RepeatButton widget = new RepeatButton ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls.Primitives
{
    [TestClass]
    public partial class ScrollBarTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ScrollBar ()
        {
            ScrollBar widget = new ScrollBar ();
            object retval;

            retval = widget.ReadLocalValue(ScrollBar.OrientationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollBar.OrientationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ScrollBar.ViewportSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollBar.ViewportSizeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_RangeBase ()
        {
            ScrollBar widget = new ScrollBar ();
            object retval;

            retval = widget.ReadLocalValue(RangeBase.MinimumProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.MinimumProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RangeBase.MaximumProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.MaximumProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RangeBase.LargeChangeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.LargeChangeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RangeBase.SmallChangeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.SmallChangeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RangeBase.ValueProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.ValueProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            ScrollBar widget = new ScrollBar ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            ScrollBar widget = new ScrollBar ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            ScrollBar widget = new ScrollBar ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ScrollBar ()
        {
            ScrollBar widget = new ScrollBar ();
            object retval;

            Assert.IsNotNull(ScrollBar.OrientationProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: ScrollBar.OrientationProperty.ScrollBar");
            retval = ScrollBar.OrientationProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ScrollBar.OrientationProperty should be non-null value");
            Assert.IsInstanceOfType<Orientation>(retval, "ScrollBar.OrientationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Orientation.Vertical, retval, "ScrollBar.OrientationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ScrollBar.OrientationProperty);
            Assert.IsNotNull(retval, "GetValue(ScrollBar.OrientationProperty) should not have returned null");
            Assert.IsInstanceOfType<Orientation>(retval, "GetValue(ScrollBar.OrientationProperty) is not of the correct type");
            Assert.AreEqual(Orientation.Vertical, retval, "GetValue(ScrollBar.OrientationProperty) does not match the default value");
            Assert.IsNotNull(ScrollBar.ViewportSizeProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: ScrollBar.ViewportSizeProperty.ScrollBar");
            retval = ScrollBar.ViewportSizeProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ScrollBar.ViewportSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ScrollBar.ViewportSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "ScrollBar.ViewportSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ScrollBar.ViewportSizeProperty);
            Assert.IsNotNull(retval, "GetValue(ScrollBar.ViewportSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ScrollBar.ViewportSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(ScrollBar.ViewportSizeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_RangeBase ()
        {
            ScrollBar widget = new ScrollBar ();
            object retval;

            Assert.IsNotNull(RangeBase.MinimumProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: RangeBase.MinimumProperty.ScrollBar");
            retval = RangeBase.MinimumProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RangeBase.MinimumProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RangeBase.MinimumProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "RangeBase.MinimumProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RangeBase.MinimumProperty);
            Assert.IsNotNull(retval, "GetValue(RangeBase.MinimumProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RangeBase.MinimumProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(RangeBase.MinimumProperty) does not match the default value");
            Assert.IsNotNull(RangeBase.MaximumProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: RangeBase.MaximumProperty.ScrollBar");
            retval = RangeBase.MaximumProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RangeBase.MaximumProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RangeBase.MaximumProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "RangeBase.MaximumProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RangeBase.MaximumProperty);
            Assert.IsNotNull(retval, "GetValue(RangeBase.MaximumProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RangeBase.MaximumProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(RangeBase.MaximumProperty) does not match the default value");
            Assert.IsNotNull(RangeBase.LargeChangeProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: RangeBase.LargeChangeProperty.ScrollBar");
            retval = RangeBase.LargeChangeProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RangeBase.LargeChangeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RangeBase.LargeChangeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "RangeBase.LargeChangeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RangeBase.LargeChangeProperty);
            Assert.IsNotNull(retval, "GetValue(RangeBase.LargeChangeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RangeBase.LargeChangeProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(RangeBase.LargeChangeProperty) does not match the default value");
            Assert.IsNotNull(RangeBase.SmallChangeProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: RangeBase.SmallChangeProperty.ScrollBar");
            retval = RangeBase.SmallChangeProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RangeBase.SmallChangeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RangeBase.SmallChangeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0.1, retval, "RangeBase.SmallChangeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RangeBase.SmallChangeProperty);
            Assert.IsNotNull(retval, "GetValue(RangeBase.SmallChangeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RangeBase.SmallChangeProperty) is not of the correct type");
            Assert.AreEqual((double) 0.1, retval, "GetValue(RangeBase.SmallChangeProperty) does not match the default value");
            Assert.IsNotNull(RangeBase.ValueProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: RangeBase.ValueProperty.ScrollBar");
            retval = RangeBase.ValueProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RangeBase.ValueProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RangeBase.ValueProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "RangeBase.ValueProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RangeBase.ValueProperty);
            Assert.IsNotNull(retval, "GetValue(RangeBase.ValueProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RangeBase.ValueProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(RangeBase.ValueProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            ScrollBar widget = new ScrollBar ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: Control.IsTabStopProperty.ScrollBar");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: Control.TabIndexProperty.ScrollBar");
            retval = Control.TabIndexProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: Control.TemplateProperty.ScrollBar");
            retval = Control.TemplateProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: Control.TabNavigationProperty.ScrollBar");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: Control.PaddingProperty.ScrollBar");
            retval = Control.PaddingProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.ScrollBar");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.ScrollBar");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: Control.BackgroundProperty.ScrollBar");
            retval = Control.BackgroundProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: Control.BorderBrushProperty.ScrollBar");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: Control.BorderThicknessProperty.ScrollBar");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: Control.FontSizeProperty.ScrollBar");
            retval = Control.FontSizeProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: Control.FontFamilyProperty.ScrollBar");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: Control.ForegroundProperty.ScrollBar");
            retval = Control.ForegroundProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: Control.FontWeightProperty.ScrollBar");
            retval = Control.FontWeightProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: Control.FontStyleProperty.ScrollBar");
            retval = Control.FontStyleProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: Control.FontStretchProperty.ScrollBar");
            retval = Control.FontStretchProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: Control.IsEnabledProperty.ScrollBar");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            ScrollBar widget = new ScrollBar ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: FrameworkElement.LanguageProperty.ScrollBar");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.ScrollBar");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.ScrollBar");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: FrameworkElement.WidthProperty.ScrollBar");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: FrameworkElement.HeightProperty.ScrollBar");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.ScrollBar");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.ScrollBar");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.ScrollBar");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.ScrollBar");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.ScrollBar");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.ScrollBar");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: FrameworkElement.MarginProperty.ScrollBar");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: FrameworkElement.StyleProperty.ScrollBar");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.ScrollBar");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: FrameworkElement.NameProperty.ScrollBar");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: FrameworkElement.TagProperty.ScrollBar");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: FrameworkElement.CursorProperty.ScrollBar");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: FrameworkElement.DataContextProperty.ScrollBar");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            ScrollBar widget = new ScrollBar ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: UIElement.AllowDropProperty.ScrollBar");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: UIElement.OpacityProperty.ScrollBar");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: UIElement.ClipProperty.ScrollBar");
            retval = UIElement.ClipProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: UIElement.RenderTransformProperty.ScrollBar");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: UIElement.EffectProperty.ScrollBar");
            retval = UIElement.EffectProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: UIElement.ProjectionProperty.ScrollBar");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: UIElement.OpacityMaskProperty.ScrollBar");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.ScrollBar");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.ScrollBar");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: UIElement.VisibilityProperty.ScrollBar");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.ScrollBar");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (ScrollBar)), "#metadata should not be null for: UIElement.CacheModeProperty.ScrollBar");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (ScrollBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_ScrollBar ()
        {
            ScrollBar widget = new ScrollBar ();

            Assert.AreEqual(Orientation.Vertical, widget.Orientation, "Orientation does not match the default value");
            Assert.AreEqual((double) 0, widget.ViewportSize, "ViewportSize does not match the default value");
            Assert.AreEqual((double) 0, widget.Minimum, "Minimum does not match the default value");
            Assert.AreEqual((double) 1, widget.Maximum, "Maximum does not match the default value");
            Assert.AreEqual((double) 1, widget.LargeChange, "LargeChange does not match the default value");
            Assert.AreEqual((double) 0.1, widget.SmallChange, "SmallChange does not match the default value");
            Assert.AreEqual((double) 0, widget.Value, "Value does not match the default value");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            ScrollBar widget = new ScrollBar ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls.Primitives
{
    [TestClass]
    public partial class ThumbTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Thumb ()
        {
            Thumb widget = new Thumb ();
            object retval;

            retval = widget.ReadLocalValue(Thumb.IsDraggingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Thumb.IsDraggingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Thumb.IsFocusedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Thumb.IsFocusedProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            Thumb widget = new Thumb ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            Thumb widget = new Thumb ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            Thumb widget = new Thumb ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Thumb ()
        {
            Thumb widget = new Thumb ();
            object retval;

            Assert.IsNotNull(Thumb.IsDraggingProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: Thumb.IsDraggingProperty.Thumb");
            retval = Thumb.IsDraggingProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Thumb.IsDraggingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Thumb.IsDraggingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Thumb.IsDraggingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Thumb.IsDraggingProperty);
            Assert.IsNotNull(retval, "GetValue(Thumb.IsDraggingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Thumb.IsDraggingProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Thumb.IsDraggingProperty) does not match the default value");
            Assert.IsNotNull(Thumb.IsFocusedProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: Thumb.IsFocusedProperty.Thumb");
            retval = Thumb.IsFocusedProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Thumb.IsFocusedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Thumb.IsFocusedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Thumb.IsFocusedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Thumb.IsFocusedProperty);
            Assert.IsNotNull(retval, "GetValue(Thumb.IsFocusedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Thumb.IsFocusedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Thumb.IsFocusedProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            Thumb widget = new Thumb ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: Control.IsTabStopProperty.Thumb");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: Control.TabIndexProperty.Thumb");
            retval = Control.TabIndexProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: Control.TemplateProperty.Thumb");
            retval = Control.TemplateProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: Control.TabNavigationProperty.Thumb");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: Control.PaddingProperty.Thumb");
            retval = Control.PaddingProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.Thumb");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.Thumb");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: Control.BackgroundProperty.Thumb");
            retval = Control.BackgroundProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: Control.BorderBrushProperty.Thumb");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: Control.BorderThicknessProperty.Thumb");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: Control.FontSizeProperty.Thumb");
            retval = Control.FontSizeProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: Control.FontFamilyProperty.Thumb");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: Control.ForegroundProperty.Thumb");
            retval = Control.ForegroundProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: Control.FontWeightProperty.Thumb");
            retval = Control.FontWeightProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: Control.FontStyleProperty.Thumb");
            retval = Control.FontStyleProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: Control.FontStretchProperty.Thumb");
            retval = Control.FontStretchProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: Control.IsEnabledProperty.Thumb");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            Thumb widget = new Thumb ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: FrameworkElement.LanguageProperty.Thumb");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.Thumb");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.Thumb");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: FrameworkElement.WidthProperty.Thumb");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: FrameworkElement.HeightProperty.Thumb");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.Thumb");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.Thumb");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.Thumb");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.Thumb");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.Thumb");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.Thumb");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: FrameworkElement.MarginProperty.Thumb");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: FrameworkElement.StyleProperty.Thumb");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.Thumb");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: FrameworkElement.NameProperty.Thumb");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: FrameworkElement.TagProperty.Thumb");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: FrameworkElement.CursorProperty.Thumb");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: FrameworkElement.DataContextProperty.Thumb");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            Thumb widget = new Thumb ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: UIElement.AllowDropProperty.Thumb");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: UIElement.OpacityProperty.Thumb");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: UIElement.ClipProperty.Thumb");
            retval = UIElement.ClipProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: UIElement.RenderTransformProperty.Thumb");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: UIElement.EffectProperty.Thumb");
            retval = UIElement.EffectProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: UIElement.ProjectionProperty.Thumb");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: UIElement.OpacityMaskProperty.Thumb");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.Thumb");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.Thumb");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: UIElement.VisibilityProperty.Thumb");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.Thumb");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (Thumb)), "#metadata should not be null for: UIElement.CacheModeProperty.Thumb");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (Thumb)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_Thumb ()
        {
            Thumb widget = new Thumb ();

            Assert.AreEqual(false, widget.IsDragging, "IsDragging does not match the default value");
            Assert.AreEqual(false, widget.IsFocused, "IsFocused does not match the default value");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            Thumb widget = new Thumb ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class RadioButtonTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_RadioButton ()
        {
            RadioButton widget = new RadioButton ();
            object retval;

            retval = widget.ReadLocalValue(RadioButton.GroupNameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RadioButton.GroupNameProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ToggleButton ()
        {
            RadioButton widget = new RadioButton ();
            object retval;

            retval = widget.ReadLocalValue(ToggleButton.IsCheckedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToggleButton.IsCheckedProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ToggleButton.IsThreeStateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToggleButton.IsThreeStateProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ButtonBase ()
        {
            RadioButton widget = new RadioButton ();
            object retval;

            retval = widget.ReadLocalValue(ButtonBase.ClickModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.ClickModeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.IsFocusedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsFocusedProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.IsMouseOverProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsMouseOverProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.IsPressedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.IsPressedProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.CommandProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.CommandProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ButtonBase.CommandParameterProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ButtonBase.CommandParameterProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ContentControl ()
        {
            RadioButton widget = new RadioButton ();
            object retval;

            retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ContentControl.ContentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            RadioButton widget = new RadioButton ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            RadioButton widget = new RadioButton ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            RadioButton widget = new RadioButton ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_RadioButton ()
        {
            RadioButton widget = new RadioButton ();
            object retval;

            Assert.IsNotNull(RadioButton.GroupNameProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: RadioButton.GroupNameProperty.RadioButton");
            retval = RadioButton.GroupNameProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for RadioButton.GroupNameProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(RadioButton.GroupNameProperty);
            Assert.IsNull(retval, "GetValue(RadioButton.GroupNameProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_ToggleButton ()
        {
            RadioButton widget = new RadioButton ();
            object retval;

            Assert.IsNotNull(ToggleButton.IsCheckedProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: ToggleButton.IsCheckedProperty.RadioButton");
            retval = ToggleButton.IsCheckedProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ToggleButton.IsCheckedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ToggleButton.IsCheckedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ToggleButton.IsCheckedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ToggleButton.IsCheckedProperty);
            Assert.IsNotNull(retval, "GetValue(ToggleButton.IsCheckedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ToggleButton.IsCheckedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ToggleButton.IsCheckedProperty) does not match the default value");
            Assert.IsNotNull(ToggleButton.IsThreeStateProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: ToggleButton.IsThreeStateProperty.RadioButton");
            retval = ToggleButton.IsThreeStateProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ToggleButton.IsThreeStateProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ToggleButton.IsThreeStateProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ToggleButton.IsThreeStateProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ToggleButton.IsThreeStateProperty);
            Assert.IsNotNull(retval, "GetValue(ToggleButton.IsThreeStateProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ToggleButton.IsThreeStateProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ToggleButton.IsThreeStateProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_ButtonBase ()
        {
            RadioButton widget = new RadioButton ();
            object retval;

            Assert.IsNotNull(ButtonBase.ClickModeProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: ButtonBase.ClickModeProperty.RadioButton");
            retval = ButtonBase.ClickModeProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.ClickModeProperty should be non-null value");
            Assert.IsInstanceOfType<ClickMode>(retval, "ButtonBase.ClickModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(ClickMode.Release, retval, "ButtonBase.ClickModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.ClickModeProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.ClickModeProperty) should not have returned null");
            Assert.IsInstanceOfType<ClickMode>(retval, "GetValue(ButtonBase.ClickModeProperty) is not of the correct type");
            Assert.AreEqual(ClickMode.Release, retval, "GetValue(ButtonBase.ClickModeProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.IsFocusedProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: ButtonBase.IsFocusedProperty.RadioButton");
            retval = ButtonBase.IsFocusedProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.IsFocusedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ButtonBase.IsFocusedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ButtonBase.IsFocusedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.IsFocusedProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.IsFocusedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ButtonBase.IsFocusedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsFocusedProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.IsMouseOverProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: ButtonBase.IsMouseOverProperty.RadioButton");
            retval = ButtonBase.IsMouseOverProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.IsMouseOverProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ButtonBase.IsMouseOverProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ButtonBase.IsMouseOverProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.IsMouseOverProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.IsMouseOverProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ButtonBase.IsMouseOverProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsMouseOverProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.IsPressedProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: ButtonBase.IsPressedProperty.RadioButton");
            retval = ButtonBase.IsPressedProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ButtonBase.IsPressedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ButtonBase.IsPressedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ButtonBase.IsPressedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ButtonBase.IsPressedProperty);
            Assert.IsNotNull(retval, "GetValue(ButtonBase.IsPressedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ButtonBase.IsPressedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ButtonBase.IsPressedProperty) does not match the default value");
            Assert.IsNotNull(ButtonBase.CommandProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: ButtonBase.CommandProperty.RadioButton");
            retval = ButtonBase.CommandProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ButtonBase.CommandProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ButtonBase.CommandProperty);
            Assert.IsNull(retval, "GetValue(ButtonBase.CommandProperty) should have returned null");
            Assert.IsNotNull(ButtonBase.CommandParameterProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: ButtonBase.CommandParameterProperty.RadioButton");
            retval = ButtonBase.CommandParameterProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ButtonBase.CommandParameterProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ButtonBase.CommandParameterProperty);
            Assert.IsNull(retval, "GetValue(ButtonBase.CommandParameterProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_ContentControl ()
        {
            RadioButton widget = new RadioButton ();
            object retval;

            Assert.IsNotNull(ContentControl.ContentTemplateProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: ContentControl.ContentTemplateProperty.RadioButton");
            retval = ContentControl.ContentTemplateProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentTemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentTemplateProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");
            Assert.IsNotNull(ContentControl.ContentProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: ContentControl.ContentProperty.RadioButton");
            retval = ContentControl.ContentProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            RadioButton widget = new RadioButton ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: Control.IsTabStopProperty.RadioButton");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: Control.TabIndexProperty.RadioButton");
            retval = Control.TabIndexProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: Control.TemplateProperty.RadioButton");
            retval = Control.TemplateProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: Control.TabNavigationProperty.RadioButton");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: Control.PaddingProperty.RadioButton");
            retval = Control.PaddingProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.RadioButton");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.RadioButton");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: Control.BackgroundProperty.RadioButton");
            retval = Control.BackgroundProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: Control.BorderBrushProperty.RadioButton");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: Control.BorderThicknessProperty.RadioButton");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: Control.FontSizeProperty.RadioButton");
            retval = Control.FontSizeProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: Control.FontFamilyProperty.RadioButton");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: Control.ForegroundProperty.RadioButton");
            retval = Control.ForegroundProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: Control.FontWeightProperty.RadioButton");
            retval = Control.FontWeightProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: Control.FontStyleProperty.RadioButton");
            retval = Control.FontStyleProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: Control.FontStretchProperty.RadioButton");
            retval = Control.FontStretchProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: Control.IsEnabledProperty.RadioButton");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            RadioButton widget = new RadioButton ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: FrameworkElement.LanguageProperty.RadioButton");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.RadioButton");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.RadioButton");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: FrameworkElement.WidthProperty.RadioButton");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: FrameworkElement.HeightProperty.RadioButton");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.RadioButton");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.RadioButton");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.RadioButton");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.RadioButton");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.RadioButton");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.RadioButton");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: FrameworkElement.MarginProperty.RadioButton");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: FrameworkElement.StyleProperty.RadioButton");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.RadioButton");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: FrameworkElement.NameProperty.RadioButton");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: FrameworkElement.TagProperty.RadioButton");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: FrameworkElement.CursorProperty.RadioButton");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: FrameworkElement.DataContextProperty.RadioButton");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            RadioButton widget = new RadioButton ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: UIElement.AllowDropProperty.RadioButton");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: UIElement.OpacityProperty.RadioButton");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: UIElement.ClipProperty.RadioButton");
            retval = UIElement.ClipProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: UIElement.RenderTransformProperty.RadioButton");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: UIElement.EffectProperty.RadioButton");
            retval = UIElement.EffectProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: UIElement.ProjectionProperty.RadioButton");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: UIElement.OpacityMaskProperty.RadioButton");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.RadioButton");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.RadioButton");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: UIElement.VisibilityProperty.RadioButton");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.RadioButton");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (RadioButton)), "#metadata should not be null for: UIElement.CacheModeProperty.RadioButton");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (RadioButton)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_RadioButton ()
        {
            RadioButton widget = new RadioButton ();

            Assert.IsNull(widget.GroupName, "GroupName should have returned null");
            Assert.AreEqual(false, widget.IsChecked, "IsChecked does not match the default value");
            Assert.AreEqual(false, widget.IsThreeState, "IsThreeState does not match the default value");
            Assert.AreEqual(ClickMode.Release, widget.ClickMode, "ClickMode does not match the default value");
            Assert.AreEqual(false, widget.IsFocused, "IsFocused does not match the default value");
            Assert.AreEqual(false, widget.IsMouseOver, "IsMouseOver does not match the default value");
            Assert.AreEqual(false, widget.IsPressed, "IsPressed does not match the default value");
            Assert.IsNull(widget.Command, "Command should have returned null");
            Assert.IsNull(widget.CommandParameter, "CommandParameter should have returned null");
            Assert.IsNull(widget.Content, "Content should have returned null");
            Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        public void Test_SetStringValue_RadioButton ()
        {
            RadioButton widget = new RadioButton ();
            object retval;

            widget.SetValue(RadioButton.GroupNameProperty, "some text");
            retval = widget.GetValue(RadioButton.GroupNameProperty);
            Assert.AreEqual("some text", retval, "GetValue(RadioButton.GroupNameProperty) should have returned 'some text'");
            widget.SetValue(RadioButton.GroupNameProperty, null);
            retval = widget.GetValue(RadioButton.GroupNameProperty);
            Assert.IsNull(retval, "GetValue(RadioButton.GroupNameProperty) should have returned null");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            RadioButton widget = new RadioButton ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class ScrollContentPresenterTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ContentPresenter ()
        {
            ScrollContentPresenter widget = new ScrollContentPresenter ();
            object retval;

            retval = widget.ReadLocalValue(ContentPresenter.ContentTemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentPresenter.ContentTemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ContentPresenter.ContentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentPresenter.ContentProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            ScrollContentPresenter widget = new ScrollContentPresenter ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            ScrollContentPresenter widget = new ScrollContentPresenter ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ContentPresenter ()
        {
            ScrollContentPresenter widget = new ScrollContentPresenter ();
            object retval;

            Assert.IsNotNull(ContentPresenter.ContentTemplateProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: ContentPresenter.ContentTemplateProperty.ScrollContentPresenter");
            retval = ContentPresenter.ContentTemplateProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentPresenter.ContentTemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentPresenter.ContentTemplateProperty);
            Assert.IsNull(retval, "GetValue(ContentPresenter.ContentTemplateProperty) should have returned null");
            Assert.IsNotNull(ContentPresenter.ContentProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: ContentPresenter.ContentProperty.ScrollContentPresenter");
            retval = ContentPresenter.ContentProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentPresenter.ContentProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentPresenter.ContentProperty);
            Assert.IsNull(retval, "GetValue(ContentPresenter.ContentProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            ScrollContentPresenter widget = new ScrollContentPresenter ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: FrameworkElement.LanguageProperty.ScrollContentPresenter");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.ScrollContentPresenter");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.ScrollContentPresenter");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: FrameworkElement.WidthProperty.ScrollContentPresenter");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: FrameworkElement.HeightProperty.ScrollContentPresenter");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.ScrollContentPresenter");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.ScrollContentPresenter");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.ScrollContentPresenter");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.ScrollContentPresenter");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.ScrollContentPresenter");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.ScrollContentPresenter");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: FrameworkElement.MarginProperty.ScrollContentPresenter");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: FrameworkElement.StyleProperty.ScrollContentPresenter");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.ScrollContentPresenter");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: FrameworkElement.NameProperty.ScrollContentPresenter");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: FrameworkElement.TagProperty.ScrollContentPresenter");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: FrameworkElement.CursorProperty.ScrollContentPresenter");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: FrameworkElement.DataContextProperty.ScrollContentPresenter");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            ScrollContentPresenter widget = new ScrollContentPresenter ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: UIElement.AllowDropProperty.ScrollContentPresenter");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: UIElement.OpacityProperty.ScrollContentPresenter");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: UIElement.ClipProperty.ScrollContentPresenter");
            retval = UIElement.ClipProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: UIElement.RenderTransformProperty.ScrollContentPresenter");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: UIElement.EffectProperty.ScrollContentPresenter");
            retval = UIElement.EffectProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: UIElement.ProjectionProperty.ScrollContentPresenter");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: UIElement.OpacityMaskProperty.ScrollContentPresenter");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.ScrollContentPresenter");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.ScrollContentPresenter");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: UIElement.VisibilityProperty.ScrollContentPresenter");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.ScrollContentPresenter");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (ScrollContentPresenter)), "#metadata should not be null for: UIElement.CacheModeProperty.ScrollContentPresenter");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (ScrollContentPresenter)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_ScrollContentPresenter ()
        {
            ScrollContentPresenter widget = new ScrollContentPresenter ();

            Assert.AreEqual(false, widget.CanVerticallyScroll, "CanVerticallyScroll does not match the default value");
            Assert.AreEqual(false, widget.CanHorizontallyScroll, "CanHorizontallyScroll does not match the default value");
            Assert.AreEqual((double) 0, widget.ExtentWidth, "ExtentWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ExtentHeight, "ExtentHeight does not match the default value");
            Assert.AreEqual((double) 0, widget.ViewportWidth, "ViewportWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ViewportHeight, "ViewportHeight does not match the default value");
            Assert.AreEqual((double) 0, widget.HorizontalOffset, "HorizontalOffset does not match the default value");
            Assert.AreEqual((double) 0, widget.VerticalOffset, "VerticalOffset does not match the default value");
            Assert.IsNull(widget.ScrollOwner, "ScrollOwner should have returned null");
            Assert.IsNull(widget.Content, "Content should have returned null");
            Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            ScrollContentPresenter widget = new ScrollContentPresenter ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class ScrollViewerTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ScrollViewer ()
        {
            ScrollViewer widget = new ScrollViewer ();
            object retval;

            retval = widget.ReadLocalValue(ScrollViewer.HorizontalScrollBarVisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.HorizontalScrollBarVisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ScrollViewer.VerticalScrollBarVisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.VerticalScrollBarVisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ScrollViewer.HorizontalOffsetProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.HorizontalOffsetProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ScrollViewer.ViewportWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.ViewportWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ScrollViewer.ScrollableWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.ScrollableWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ScrollViewer.VerticalOffsetProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.VerticalOffsetProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ScrollViewer.ViewportHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.ViewportHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ScrollViewer.ScrollableHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.ScrollableHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ScrollViewer.ComputedVerticalScrollBarVisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.ComputedVerticalScrollBarVisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ScrollViewer.ExtentHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.ExtentHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ScrollViewer.ExtentWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ScrollViewer.ExtentWidthProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ContentControl ()
        {
            ScrollViewer widget = new ScrollViewer ();
            object retval;

            retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ContentControl.ContentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            ScrollViewer widget = new ScrollViewer ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            ScrollViewer widget = new ScrollViewer ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            ScrollViewer widget = new ScrollViewer ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ScrollViewer ()
        {
            ScrollViewer widget = new ScrollViewer ();
            object retval;

            Assert.IsNotNull(ScrollViewer.HorizontalScrollBarVisibilityProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: ScrollViewer.HorizontalScrollBarVisibilityProperty.ScrollViewer");
            retval = ScrollViewer.HorizontalScrollBarVisibilityProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ScrollViewer.HorizontalScrollBarVisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<ScrollBarVisibility>(retval, "ScrollViewer.HorizontalScrollBarVisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(ScrollBarVisibility.Disabled, retval, "ScrollViewer.HorizontalScrollBarVisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<ScrollBarVisibility>(retval, "GetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty) is not of the correct type");
            Assert.AreEqual(ScrollBarVisibility.Disabled, retval, "GetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty) does not match the default value");
            Assert.IsNotNull(ScrollViewer.VerticalScrollBarVisibilityProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: ScrollViewer.VerticalScrollBarVisibilityProperty.ScrollViewer");
            retval = ScrollViewer.VerticalScrollBarVisibilityProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ScrollViewer.VerticalScrollBarVisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<ScrollBarVisibility>(retval, "ScrollViewer.VerticalScrollBarVisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(ScrollBarVisibility.Disabled, retval, "ScrollViewer.VerticalScrollBarVisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ScrollViewer.VerticalScrollBarVisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(ScrollViewer.VerticalScrollBarVisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<ScrollBarVisibility>(retval, "GetValue(ScrollViewer.VerticalScrollBarVisibilityProperty) is not of the correct type");
            Assert.AreEqual(ScrollBarVisibility.Disabled, retval, "GetValue(ScrollViewer.VerticalScrollBarVisibilityProperty) does not match the default value");
            Assert.IsNotNull(ScrollViewer.HorizontalOffsetProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: ScrollViewer.HorizontalOffsetProperty.ScrollViewer");
            retval = ScrollViewer.HorizontalOffsetProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ScrollViewer.HorizontalOffsetProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ScrollViewer.HorizontalOffsetProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "ScrollViewer.HorizontalOffsetProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ScrollViewer.HorizontalOffsetProperty);
            Assert.IsNotNull(retval, "GetValue(ScrollViewer.HorizontalOffsetProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ScrollViewer.HorizontalOffsetProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(ScrollViewer.HorizontalOffsetProperty) does not match the default value");
            Assert.IsNotNull(ScrollViewer.ViewportWidthProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: ScrollViewer.ViewportWidthProperty.ScrollViewer");
            retval = ScrollViewer.ViewportWidthProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ScrollViewer.ViewportWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ScrollViewer.ViewportWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "ScrollViewer.ViewportWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ScrollViewer.ViewportWidthProperty);
            Assert.IsNotNull(retval, "GetValue(ScrollViewer.ViewportWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ScrollViewer.ViewportWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(ScrollViewer.ViewportWidthProperty) does not match the default value");
            Assert.IsNotNull(ScrollViewer.ScrollableWidthProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: ScrollViewer.ScrollableWidthProperty.ScrollViewer");
            retval = ScrollViewer.ScrollableWidthProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ScrollViewer.ScrollableWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ScrollViewer.ScrollableWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "ScrollViewer.ScrollableWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ScrollViewer.ScrollableWidthProperty);
            Assert.IsNotNull(retval, "GetValue(ScrollViewer.ScrollableWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ScrollViewer.ScrollableWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(ScrollViewer.ScrollableWidthProperty) does not match the default value");
            Assert.IsNotNull(ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty.ScrollViewer");
            retval = ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty) does not match the default value");
            Assert.IsNotNull(ScrollViewer.VerticalOffsetProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: ScrollViewer.VerticalOffsetProperty.ScrollViewer");
            retval = ScrollViewer.VerticalOffsetProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ScrollViewer.VerticalOffsetProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ScrollViewer.VerticalOffsetProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "ScrollViewer.VerticalOffsetProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ScrollViewer.VerticalOffsetProperty);
            Assert.IsNotNull(retval, "GetValue(ScrollViewer.VerticalOffsetProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ScrollViewer.VerticalOffsetProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(ScrollViewer.VerticalOffsetProperty) does not match the default value");
            Assert.IsNotNull(ScrollViewer.ViewportHeightProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: ScrollViewer.ViewportHeightProperty.ScrollViewer");
            retval = ScrollViewer.ViewportHeightProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ScrollViewer.ViewportHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ScrollViewer.ViewportHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "ScrollViewer.ViewportHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ScrollViewer.ViewportHeightProperty);
            Assert.IsNotNull(retval, "GetValue(ScrollViewer.ViewportHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ScrollViewer.ViewportHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(ScrollViewer.ViewportHeightProperty) does not match the default value");
            Assert.IsNotNull(ScrollViewer.ScrollableHeightProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: ScrollViewer.ScrollableHeightProperty.ScrollViewer");
            retval = ScrollViewer.ScrollableHeightProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ScrollViewer.ScrollableHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ScrollViewer.ScrollableHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "ScrollViewer.ScrollableHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ScrollViewer.ScrollableHeightProperty);
            Assert.IsNotNull(retval, "GetValue(ScrollViewer.ScrollableHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ScrollViewer.ScrollableHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(ScrollViewer.ScrollableHeightProperty) does not match the default value");
            Assert.IsNotNull(ScrollViewer.ComputedVerticalScrollBarVisibilityProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: ScrollViewer.ComputedVerticalScrollBarVisibilityProperty.ScrollViewer");
            retval = ScrollViewer.ComputedVerticalScrollBarVisibilityProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ScrollViewer.ComputedVerticalScrollBarVisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "ScrollViewer.ComputedVerticalScrollBarVisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "ScrollViewer.ComputedVerticalScrollBarVisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ScrollViewer.ComputedVerticalScrollBarVisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(ScrollViewer.ComputedVerticalScrollBarVisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(ScrollViewer.ComputedVerticalScrollBarVisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(ScrollViewer.ComputedVerticalScrollBarVisibilityProperty) does not match the default value");
            Assert.IsNotNull(ScrollViewer.ExtentHeightProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: ScrollViewer.ExtentHeightProperty.ScrollViewer");
            retval = ScrollViewer.ExtentHeightProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ScrollViewer.ExtentHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ScrollViewer.ExtentHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "ScrollViewer.ExtentHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ScrollViewer.ExtentHeightProperty);
            Assert.IsNotNull(retval, "GetValue(ScrollViewer.ExtentHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ScrollViewer.ExtentHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(ScrollViewer.ExtentHeightProperty) does not match the default value");
            Assert.IsNotNull(ScrollViewer.ExtentWidthProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: ScrollViewer.ExtentWidthProperty.ScrollViewer");
            retval = ScrollViewer.ExtentWidthProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ScrollViewer.ExtentWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ScrollViewer.ExtentWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "ScrollViewer.ExtentWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ScrollViewer.ExtentWidthProperty);
            Assert.IsNotNull(retval, "GetValue(ScrollViewer.ExtentWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ScrollViewer.ExtentWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(ScrollViewer.ExtentWidthProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_ContentControl ()
        {
            ScrollViewer widget = new ScrollViewer ();
            object retval;

            Assert.IsNotNull(ContentControl.ContentTemplateProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: ContentControl.ContentTemplateProperty.ScrollViewer");
            retval = ContentControl.ContentTemplateProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentTemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentTemplateProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");
            Assert.IsNotNull(ContentControl.ContentProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: ContentControl.ContentProperty.ScrollViewer");
            retval = ContentControl.ContentProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            ScrollViewer widget = new ScrollViewer ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: Control.IsTabStopProperty.ScrollViewer");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: Control.TabIndexProperty.ScrollViewer");
            retval = Control.TabIndexProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: Control.TemplateProperty.ScrollViewer");
            retval = Control.TemplateProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: Control.TabNavigationProperty.ScrollViewer");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: Control.PaddingProperty.ScrollViewer");
            retval = Control.PaddingProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.ScrollViewer");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.ScrollViewer");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: Control.BackgroundProperty.ScrollViewer");
            retval = Control.BackgroundProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: Control.BorderBrushProperty.ScrollViewer");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: Control.BorderThicknessProperty.ScrollViewer");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: Control.FontSizeProperty.ScrollViewer");
            retval = Control.FontSizeProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: Control.FontFamilyProperty.ScrollViewer");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: Control.ForegroundProperty.ScrollViewer");
            retval = Control.ForegroundProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: Control.FontWeightProperty.ScrollViewer");
            retval = Control.FontWeightProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: Control.FontStyleProperty.ScrollViewer");
            retval = Control.FontStyleProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: Control.FontStretchProperty.ScrollViewer");
            retval = Control.FontStretchProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: Control.IsEnabledProperty.ScrollViewer");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            ScrollViewer widget = new ScrollViewer ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: FrameworkElement.LanguageProperty.ScrollViewer");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.ScrollViewer");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.ScrollViewer");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: FrameworkElement.WidthProperty.ScrollViewer");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: FrameworkElement.HeightProperty.ScrollViewer");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.ScrollViewer");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.ScrollViewer");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.ScrollViewer");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.ScrollViewer");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.ScrollViewer");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.ScrollViewer");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: FrameworkElement.MarginProperty.ScrollViewer");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: FrameworkElement.StyleProperty.ScrollViewer");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.ScrollViewer");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: FrameworkElement.NameProperty.ScrollViewer");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: FrameworkElement.TagProperty.ScrollViewer");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: FrameworkElement.CursorProperty.ScrollViewer");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: FrameworkElement.DataContextProperty.ScrollViewer");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            ScrollViewer widget = new ScrollViewer ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: UIElement.AllowDropProperty.ScrollViewer");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: UIElement.OpacityProperty.ScrollViewer");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: UIElement.ClipProperty.ScrollViewer");
            retval = UIElement.ClipProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: UIElement.RenderTransformProperty.ScrollViewer");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: UIElement.EffectProperty.ScrollViewer");
            retval = UIElement.EffectProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: UIElement.ProjectionProperty.ScrollViewer");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: UIElement.OpacityMaskProperty.ScrollViewer");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.ScrollViewer");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.ScrollViewer");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: UIElement.VisibilityProperty.ScrollViewer");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.ScrollViewer");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (ScrollViewer)), "#metadata should not be null for: UIElement.CacheModeProperty.ScrollViewer");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (ScrollViewer)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_ScrollViewer ()
        {
            ScrollViewer widget = new ScrollViewer ();

            Assert.AreEqual(ScrollBarVisibility.Disabled, widget.HorizontalScrollBarVisibility, "HorizontalScrollBarVisibility does not match the default value");
            Assert.AreEqual(ScrollBarVisibility.Disabled, widget.VerticalScrollBarVisibility, "VerticalScrollBarVisibility does not match the default value");
            Assert.AreEqual((double) 0, widget.HorizontalOffset, "HorizontalOffset does not match the default value");
            Assert.AreEqual((double) 0, widget.ViewportWidth, "ViewportWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ScrollableWidth, "ScrollableWidth does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.ComputedHorizontalScrollBarVisibility, "ComputedHorizontalScrollBarVisibility does not match the default value");
            Assert.AreEqual((double) 0, widget.VerticalOffset, "VerticalOffset does not match the default value");
            Assert.AreEqual((double) 0, widget.ViewportHeight, "ViewportHeight does not match the default value");
            Assert.AreEqual((double) 0, widget.ScrollableHeight, "ScrollableHeight does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.ComputedVerticalScrollBarVisibility, "ComputedVerticalScrollBarVisibility does not match the default value");
            Assert.AreEqual((double) 0, widget.ExtentHeight, "ExtentHeight does not match the default value");
            Assert.AreEqual((double) 0, widget.ExtentWidth, "ExtentWidth does not match the default value");
            Assert.IsNull(widget.Content, "Content should have returned null");
            Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            ScrollViewer widget = new ScrollViewer ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class SliderTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_Slider ()
        {
            Slider widget = new Slider ();
            object retval;

            retval = widget.ReadLocalValue(Slider.OrientationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Slider.OrientationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Slider.IsFocusedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Slider.IsFocusedProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Slider.IsDirectionReversedProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Slider.IsDirectionReversedProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_RangeBase ()
        {
            Slider widget = new Slider ();
            object retval;

            retval = widget.ReadLocalValue(RangeBase.MinimumProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.MinimumProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RangeBase.MaximumProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.MaximumProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RangeBase.LargeChangeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.LargeChangeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RangeBase.SmallChangeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.SmallChangeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RangeBase.ValueProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.ValueProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            Slider widget = new Slider ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            Slider widget = new Slider ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            Slider widget = new Slider ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_Slider ()
        {
            Slider widget = new Slider ();
            object retval;

            Assert.IsNotNull(Slider.OrientationProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Slider.OrientationProperty.Slider");
            retval = Slider.OrientationProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Slider.OrientationProperty should be non-null value");
            Assert.IsInstanceOfType<Orientation>(retval, "Slider.OrientationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Orientation.Horizontal, retval, "Slider.OrientationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Slider.OrientationProperty);
            Assert.IsNotNull(retval, "GetValue(Slider.OrientationProperty) should not have returned null");
            Assert.IsInstanceOfType<Orientation>(retval, "GetValue(Slider.OrientationProperty) is not of the correct type");
            Assert.AreEqual(Orientation.Horizontal, retval, "GetValue(Slider.OrientationProperty) does not match the default value");
            Assert.IsNotNull(Slider.IsFocusedProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Slider.IsFocusedProperty.Slider");
            retval = Slider.IsFocusedProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Slider.IsFocusedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Slider.IsFocusedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Slider.IsFocusedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Slider.IsFocusedProperty);
            Assert.IsNotNull(retval, "GetValue(Slider.IsFocusedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Slider.IsFocusedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Slider.IsFocusedProperty) does not match the default value");
            Assert.IsNotNull(Slider.IsDirectionReversedProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Slider.IsDirectionReversedProperty.Slider");
            retval = Slider.IsDirectionReversedProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Slider.IsDirectionReversedProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Slider.IsDirectionReversedProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Slider.IsDirectionReversedProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Slider.IsDirectionReversedProperty);
            Assert.IsNotNull(retval, "GetValue(Slider.IsDirectionReversedProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Slider.IsDirectionReversedProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Slider.IsDirectionReversedProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_RangeBase ()
        {
            Slider widget = new Slider ();
            object retval;

            Assert.IsNotNull(RangeBase.MinimumProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: RangeBase.MinimumProperty.Slider");
            retval = RangeBase.MinimumProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RangeBase.MinimumProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RangeBase.MinimumProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "RangeBase.MinimumProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RangeBase.MinimumProperty);
            Assert.IsNotNull(retval, "GetValue(RangeBase.MinimumProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RangeBase.MinimumProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(RangeBase.MinimumProperty) does not match the default value");
            Assert.IsNotNull(RangeBase.MaximumProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: RangeBase.MaximumProperty.Slider");
            retval = RangeBase.MaximumProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RangeBase.MaximumProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RangeBase.MaximumProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "RangeBase.MaximumProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RangeBase.MaximumProperty);
            Assert.IsNotNull(retval, "GetValue(RangeBase.MaximumProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RangeBase.MaximumProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(RangeBase.MaximumProperty) does not match the default value");
            Assert.IsNotNull(RangeBase.LargeChangeProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: RangeBase.LargeChangeProperty.Slider");
            retval = RangeBase.LargeChangeProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RangeBase.LargeChangeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RangeBase.LargeChangeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "RangeBase.LargeChangeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RangeBase.LargeChangeProperty);
            Assert.IsNotNull(retval, "GetValue(RangeBase.LargeChangeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RangeBase.LargeChangeProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(RangeBase.LargeChangeProperty) does not match the default value");
            Assert.IsNotNull(RangeBase.SmallChangeProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: RangeBase.SmallChangeProperty.Slider");
            retval = RangeBase.SmallChangeProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RangeBase.SmallChangeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RangeBase.SmallChangeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0.1, retval, "RangeBase.SmallChangeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RangeBase.SmallChangeProperty);
            Assert.IsNotNull(retval, "GetValue(RangeBase.SmallChangeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RangeBase.SmallChangeProperty) is not of the correct type");
            Assert.AreEqual((double) 0.1, retval, "GetValue(RangeBase.SmallChangeProperty) does not match the default value");
            Assert.IsNotNull(RangeBase.ValueProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: RangeBase.ValueProperty.Slider");
            retval = RangeBase.ValueProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RangeBase.ValueProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RangeBase.ValueProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "RangeBase.ValueProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RangeBase.ValueProperty);
            Assert.IsNotNull(retval, "GetValue(RangeBase.ValueProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RangeBase.ValueProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(RangeBase.ValueProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            Slider widget = new Slider ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Control.IsTabStopProperty.Slider");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Control.TabIndexProperty.Slider");
            retval = Control.TabIndexProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Control.TemplateProperty.Slider");
            retval = Control.TemplateProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Control.TabNavigationProperty.Slider");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Control.PaddingProperty.Slider");
            retval = Control.PaddingProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.Slider");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.Slider");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Control.BackgroundProperty.Slider");
            retval = Control.BackgroundProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Control.BorderBrushProperty.Slider");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Control.BorderThicknessProperty.Slider");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Control.FontSizeProperty.Slider");
            retval = Control.FontSizeProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Control.FontFamilyProperty.Slider");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Control.ForegroundProperty.Slider");
            retval = Control.ForegroundProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Control.FontWeightProperty.Slider");
            retval = Control.FontWeightProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Control.FontStyleProperty.Slider");
            retval = Control.FontStyleProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Control.FontStretchProperty.Slider");
            retval = Control.FontStretchProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: Control.IsEnabledProperty.Slider");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            Slider widget = new Slider ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: FrameworkElement.LanguageProperty.Slider");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.Slider");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.Slider");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: FrameworkElement.WidthProperty.Slider");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: FrameworkElement.HeightProperty.Slider");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.Slider");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.Slider");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.Slider");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.Slider");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.Slider");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.Slider");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: FrameworkElement.MarginProperty.Slider");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: FrameworkElement.StyleProperty.Slider");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.Slider");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: FrameworkElement.NameProperty.Slider");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: FrameworkElement.TagProperty.Slider");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: FrameworkElement.CursorProperty.Slider");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: FrameworkElement.DataContextProperty.Slider");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            Slider widget = new Slider ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: UIElement.AllowDropProperty.Slider");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: UIElement.OpacityProperty.Slider");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: UIElement.ClipProperty.Slider");
            retval = UIElement.ClipProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: UIElement.RenderTransformProperty.Slider");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: UIElement.EffectProperty.Slider");
            retval = UIElement.EffectProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: UIElement.ProjectionProperty.Slider");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: UIElement.OpacityMaskProperty.Slider");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.Slider");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.Slider");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: UIElement.VisibilityProperty.Slider");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.Slider");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (Slider)), "#metadata should not be null for: UIElement.CacheModeProperty.Slider");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (Slider)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_Slider ()
        {
            Slider widget = new Slider ();

            Assert.AreEqual(Orientation.Horizontal, widget.Orientation, "Orientation does not match the default value");
            Assert.AreEqual(false, widget.IsFocused, "IsFocused does not match the default value");
            Assert.AreEqual(false, widget.IsDirectionReversed, "IsDirectionReversed does not match the default value");
            Assert.AreEqual((double) 0, widget.Minimum, "Minimum does not match the default value");
            Assert.AreEqual((double) 1, widget.Maximum, "Maximum does not match the default value");
            Assert.AreEqual((double) 1, widget.LargeChange, "LargeChange does not match the default value");
            Assert.AreEqual((double) 0.1, widget.SmallChange, "SmallChange does not match the default value");
            Assert.AreEqual((double) 0, widget.Value, "Value does not match the default value");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            Slider widget = new Slider ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class ToolTipTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ToolTip ()
        {
            ToolTip widget = new ToolTip ();
            object retval;

            retval = widget.ReadLocalValue(ToolTip.HorizontalOffsetProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToolTip.HorizontalOffsetProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ToolTip.IsOpenProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToolTip.IsOpenProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ToolTip.VerticalOffsetProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToolTip.VerticalOffsetProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ToolTip.PlacementProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToolTip.PlacementProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ToolTip.PlacementTargetProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ToolTip.PlacementTargetProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_ContentControl ()
        {
            ToolTip widget = new ToolTip ();
            object retval;

            retval = widget.ReadLocalValue(ContentControl.ContentTemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentTemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(ContentControl.ContentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ContentControl.ContentProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            ToolTip widget = new ToolTip ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            ToolTip widget = new ToolTip ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            ToolTip widget = new ToolTip ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ToolTip ()
        {
            ToolTip widget = new ToolTip ();
            object retval;

            Assert.IsNotNull(ToolTip.HorizontalOffsetProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: ToolTip.HorizontalOffsetProperty.ToolTip");
            retval = ToolTip.HorizontalOffsetProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ToolTip.HorizontalOffsetProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ToolTip.HorizontalOffsetProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "ToolTip.HorizontalOffsetProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ToolTip.HorizontalOffsetProperty);
            Assert.IsNotNull(retval, "GetValue(ToolTip.HorizontalOffsetProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ToolTip.HorizontalOffsetProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(ToolTip.HorizontalOffsetProperty) does not match the default value");
            Assert.IsNotNull(ToolTip.IsOpenProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: ToolTip.IsOpenProperty.ToolTip");
            retval = ToolTip.IsOpenProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ToolTip.IsOpenProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ToolTip.IsOpenProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ToolTip.IsOpenProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ToolTip.IsOpenProperty);
            Assert.IsNotNull(retval, "GetValue(ToolTip.IsOpenProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ToolTip.IsOpenProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ToolTip.IsOpenProperty) does not match the default value");
            Assert.IsNotNull(ToolTip.VerticalOffsetProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: ToolTip.VerticalOffsetProperty.ToolTip");
            retval = ToolTip.VerticalOffsetProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ToolTip.VerticalOffsetProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "ToolTip.VerticalOffsetProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "ToolTip.VerticalOffsetProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ToolTip.VerticalOffsetProperty);
            Assert.IsNotNull(retval, "GetValue(ToolTip.VerticalOffsetProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(ToolTip.VerticalOffsetProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(ToolTip.VerticalOffsetProperty) does not match the default value");
            Assert.IsNotNull(ToolTip.PlacementProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: ToolTip.PlacementProperty.ToolTip");
            retval = ToolTip.PlacementProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ToolTip.PlacementProperty should be non-null value");
            Assert.IsInstanceOfType<PlacementMode>(retval, "ToolTip.PlacementProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(PlacementMode.Mouse, retval, "ToolTip.PlacementProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ToolTip.PlacementProperty);
            Assert.IsNotNull(retval, "GetValue(ToolTip.PlacementProperty) should not have returned null");
            Assert.IsInstanceOfType<PlacementMode>(retval, "GetValue(ToolTip.PlacementProperty) is not of the correct type");
            Assert.AreEqual(PlacementMode.Mouse, retval, "GetValue(ToolTip.PlacementProperty) does not match the default value");
            Assert.IsNotNull(ToolTip.PlacementTargetProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: ToolTip.PlacementTargetProperty.ToolTip");
            retval = ToolTip.PlacementTargetProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ToolTip.PlacementTargetProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ToolTip.PlacementTargetProperty);
            Assert.IsNull(retval, "GetValue(ToolTip.PlacementTargetProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_ContentControl ()
        {
            ToolTip widget = new ToolTip ();
            object retval;

            Assert.IsNotNull(ContentControl.ContentTemplateProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: ContentControl.ContentTemplateProperty.ToolTip");
            retval = ContentControl.ContentTemplateProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentTemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentTemplateProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentTemplateProperty) should have returned null");
            Assert.IsNotNull(ContentControl.ContentProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: ContentControl.ContentProperty.ToolTip");
            retval = ContentControl.ContentProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for ContentControl.ContentProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(ContentControl.ContentProperty);
            Assert.IsNull(retval, "GetValue(ContentControl.ContentProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            ToolTip widget = new ToolTip ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: Control.IsTabStopProperty.ToolTip");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: Control.TabIndexProperty.ToolTip");
            retval = Control.TabIndexProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: Control.TemplateProperty.ToolTip");
            retval = Control.TemplateProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: Control.TabNavigationProperty.ToolTip");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: Control.PaddingProperty.ToolTip");
            retval = Control.PaddingProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.ToolTip");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.ToolTip");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: Control.BackgroundProperty.ToolTip");
            retval = Control.BackgroundProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: Control.BorderBrushProperty.ToolTip");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: Control.BorderThicknessProperty.ToolTip");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: Control.FontSizeProperty.ToolTip");
            retval = Control.FontSizeProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: Control.FontFamilyProperty.ToolTip");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: Control.ForegroundProperty.ToolTip");
            retval = Control.ForegroundProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: Control.FontWeightProperty.ToolTip");
            retval = Control.FontWeightProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: Control.FontStyleProperty.ToolTip");
            retval = Control.FontStyleProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: Control.FontStretchProperty.ToolTip");
            retval = Control.FontStretchProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: Control.IsEnabledProperty.ToolTip");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            ToolTip widget = new ToolTip ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: FrameworkElement.LanguageProperty.ToolTip");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.ToolTip");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.ToolTip");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: FrameworkElement.WidthProperty.ToolTip");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: FrameworkElement.HeightProperty.ToolTip");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.ToolTip");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.ToolTip");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.ToolTip");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.ToolTip");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.ToolTip");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.ToolTip");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: FrameworkElement.MarginProperty.ToolTip");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: FrameworkElement.StyleProperty.ToolTip");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.ToolTip");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: FrameworkElement.NameProperty.ToolTip");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: FrameworkElement.TagProperty.ToolTip");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: FrameworkElement.CursorProperty.ToolTip");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: FrameworkElement.DataContextProperty.ToolTip");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            ToolTip widget = new ToolTip ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: UIElement.AllowDropProperty.ToolTip");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: UIElement.OpacityProperty.ToolTip");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: UIElement.ClipProperty.ToolTip");
            retval = UIElement.ClipProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: UIElement.RenderTransformProperty.ToolTip");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: UIElement.EffectProperty.ToolTip");
            retval = UIElement.EffectProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: UIElement.ProjectionProperty.ToolTip");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: UIElement.OpacityMaskProperty.ToolTip");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.ToolTip");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.ToolTip");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: UIElement.VisibilityProperty.ToolTip");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.ToolTip");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (ToolTip)), "#metadata should not be null for: UIElement.CacheModeProperty.ToolTip");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (ToolTip)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_ToolTip ()
        {
            ToolTip widget = new ToolTip ();

            Assert.AreEqual((double) 0, widget.HorizontalOffset, "HorizontalOffset does not match the default value");
            Assert.AreEqual(false, widget.IsOpen, "IsOpen does not match the default value");
            Assert.AreEqual((double) 0, widget.VerticalOffset, "VerticalOffset does not match the default value");
            Assert.AreEqual(PlacementMode.Mouse, widget.Placement, "Placement does not match the default value");
            Assert.IsNull(widget.PlacementTarget, "PlacementTarget should have returned null");
            Assert.IsNull(widget.Content, "Content should have returned null");
            Assert.IsNull(widget.ContentTemplate, "ContentTemplate should have returned null");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            ToolTip widget = new ToolTip ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class VirtualizingStackPanelTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_VirtualizingStackPanel ()
        {
            VirtualizingStackPanel widget = new VirtualizingStackPanel ();
            object retval;

            retval = widget.ReadLocalValue(VirtualizingStackPanel.OrientationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(VirtualizingStackPanel.OrientationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(VirtualizingStackPanel.IsVirtualizingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(VirtualizingStackPanel.IsVirtualizingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(VirtualizingStackPanel.VirtualizationModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(VirtualizingStackPanel.VirtualizationModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Panel ()
        {
            VirtualizingStackPanel widget = new VirtualizingStackPanel ();
            object retval;

            retval = widget.ReadLocalValue(Panel.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Panel.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Panel.IsItemsHostProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Panel.IsItemsHostProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            VirtualizingStackPanel widget = new VirtualizingStackPanel ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            VirtualizingStackPanel widget = new VirtualizingStackPanel ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_VirtualizingStackPanel ()
        {
            VirtualizingStackPanel widget = new VirtualizingStackPanel ();
            object retval;

            Assert.IsNotNull(VirtualizingStackPanel.OrientationProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: VirtualizingStackPanel.OrientationProperty.VirtualizingStackPanel");
            retval = VirtualizingStackPanel.OrientationProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for VirtualizingStackPanel.OrientationProperty should be non-null value");
            Assert.IsInstanceOfType<Orientation>(retval, "VirtualizingStackPanel.OrientationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Orientation.Vertical, retval, "VirtualizingStackPanel.OrientationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(VirtualizingStackPanel.OrientationProperty);
            Assert.IsNotNull(retval, "GetValue(VirtualizingStackPanel.OrientationProperty) should not have returned null");
            Assert.IsInstanceOfType<Orientation>(retval, "GetValue(VirtualizingStackPanel.OrientationProperty) is not of the correct type");
            Assert.AreEqual(Orientation.Vertical, retval, "GetValue(VirtualizingStackPanel.OrientationProperty) does not match the default value");
            Assert.IsNotNull(VirtualizingStackPanel.IsVirtualizingProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: VirtualizingStackPanel.IsVirtualizingProperty.VirtualizingStackPanel");
            retval = VirtualizingStackPanel.IsVirtualizingProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for VirtualizingStackPanel.IsVirtualizingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "VirtualizingStackPanel.IsVirtualizingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "VirtualizingStackPanel.IsVirtualizingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(VirtualizingStackPanel.IsVirtualizingProperty);
            Assert.IsNotNull(retval, "GetValue(VirtualizingStackPanel.IsVirtualizingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(VirtualizingStackPanel.IsVirtualizingProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(VirtualizingStackPanel.IsVirtualizingProperty) does not match the default value");
            Assert.IsNotNull(VirtualizingStackPanel.VirtualizationModeProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: VirtualizingStackPanel.VirtualizationModeProperty.VirtualizingStackPanel");
            retval = VirtualizingStackPanel.VirtualizationModeProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for VirtualizingStackPanel.VirtualizationModeProperty should be non-null value");
            Assert.IsInstanceOfType<VirtualizationMode>(retval, "VirtualizingStackPanel.VirtualizationModeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VirtualizationMode.Recycling, retval, "VirtualizingStackPanel.VirtualizationModeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(VirtualizingStackPanel.VirtualizationModeProperty);
            Assert.IsNotNull(retval, "GetValue(VirtualizingStackPanel.VirtualizationModeProperty) should not have returned null");
            Assert.IsInstanceOfType<VirtualizationMode>(retval, "GetValue(VirtualizingStackPanel.VirtualizationModeProperty) is not of the correct type");
            Assert.AreEqual(VirtualizationMode.Recycling, retval, "GetValue(VirtualizingStackPanel.VirtualizationModeProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Panel ()
        {
            VirtualizingStackPanel widget = new VirtualizingStackPanel ();
            object retval;

            Assert.IsNotNull(Panel.BackgroundProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: Panel.BackgroundProperty.VirtualizingStackPanel");
            retval = Panel.BackgroundProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Panel.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Panel.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Panel.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Panel.IsItemsHostProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: Panel.IsItemsHostProperty.VirtualizingStackPanel");
            retval = Panel.IsItemsHostProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Panel.IsItemsHostProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Panel.IsItemsHostProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "Panel.IsItemsHostProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Panel.IsItemsHostProperty);
            Assert.IsNotNull(retval, "GetValue(Panel.IsItemsHostProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Panel.IsItemsHostProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(Panel.IsItemsHostProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            VirtualizingStackPanel widget = new VirtualizingStackPanel ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: FrameworkElement.LanguageProperty.VirtualizingStackPanel");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.VirtualizingStackPanel");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.VirtualizingStackPanel");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: FrameworkElement.WidthProperty.VirtualizingStackPanel");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: FrameworkElement.HeightProperty.VirtualizingStackPanel");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.VirtualizingStackPanel");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.VirtualizingStackPanel");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.VirtualizingStackPanel");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.VirtualizingStackPanel");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.VirtualizingStackPanel");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.VirtualizingStackPanel");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: FrameworkElement.MarginProperty.VirtualizingStackPanel");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: FrameworkElement.StyleProperty.VirtualizingStackPanel");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.VirtualizingStackPanel");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: FrameworkElement.NameProperty.VirtualizingStackPanel");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: FrameworkElement.TagProperty.VirtualizingStackPanel");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: FrameworkElement.CursorProperty.VirtualizingStackPanel");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: FrameworkElement.DataContextProperty.VirtualizingStackPanel");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            VirtualizingStackPanel widget = new VirtualizingStackPanel ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: UIElement.AllowDropProperty.VirtualizingStackPanel");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: UIElement.OpacityProperty.VirtualizingStackPanel");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: UIElement.ClipProperty.VirtualizingStackPanel");
            retval = UIElement.ClipProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: UIElement.RenderTransformProperty.VirtualizingStackPanel");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: UIElement.EffectProperty.VirtualizingStackPanel");
            retval = UIElement.EffectProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: UIElement.ProjectionProperty.VirtualizingStackPanel");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: UIElement.OpacityMaskProperty.VirtualizingStackPanel");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.VirtualizingStackPanel");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.VirtualizingStackPanel");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: UIElement.VisibilityProperty.VirtualizingStackPanel");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.VirtualizingStackPanel");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (VirtualizingStackPanel)), "#metadata should not be null for: UIElement.CacheModeProperty.VirtualizingStackPanel");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (VirtualizingStackPanel)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_VirtualizingStackPanel ()
        {
            VirtualizingStackPanel widget = new VirtualizingStackPanel ();

            Assert.AreEqual(Orientation.Vertical, widget.Orientation, "Orientation does not match the default value");
            Assert.AreEqual(false, widget.CanHorizontallyScroll, "CanHorizontallyScroll does not match the default value");
            Assert.AreEqual(false, widget.CanVerticallyScroll, "CanVerticallyScroll does not match the default value");
            Assert.AreEqual((double) 0, widget.ExtentWidth, "ExtentWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ExtentHeight, "ExtentHeight does not match the default value");
            Assert.AreEqual((double) 0, widget.ViewportWidth, "ViewportWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ViewportHeight, "ViewportHeight does not match the default value");
            Assert.AreEqual((double) 0, widget.HorizontalOffset, "HorizontalOffset does not match the default value");
            Assert.AreEqual((double) 0, widget.VerticalOffset, "VerticalOffset does not match the default value");
            Assert.IsNull(widget.ScrollOwner, "ScrollOwner should have returned null");
            // exception generating test for ItemContainerGenerator
            Assert.IsNotNull(widget.Children, "Children should not have returned null");
            Assert.IsInstanceOfType<UIElementCollection>(widget.Children, "Children is not of the correct type");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.AreEqual(false, widget.IsItemsHost, "IsItemsHost does not match the default value");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        public void Test_PropertyGetter_VirtualizingPanel ()
        {
            VirtualizingStackPanel widget = new VirtualizingStackPanel ();

            // exception generating test for ItemContainerGenerator
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            VirtualizingStackPanel widget = new VirtualizingStackPanel ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Controls
{
    [TestClass]
    public partial class ProgressBarTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ProgressBar ()
        {
            ProgressBar widget = new ProgressBar ();
            object retval;

            retval = widget.ReadLocalValue(ProgressBar.IsIndeterminateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ProgressBar.IsIndeterminateProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_RangeBase ()
        {
            ProgressBar widget = new ProgressBar ();
            object retval;

            retval = widget.ReadLocalValue(RangeBase.MinimumProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.MinimumProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RangeBase.MaximumProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.MaximumProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RangeBase.LargeChangeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.LargeChangeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RangeBase.SmallChangeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.SmallChangeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(RangeBase.ValueProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(RangeBase.ValueProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_Control ()
        {
            ProgressBar widget = new ProgressBar ();
            object retval;

            retval = widget.ReadLocalValue(Control.IsTabStopProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsTabStopProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabIndexProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabIndexProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TemplateProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TemplateProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.TabNavigationProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.TabNavigationProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.PaddingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.PaddingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.HorizontalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.HorizontalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.VerticalContentAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.VerticalContentAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BackgroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BackgroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderBrushProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderBrushProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.BorderThicknessProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.BorderThicknessProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontSizeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontSizeProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontFamilyProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontFamilyProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.ForegroundProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.ForegroundProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontWeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontWeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.FontStretchProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.FontStretchProperty) should not have a value by default");
            retval = widget.ReadLocalValue(Control.IsEnabledProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(Control.IsEnabledProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_FrameworkElement ()
        {
            ProgressBar widget = new ProgressBar ();
            object retval;

            retval = widget.ReadLocalValue(FrameworkElement.LanguageProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.LanguageProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.ActualHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.ActualHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.WidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.WidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxWidthProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxWidthProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MinHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MinHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MaxHeightProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MaxHeightProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.HorizontalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.VerticalAlignmentProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.MarginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.MarginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.StyleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.StyleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.FlowDirectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.FlowDirectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.NameProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.TagProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.TagProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.CursorProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.CursorProperty) should not have a value by default");
            retval = widget.ReadLocalValue(FrameworkElement.DataContextProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(FrameworkElement.DataContextProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_ReadLocalValue_UIElement ()
        {
            ProgressBar widget = new ProgressBar ();
            object retval;

            retval = widget.ReadLocalValue(UIElement.AllowDropProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.AllowDropProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ClipProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ClipProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.EffectProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.EffectProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.ProjectionProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.ProjectionProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.OpacityMaskProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.OpacityMaskProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.RenderTransformOriginProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.RenderTransformOriginProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.IsHitTestVisibleProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.IsHitTestVisibleProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.VisibilityProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.VisibilityProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.UseLayoutRoundingProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.UseLayoutRoundingProperty) should not have a value by default");
            retval = widget.ReadLocalValue(UIElement.CacheModeProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(UIElement.CacheModeProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ProgressBar ()
        {
            ProgressBar widget = new ProgressBar ();
            object retval;

            Assert.IsNotNull(ProgressBar.IsIndeterminateProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: ProgressBar.IsIndeterminateProperty.ProgressBar");
            retval = ProgressBar.IsIndeterminateProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ProgressBar.IsIndeterminateProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "ProgressBar.IsIndeterminateProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "ProgressBar.IsIndeterminateProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ProgressBar.IsIndeterminateProperty);
            Assert.IsNotNull(retval, "GetValue(ProgressBar.IsIndeterminateProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(ProgressBar.IsIndeterminateProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(ProgressBar.IsIndeterminateProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_RangeBase ()
        {
            ProgressBar widget = new ProgressBar ();
            object retval;

            Assert.IsNotNull(RangeBase.MinimumProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: RangeBase.MinimumProperty.ProgressBar");
            retval = RangeBase.MinimumProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RangeBase.MinimumProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RangeBase.MinimumProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "RangeBase.MinimumProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RangeBase.MinimumProperty);
            Assert.IsNotNull(retval, "GetValue(RangeBase.MinimumProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RangeBase.MinimumProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(RangeBase.MinimumProperty) does not match the default value");
            Assert.IsNotNull(RangeBase.MaximumProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: RangeBase.MaximumProperty.ProgressBar");
            retval = RangeBase.MaximumProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RangeBase.MaximumProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RangeBase.MaximumProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "RangeBase.MaximumProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RangeBase.MaximumProperty);
            Assert.IsNotNull(retval, "GetValue(RangeBase.MaximumProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RangeBase.MaximumProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(RangeBase.MaximumProperty) does not match the default value");
            Assert.IsNotNull(RangeBase.LargeChangeProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: RangeBase.LargeChangeProperty.ProgressBar");
            retval = RangeBase.LargeChangeProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RangeBase.LargeChangeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RangeBase.LargeChangeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "RangeBase.LargeChangeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RangeBase.LargeChangeProperty);
            Assert.IsNotNull(retval, "GetValue(RangeBase.LargeChangeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RangeBase.LargeChangeProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(RangeBase.LargeChangeProperty) does not match the default value");
            Assert.IsNotNull(RangeBase.SmallChangeProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: RangeBase.SmallChangeProperty.ProgressBar");
            retval = RangeBase.SmallChangeProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RangeBase.SmallChangeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RangeBase.SmallChangeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0.1, retval, "RangeBase.SmallChangeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RangeBase.SmallChangeProperty);
            Assert.IsNotNull(retval, "GetValue(RangeBase.SmallChangeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RangeBase.SmallChangeProperty) is not of the correct type");
            Assert.AreEqual((double) 0.1, retval, "GetValue(RangeBase.SmallChangeProperty) does not match the default value");
            Assert.IsNotNull(RangeBase.ValueProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: RangeBase.ValueProperty.ProgressBar");
            retval = RangeBase.ValueProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for RangeBase.ValueProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "RangeBase.ValueProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "RangeBase.ValueProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(RangeBase.ValueProperty);
            Assert.IsNotNull(retval, "GetValue(RangeBase.ValueProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(RangeBase.ValueProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(RangeBase.ValueProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_Control ()
        {
            ProgressBar widget = new ProgressBar ();
            object retval;

            Assert.IsNotNull(Control.IsTabStopProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: Control.IsTabStopProperty.ProgressBar");
            retval = Control.IsTabStopProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsTabStopProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsTabStopProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsTabStopProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsTabStopProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsTabStopProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsTabStopProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsTabStopProperty) does not match the default value");
            Assert.IsNotNull(Control.TabIndexProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: Control.TabIndexProperty.ProgressBar");
            retval = Control.TabIndexProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabIndexProperty should be non-null value");
            Assert.IsInstanceOfType<int>(retval, "Control.TabIndexProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(2147483647, retval, "Control.TabIndexProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabIndexProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabIndexProperty) should not have returned null");
            Assert.IsInstanceOfType<int>(retval, "GetValue(Control.TabIndexProperty) is not of the correct type");
            Assert.AreEqual(2147483647, retval, "GetValue(Control.TabIndexProperty) does not match the default value");
            Assert.IsNotNull(Control.TemplateProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: Control.TemplateProperty.ProgressBar");
            retval = Control.TemplateProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.TemplateProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.TemplateProperty);
            Assert.IsNull(retval, "GetValue(Control.TemplateProperty) should have returned null");
            Assert.IsNotNull(Control.TabNavigationProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: Control.TabNavigationProperty.ProgressBar");
            retval = Control.TabNavigationProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.TabNavigationProperty should be non-null value");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "Control.TabNavigationProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "Control.TabNavigationProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.TabNavigationProperty);
            Assert.IsNotNull(retval, "GetValue(Control.TabNavigationProperty) should not have returned null");
            Assert.IsInstanceOfType<KeyboardNavigationMode>(retval, "GetValue(Control.TabNavigationProperty) is not of the correct type");
            Assert.AreEqual(KeyboardNavigationMode.Local, retval, "GetValue(Control.TabNavigationProperty) does not match the default value");
            Assert.IsNotNull(Control.PaddingProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: Control.PaddingProperty.ProgressBar");
            retval = Control.PaddingProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.PaddingProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.PaddingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.PaddingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.PaddingProperty);
            Assert.IsNotNull(retval, "GetValue(Control.PaddingProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.PaddingProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.PaddingProperty) does not match the default value");
            Assert.IsNotNull(Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: Control.HorizontalContentAlignmentProperty.ProgressBar");
            retval = Control.HorizontalContentAlignmentProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.HorizontalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "Control.HorizontalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.HorizontalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.HorizontalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(Control.HorizontalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Center, retval, "GetValue(Control.HorizontalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: Control.VerticalContentAlignmentProperty.ProgressBar");
            retval = Control.VerticalContentAlignmentProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.VerticalContentAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "Control.VerticalContentAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "Control.VerticalContentAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.VerticalContentAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(Control.VerticalContentAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(Control.VerticalContentAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Center, retval, "GetValue(Control.VerticalContentAlignmentProperty) does not match the default value");
            Assert.IsNotNull(Control.BackgroundProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: Control.BackgroundProperty.ProgressBar");
            retval = Control.BackgroundProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BackgroundProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BackgroundProperty);
            Assert.IsNull(retval, "GetValue(Control.BackgroundProperty) should have returned null");
            Assert.IsNotNull(Control.BorderBrushProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: Control.BorderBrushProperty.ProgressBar");
            retval = Control.BorderBrushProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for Control.BorderBrushProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(Control.BorderBrushProperty);
            Assert.IsNull(retval, "GetValue(Control.BorderBrushProperty) should have returned null");
            Assert.IsNotNull(Control.BorderThicknessProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: Control.BorderThicknessProperty.ProgressBar");
            retval = Control.BorderThicknessProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.BorderThicknessProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "Control.BorderThicknessProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "Control.BorderThicknessProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.BorderThicknessProperty);
            Assert.IsNotNull(retval, "GetValue(Control.BorderThicknessProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(Control.BorderThicknessProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(Control.BorderThicknessProperty) does not match the default value");
            Assert.IsNotNull(Control.FontSizeProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: Control.FontSizeProperty.ProgressBar");
            retval = Control.FontSizeProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontSizeProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "Control.FontSizeProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 11, retval, "Control.FontSizeProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontSizeProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontSizeProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(Control.FontSizeProperty) is not of the correct type");
            Assert.AreEqual((double) 11, retval, "GetValue(Control.FontSizeProperty) does not match the default value");
            Assert.IsNotNull(Control.FontFamilyProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: Control.FontFamilyProperty.ProgressBar");
            retval = Control.FontFamilyProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontFamilyProperty should be non-null value");
            Assert.IsInstanceOfType<FontFamily>(retval, "Control.FontFamilyProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "Control.FontFamilyProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontFamilyProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontFamilyProperty) should not have returned null");
            Assert.IsInstanceOfType<FontFamily>(retval, "GetValue(Control.FontFamilyProperty) is not of the correct type");
            Assert.AreEqual("Portable User Interface", retval.ToString (), "GetValue(Control.FontFamilyProperty) does not match the default value");
            Assert.IsNotNull(Control.ForegroundProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: Control.ForegroundProperty.ProgressBar");
            retval = Control.ForegroundProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.ForegroundProperty should be non-null value");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "Control.ForegroundProperty.GetMetadata() is not of the correct type");
            retval = widget.GetValue(Control.ForegroundProperty);
            Assert.IsNotNull(retval, "GetValue(Control.ForegroundProperty) should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(retval, "GetValue(Control.ForegroundProperty) is not of the correct type");
            Assert.IsNotNull(Control.FontWeightProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: Control.FontWeightProperty.ProgressBar");
            retval = Control.FontWeightProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontWeightProperty should be non-null value");
            Assert.IsInstanceOfType<FontWeight>(retval, "Control.FontWeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontWeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontWeightProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontWeightProperty) should not have returned null");
            Assert.IsInstanceOfType<FontWeight>(retval, "GetValue(Control.FontWeightProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontWeightProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStyleProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: Control.FontStyleProperty.ProgressBar");
            retval = Control.FontStyleProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStyleProperty should be non-null value");
            Assert.IsInstanceOfType<FontStyle>(retval, "Control.FontStyleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStyleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStyleProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStyleProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStyle>(retval, "GetValue(Control.FontStyleProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStyleProperty) does not match the default value");
            Assert.IsNotNull(Control.FontStretchProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: Control.FontStretchProperty.ProgressBar");
            retval = Control.FontStretchProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.FontStretchProperty should be non-null value");
            Assert.IsInstanceOfType<FontStretch>(retval, "Control.FontStretchProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "Control.FontStretchProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.FontStretchProperty);
            Assert.IsNotNull(retval, "GetValue(Control.FontStretchProperty) should not have returned null");
            Assert.IsInstanceOfType<FontStretch>(retval, "GetValue(Control.FontStretchProperty) is not of the correct type");
            Assert.AreEqual("Normal", retval.ToString (), "GetValue(Control.FontStretchProperty) does not match the default value");
            Assert.IsNotNull(Control.IsEnabledProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: Control.IsEnabledProperty.ProgressBar");
            retval = Control.IsEnabledProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for Control.IsEnabledProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "Control.IsEnabledProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "Control.IsEnabledProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(Control.IsEnabledProperty);
            Assert.IsNotNull(retval, "GetValue(Control.IsEnabledProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(Control.IsEnabledProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(Control.IsEnabledProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_GetValue_FrameworkElement ()
        {
            ProgressBar widget = new ProgressBar ();
            object retval;

            Assert.IsNotNull(FrameworkElement.LanguageProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: FrameworkElement.LanguageProperty.ProgressBar");
            retval = FrameworkElement.LanguageProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.LanguageProperty should be non-null value");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "FrameworkElement.LanguageProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "FrameworkElement.LanguageProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.LanguageProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.LanguageProperty) should not have returned null");
            Assert.IsInstanceOfType<XmlLanguage>(retval, "GetValue(FrameworkElement.LanguageProperty) is not of the correct type");
            Assert.AreEqual("en-us", ((XmlLanguage) retval).IetfLanguageTag, "GetValue(FrameworkElement.LanguageProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: FrameworkElement.ActualWidthProperty.ProgressBar");
            retval = FrameworkElement.ActualWidthProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: FrameworkElement.ActualHeightProperty.ProgressBar");
            retval = FrameworkElement.ActualHeightProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.ActualHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.ActualHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.ActualHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.ActualHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.ActualHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.ActualHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.ActualHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.WidthProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: FrameworkElement.WidthProperty.ProgressBar");
            retval = FrameworkElement.WidthProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.WidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.WidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.WidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.WidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.WidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.WidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.WidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HeightProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: FrameworkElement.HeightProperty.ProgressBar");
            retval = FrameworkElement.HeightProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.HeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "FrameworkElement.HeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.HeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsNaN((double) retval), "GetValue(FrameworkElement.HeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinWidthProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: FrameworkElement.MinWidthProperty.ProgressBar");
            retval = FrameworkElement.MinWidthProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinWidthProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinWidthProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: FrameworkElement.MaxWidthProperty.ProgressBar");
            retval = FrameworkElement.MaxWidthProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxWidthProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxWidthProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxWidthProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxWidthProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxWidthProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxWidthProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxWidthProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MinHeightProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: FrameworkElement.MinHeightProperty.ProgressBar");
            retval = FrameworkElement.MinHeightProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MinHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MinHeightProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 0, retval, "FrameworkElement.MinHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MinHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MinHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MinHeightProperty) is not of the correct type");
            Assert.AreEqual((double) 0, retval, "GetValue(FrameworkElement.MinHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: FrameworkElement.MaxHeightProperty.ProgressBar");
            retval = FrameworkElement.MaxHeightProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MaxHeightProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "FrameworkElement.MaxHeightProperty.GetMetadata() is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "FrameworkElement.MaxHeightProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MaxHeightProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MaxHeightProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(FrameworkElement.MaxHeightProperty) is not of the correct type");
            Assert.IsTrue(Double.IsPositiveInfinity((double) retval), "GetValue(FrameworkElement.MaxHeightProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: FrameworkElement.HorizontalAlignmentProperty.ProgressBar");
            retval = FrameworkElement.HorizontalAlignmentProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.HorizontalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "FrameworkElement.HorizontalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.HorizontalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<HorizontalAlignment>(retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(HorizontalAlignment.Stretch, retval, "GetValue(FrameworkElement.HorizontalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: FrameworkElement.VerticalAlignmentProperty.ProgressBar");
            retval = FrameworkElement.VerticalAlignmentProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.VerticalAlignmentProperty should be non-null value");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "FrameworkElement.VerticalAlignmentProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.VerticalAlignmentProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) should not have returned null");
            Assert.IsInstanceOfType<VerticalAlignment>(retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) is not of the correct type");
            Assert.AreEqual(VerticalAlignment.Stretch, retval, "GetValue(FrameworkElement.VerticalAlignmentProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.MarginProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: FrameworkElement.MarginProperty.ProgressBar");
            retval = FrameworkElement.MarginProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.MarginProperty should be non-null value");
            Assert.IsInstanceOfType<Thickness>(retval, "FrameworkElement.MarginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "FrameworkElement.MarginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.MarginProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.MarginProperty) should not have returned null");
            Assert.IsInstanceOfType<Thickness>(retval, "GetValue(FrameworkElement.MarginProperty) is not of the correct type");
            Assert.AreEqual("0,0,0,0", retval.ToString (), "GetValue(FrameworkElement.MarginProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.StyleProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: FrameworkElement.StyleProperty.ProgressBar");
            retval = FrameworkElement.StyleProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.StyleProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.StyleProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.StyleProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: FrameworkElement.FlowDirectionProperty.ProgressBar");
            retval = FrameworkElement.FlowDirectionProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.FlowDirectionProperty should be non-null value");
            Assert.IsInstanceOfType<FlowDirection>(retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "FrameworkElement.FlowDirectionProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.FlowDirectionProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.FlowDirectionProperty) should not have returned null");
            Assert.IsInstanceOfType<FlowDirection>(retval, "GetValue(FrameworkElement.FlowDirectionProperty) is not of the correct type");
            Assert.AreEqual(FlowDirection.LeftToRight, retval, "GetValue(FrameworkElement.FlowDirectionProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.NameProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: FrameworkElement.NameProperty.ProgressBar");
            retval = FrameworkElement.NameProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for FrameworkElement.NameProperty should be non-null value");
            Assert.IsInstanceOfType<string>(retval, "FrameworkElement.NameProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval, "FrameworkElement.NameProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.IsNotNull(retval, "GetValue(FrameworkElement.NameProperty) should not have returned null");
            Assert.IsInstanceOfType<string>(retval, "GetValue(FrameworkElement.NameProperty) is not of the correct type");
            Assert.AreEqual("", retval, "GetValue(FrameworkElement.NameProperty) does not match the default value");
            Assert.IsNotNull(FrameworkElement.TagProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: FrameworkElement.TagProperty.ProgressBar");
            retval = FrameworkElement.TagProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.TagProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.TagProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.TagProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.CursorProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: FrameworkElement.CursorProperty.ProgressBar");
            retval = FrameworkElement.CursorProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.CursorProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.CursorProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.CursorProperty) should have returned null");
            Assert.IsNotNull(FrameworkElement.DataContextProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: FrameworkElement.DataContextProperty.ProgressBar");
            retval = FrameworkElement.DataContextProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for FrameworkElement.DataContextProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(FrameworkElement.DataContextProperty);
            Assert.IsNull(retval, "GetValue(FrameworkElement.DataContextProperty) should have returned null");
        }

        [TestMethod]
        public void Test_GetValue_UIElement ()
        {
            ProgressBar widget = new ProgressBar ();
            object retval;

            Assert.IsNotNull(UIElement.AllowDropProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: UIElement.AllowDropProperty.ProgressBar");
            retval = UIElement.AllowDropProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.AllowDropProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.AllowDropProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(false, retval, "UIElement.AllowDropProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.AllowDropProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.AllowDropProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.AllowDropProperty) is not of the correct type");
            Assert.AreEqual(false, retval, "GetValue(UIElement.AllowDropProperty) does not match the default value");
            Assert.IsNotNull(UIElement.OpacityProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: UIElement.OpacityProperty.ProgressBar");
            retval = UIElement.OpacityProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.OpacityProperty should be non-null value");
            Assert.IsInstanceOfType<double>(retval, "UIElement.OpacityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual((double) 1, retval, "UIElement.OpacityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.OpacityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.OpacityProperty) should not have returned null");
            Assert.IsInstanceOfType<double>(retval, "GetValue(UIElement.OpacityProperty) is not of the correct type");
            Assert.AreEqual((double) 1, retval, "GetValue(UIElement.OpacityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.ClipProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: UIElement.ClipProperty.ProgressBar");
            retval = UIElement.ClipProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ClipProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ClipProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ClipProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: UIElement.RenderTransformProperty.ProgressBar");
            retval = UIElement.RenderTransformProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.RenderTransformProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.RenderTransformProperty);
            Assert.IsNull(retval, "GetValue(UIElement.RenderTransformProperty) should have returned null");
            Assert.IsNotNull(UIElement.EffectProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: UIElement.EffectProperty.ProgressBar");
            retval = UIElement.EffectProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.EffectProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.EffectProperty);
            Assert.IsNull(retval, "GetValue(UIElement.EffectProperty) should have returned null");
            Assert.IsNotNull(UIElement.ProjectionProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: UIElement.ProjectionProperty.ProgressBar");
            retval = UIElement.ProjectionProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.ProjectionProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.ProjectionProperty);
            Assert.IsNull(retval, "GetValue(UIElement.ProjectionProperty) should have returned null");
            Assert.IsNotNull(UIElement.OpacityMaskProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: UIElement.OpacityMaskProperty.ProgressBar");
            retval = UIElement.OpacityMaskProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.OpacityMaskProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.OpacityMaskProperty);
            Assert.IsNull(retval, "GetValue(UIElement.OpacityMaskProperty) should have returned null");
            Assert.IsNotNull(UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: UIElement.RenderTransformOriginProperty.ProgressBar");
            retval = UIElement.RenderTransformOriginProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.RenderTransformOriginProperty should be non-null value");
            Assert.IsInstanceOfType<Point>(retval, "UIElement.RenderTransformOriginProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "UIElement.RenderTransformOriginProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.RenderTransformOriginProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.RenderTransformOriginProperty) should not have returned null");
            Assert.IsInstanceOfType<Point>(retval, "GetValue(UIElement.RenderTransformOriginProperty) is not of the correct type");
            Assert.AreEqual("0,0", retval.ToString (), "GetValue(UIElement.RenderTransformOriginProperty) does not match the default value");
            Assert.IsNotNull(UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: UIElement.IsHitTestVisibleProperty.ProgressBar");
            retval = UIElement.IsHitTestVisibleProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.IsHitTestVisibleProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.IsHitTestVisibleProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.IsHitTestVisibleProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.IsHitTestVisibleProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.IsHitTestVisibleProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.IsHitTestVisibleProperty) does not match the default value");
            Assert.IsNotNull(UIElement.VisibilityProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: UIElement.VisibilityProperty.ProgressBar");
            retval = UIElement.VisibilityProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.VisibilityProperty should be non-null value");
            Assert.IsInstanceOfType<Visibility>(retval, "UIElement.VisibilityProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "UIElement.VisibilityProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.VisibilityProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.VisibilityProperty) should not have returned null");
            Assert.IsInstanceOfType<Visibility>(retval, "GetValue(UIElement.VisibilityProperty) is not of the correct type");
            Assert.AreEqual(Visibility.Visible, retval, "GetValue(UIElement.VisibilityProperty) does not match the default value");
            Assert.IsNotNull(UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: UIElement.UseLayoutRoundingProperty.ProgressBar");
            retval = UIElement.UseLayoutRoundingProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for UIElement.UseLayoutRoundingProperty should be non-null value");
            Assert.IsInstanceOfType<bool>(retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual(true, retval, "UIElement.UseLayoutRoundingProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(UIElement.UseLayoutRoundingProperty);
            Assert.IsNotNull(retval, "GetValue(UIElement.UseLayoutRoundingProperty) should not have returned null");
            Assert.IsInstanceOfType<bool>(retval, "GetValue(UIElement.UseLayoutRoundingProperty) is not of the correct type");
            Assert.AreEqual(true, retval, "GetValue(UIElement.UseLayoutRoundingProperty) does not match the default value");
            Assert.IsNotNull(UIElement.CacheModeProperty.GetMetadata (typeof (ProgressBar)), "#metadata should not be null for: UIElement.CacheModeProperty.ProgressBar");
            retval = UIElement.CacheModeProperty.GetMetadata (typeof (ProgressBar)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for UIElement.CacheModeProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(UIElement.CacheModeProperty);
            Assert.IsNull(retval, "GetValue(UIElement.CacheModeProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_ProgressBar ()
        {
            ProgressBar widget = new ProgressBar ();

            Assert.AreEqual(false, widget.IsIndeterminate, "IsIndeterminate does not match the default value");
            Assert.AreEqual((double) 0, widget.Minimum, "Minimum does not match the default value");
            Assert.AreEqual((double) 1, widget.Maximum, "Maximum does not match the default value");
            Assert.AreEqual((double) 1, widget.LargeChange, "LargeChange does not match the default value");
            Assert.AreEqual((double) 0.1, widget.SmallChange, "SmallChange does not match the default value");
            Assert.AreEqual((double) 0, widget.Value, "Value does not match the default value");
            Assert.AreEqual(true, widget.IsTabStop, "IsTabStop does not match the default value");
            Assert.AreEqual(true, widget.IsEnabled, "IsEnabled does not match the default value");
            Assert.AreEqual(2147483647, widget.TabIndex, "TabIndex does not match the default value");
            Assert.AreEqual(KeyboardNavigationMode.Local, widget.TabNavigation, "TabNavigation does not match the default value");
            Assert.IsNull(widget.Template, "Template should have returned null");
            Assert.AreEqual("0,0,0,0", widget.Padding.ToString (), "Padding does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.BorderThickness.ToString (), "BorderThickness does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Center, widget.HorizontalContentAlignment, "HorizontalContentAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Center, widget.VerticalContentAlignment, "VerticalContentAlignment does not match the default value");
            Assert.IsNull(widget.Background, "Background should have returned null");
            Assert.IsNull(widget.BorderBrush, "BorderBrush should have returned null");
            Assert.IsNotNull(widget.FontFamily, "FontFamily should not have returned null");
            Assert.AreEqual("Portable User Interface", widget.FontFamily.ToString (), "FontFamily does not match the default value");
            Assert.AreEqual((double) 11, widget.FontSize, "FontSize does not match the default value");
            Assert.AreEqual("Normal", widget.FontStretch.ToString (), "FontStretch does not match the default value");
            Assert.AreEqual("Normal", widget.FontStyle.ToString (), "FontStyle does not match the default value");
            Assert.AreEqual("Normal", widget.FontWeight.ToString (), "FontWeight does not match the default value");
            Assert.IsNotNull(widget.Foreground, "Foreground should not have returned null");
            Assert.IsInstanceOfType<SolidColorBrush>(widget.Foreground, "Foreground is not of the correct type");
            Assert.IsNotNull(widget.Triggers, "Triggers should not have returned null");
            Assert.IsInstanceOfType<TriggerCollection>(widget.Triggers, "Triggers is not of the correct type");
            Assert.IsNotNull(widget.Resources, "Resources should not have returned null");
            Assert.IsInstanceOfType<ResourceDictionary>(widget.Resources, "Resources is not of the correct type");
            Assert.AreEqual((double) 0, widget.ActualWidth, "ActualWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.ActualHeight, "ActualHeight does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Width), "Width does not match the default value");
            Assert.IsTrue(Double.IsNaN((double) widget.Height), "Height does not match the default value");
            Assert.AreEqual((double) 0, widget.MinWidth, "MinWidth does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxWidth), "MaxWidth does not match the default value");
            Assert.AreEqual((double) 0, widget.MinHeight, "MinHeight does not match the default value");
            Assert.IsTrue(Double.IsPositiveInfinity((double) widget.MaxHeight), "MaxHeight does not match the default value");
            Assert.AreEqual(HorizontalAlignment.Stretch, widget.HorizontalAlignment, "HorizontalAlignment does not match the default value");
            Assert.AreEqual(VerticalAlignment.Stretch, widget.VerticalAlignment, "VerticalAlignment does not match the default value");
            Assert.AreEqual("0,0,0,0", widget.Margin.ToString (), "Margin does not match the default value");
            Assert.IsNull(widget.Style, "Style should have returned null");
            Assert.IsNull(widget.Parent, "Parent should have returned null");
            Assert.AreEqual(FlowDirection.LeftToRight, widget.FlowDirection, "FlowDirection does not match the default value");
            Assert.IsNotNull(widget.Name, "Name should not have returned null");
            Assert.AreEqual("", widget.Name, "Name does not match the default value");
            Assert.IsNull(widget.Tag, "Tag should have returned null");
            Assert.IsNull(widget.Cursor, "Cursor should have returned null");
            Assert.IsNotNull(widget.Language, "Language should not have returned null");
            Assert.AreEqual("en-us", widget.Language.IetfLanguageTag, "Language does not match the default value");
            Assert.IsNull(widget.DataContext, "DataContext should have returned null");
            Assert.AreEqual(false, widget.AllowDrop, "AllowDrop does not match the default value");
            Assert.AreEqual((double) 1, widget.Opacity, "Opacity does not match the default value");
            Assert.IsNull(widget.Clip, "Clip should have returned null");
            Assert.IsNull(widget.Effect, "Effect should have returned null");
            Assert.IsNull(widget.Projection, "Projection should have returned null");
            Assert.IsNull(widget.OpacityMask, "OpacityMask should have returned null");
            Assert.AreEqual("0,0", widget.RenderTransformOrigin.ToString (), "RenderTransformOrigin does not match the default value");
            Assert.AreEqual(true, widget.IsHitTestVisible, "IsHitTestVisible does not match the default value");
            Assert.AreEqual(Visibility.Visible, widget.Visibility, "Visibility does not match the default value");
            Assert.AreEqual("0,0", widget.RenderSize.ToString (), "RenderSize does not match the default value");
            Assert.AreEqual(true, widget.UseLayoutRounding, "UseLayoutRounding does not match the default value");
            Assert.IsNull(widget.CacheMode, "CacheMode should have returned null");
            Assert.AreEqual("0,0", widget.DesiredSize.ToString (), "DesiredSize does not match the default value");
            Assert.IsNotNull(widget.RenderTransform, "RenderTransform should not have returned null");
            Assert.IsInstanceOfType<MatrixTransform>(widget.RenderTransform, "RenderTransform is not of the correct type");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_SetStringValue_FrameworkElement ()
        {
            ProgressBar widget = new ProgressBar ();
            object retval;

            widget.SetValue(FrameworkElement.NameProperty, "some text");
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual("some text", retval, "GetValue(FrameworkElement.NameProperty) should have returned 'some text'");
            widget.SetValue(FrameworkElement.NameProperty, null);
            retval = widget.GetValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "GetValue(FrameworkElement.NameProperty) should have returned String.Empty");
            retval = widget.ReadLocalValue(FrameworkElement.NameProperty);
            Assert.AreEqual(String.Empty, retval, "ReadLocalValue(FrameworkElement.NameProperty) should have returned String.Empty");
        }

    }
}
namespace MoonTest.System.Windows.Data
{
    [TestClass]
    public partial class CollectionViewSourceTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_CollectionViewSource ()
        {
            CollectionViewSource widget = new CollectionViewSource ();
            object retval;

            retval = widget.ReadLocalValue(CollectionViewSource.ViewProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(CollectionViewSource.ViewProperty) should not have a value by default");
            retval = widget.ReadLocalValue(CollectionViewSource.SourceProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(CollectionViewSource.SourceProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_CollectionViewSource ()
        {
            CollectionViewSource widget = new CollectionViewSource ();
            object retval;

            Assert.IsNotNull(CollectionViewSource.ViewProperty.GetMetadata (typeof (CollectionViewSource)), "#metadata should not be null for: CollectionViewSource.ViewProperty.CollectionViewSource");
            retval = CollectionViewSource.ViewProperty.GetMetadata (typeof (CollectionViewSource)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for CollectionViewSource.ViewProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(CollectionViewSource.ViewProperty);
            Assert.IsNull(retval, "GetValue(CollectionViewSource.ViewProperty) should have returned null");
            Assert.IsNotNull(CollectionViewSource.SourceProperty.GetMetadata (typeof (CollectionViewSource)), "#metadata should not be null for: CollectionViewSource.SourceProperty.CollectionViewSource");
            retval = CollectionViewSource.SourceProperty.GetMetadata (typeof (CollectionViewSource)).DefaultValue;
            Assert.AreSame(retval, DependencyProperty.UnsetValue, "PropertyMetadata.DefaultValue for CollectionViewSource.SourceProperty should be DP.UnsetValue but was '{0}'", retval);
            retval = widget.GetValue(CollectionViewSource.SourceProperty);
            Assert.IsNull(retval, "GetValue(CollectionViewSource.SourceProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_CollectionViewSource ()
        {
            CollectionViewSource widget = new CollectionViewSource ();

            Assert.IsNull(widget.View, "View should have returned null");
            Assert.IsNull(widget.Source, "Source should have returned null");
            Assert.IsNull(widget.Culture, "Culture should have returned null");
            Assert.IsNotNull(widget.SortDescriptions, "SortDescriptions should not have returned null");
            Assert.AreEqual("System.ComponentModel.SortDescriptionCollection", widget.SortDescriptions.ToString (), "SortDescriptions does not match the default value");
            Assert.IsNotNull(widget.GroupDescriptions, "GroupDescriptions should not have returned null");
        }

    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class ExternalPartTest
    {
        [TestMethod]
        public void Test_PropertyGetter_ExternalPart ()
        {
            ExternalPart widget = new ExternalPart ();

            Assert.IsNull(widget.Source, "Source should have returned null");
        }

    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class ExtensionPartTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_ExtensionPart ()
        {
            ExtensionPart widget = new ExtensionPart ();
            object retval;

            retval = widget.ReadLocalValue(ExtensionPart.SourceProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(ExtensionPart.SourceProperty) should not have a value by default");
        }

        [TestMethod]
        public void Test_GetValue_ExtensionPart ()
        {
            ExtensionPart widget = new ExtensionPart ();
            object retval;

            Assert.IsNotNull(ExtensionPart.SourceProperty.GetMetadata (typeof (ExtensionPart)), "#metadata should not be null for: ExtensionPart.SourceProperty.ExtensionPart");
            retval = ExtensionPart.SourceProperty.GetMetadata (typeof (ExtensionPart)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for ExtensionPart.SourceProperty should be non-null value");
            Assert.IsInstanceOfType<Uri>(retval, "ExtensionPart.SourceProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval.ToString (), "ExtensionPart.SourceProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(ExtensionPart.SourceProperty);
            Assert.IsNotNull(retval, "GetValue(ExtensionPart.SourceProperty) should not have returned null");
            Assert.IsInstanceOfType<Uri>(retval, "GetValue(ExtensionPart.SourceProperty) is not of the correct type");
            Assert.AreEqual("", retval.ToString (), "GetValue(ExtensionPart.SourceProperty) does not match the default value");
        }

        [TestMethod]
        public void Test_PropertyGetter_ExtensionPart ()
        {
            ExtensionPart widget = new ExtensionPart ();

            Assert.IsNotNull(widget.Source, "Source should not have returned null");
            Assert.AreEqual("", widget.Source.ToString (), "Source does not match the default value");
        }

    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class ExternalPartCollectionTest
    {
        [TestMethod]
        public void Test_PropertyGetter_ExternalPartCollection ()
        {
            ExternalPartCollection widget = new ExternalPartCollection ();

            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsSynchronized, "IsSynchronized does not match the default value");
            Assert.IsNotNull(widget.SyncRoot, "SyncRoot should not have returned null");
            Assert.IsInstanceOfType<ExternalPartCollection>(widget.SyncRoot, "SyncRoot is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Ink
{
    [TestClass]
    public partial class StrokeTest
    {
        [TestMethod]
        public void Test_PropertyGetter_Stroke ()
        {
            Stroke widget = new Stroke ();

            Assert.IsNotNull(widget.StylusPoints, "StylusPoints should not have returned null");
            Assert.IsInstanceOfType<StylusPointCollection>(widget.StylusPoints, "StylusPoints is not of the correct type");
            Assert.IsNotNull(widget.DrawingAttributes, "DrawingAttributes should not have returned null");
            Assert.IsInstanceOfType<DrawingAttributes>(widget.DrawingAttributes, "DrawingAttributes is not of the correct type");
        }

    }
}
namespace MoonTest.System.Windows.Media
{
    [TestClass]
    public partial class DeepZoomImageTileSourceTest
    {
        [TestMethod]
        public void Test_ReadLocalValue_DeepZoomImageTileSource ()
        {
            DeepZoomImageTileSource widget = new DeepZoomImageTileSource ();
            object retval;

            retval = widget.ReadLocalValue(DeepZoomImageTileSource.UriSourceProperty);
            Assert.AreEqual(DependencyProperty.UnsetValue, retval, "ReadLocalValue(DeepZoomImageTileSource.UriSourceProperty) should not have a value by default");
        }

        [TestMethod]
        [MoonlightBug]
        public void Test_GetValue_DeepZoomImageTileSource ()
        {
            DeepZoomImageTileSource widget = new DeepZoomImageTileSource ();
            object retval;

            Assert.IsNotNull(DeepZoomImageTileSource.UriSourceProperty.GetMetadata (typeof (DeepZoomImageTileSource)), "#metadata should not be null for: DeepZoomImageTileSource.UriSourceProperty.DeepZoomImageTileSource");
            retval = DeepZoomImageTileSource.UriSourceProperty.GetMetadata (typeof (DeepZoomImageTileSource)).DefaultValue;
            Assert.IsNotNull(retval, "PropertyMetadata.DefaultValue for DeepZoomImageTileSource.UriSourceProperty should be non-null value");
            Assert.IsInstanceOfType<Uri>(retval, "DeepZoomImageTileSource.UriSourceProperty.GetMetadata() is not of the correct type");
            Assert.AreEqual("", retval.ToString (), "DeepZoomImageTileSource.UriSourceProperty.GetMetadata() does not match the default value");
            retval = widget.GetValue(DeepZoomImageTileSource.UriSourceProperty);
            Assert.IsNull(retval, "GetValue(DeepZoomImageTileSource.UriSourceProperty) should have returned null");
        }

        [TestMethod]
        public void Test_PropertyGetter_DeepZoomImageTileSource ()
        {
            DeepZoomImageTileSource widget = new DeepZoomImageTileSource ();

            Assert.IsNull(widget.UriSource, "UriSource should have returned null");
        }

    }
}
namespace MoonTest.System.Windows
{
    [TestClass]
    public partial class ResourceDictionaryTest
    {
        [TestMethod]
        [MoonlightBug]
        public void Test_PropertyGetter_ResourceDictionary ()
        {
            ResourceDictionary widget = new ResourceDictionary ();

            Assert.IsNotNull(widget.Source, "Source should not have returned null");
            Assert.AreEqual("", widget.Source.ToString (), "Source does not match the default value");
            Assert.IsNotNull(widget.MergedDictionaries, "MergedDictionaries should not have returned null");
            Assert.AreEqual(false, widget.IsReadOnly, "IsReadOnly does not match the default value");
            Assert.AreEqual(0, widget.Count, "Count does not match the default value");
            Assert.AreEqual(false, widget.IsFixedSize, "IsFixedSize does not match the default value");
            Assert.IsNotNull(widget.Keys, "Keys should not have returned null");
            Assert.AreEqual("System.Object[]", widget.Keys.ToString (), "Keys does not match the default value");
            Assert.IsNotNull(widget.Values, "Values should not have returned null");
            Assert.AreEqual("System.Object[]", widget.Values.ToString (), "Values does not match the default value");
        }

    }
}

